#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å webhook –Ω–∞ Railway
"""

import os
import sys
import logging
import requests
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [RAILWAY_FIX] - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("railway_fix.log")]
)
logger = logging.getLogger("railway_fix")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def check_railway_status():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway"""
    railway_url = os.environ.get("RAILWAY_PUBLIC_DOMAIN")
    
    if not railway_url:
        railway_url = os.environ.get("WEBHOOK_URL", "").split("/webhook/")[0]
        
    if not railway_url:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    try:
        if not railway_url.startswith("http"):
            railway_url = f"https://{railway_url}"
        
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway: {railway_url}")
        response = requests.get(f"{railway_url}/health", timeout=30)
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Railway –¥–æ—Å—Ç—É–ø–Ω–æ: {response.text}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway: {e}")
        return False

def delete_and_set_webhook():
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π webhook –∏ —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π"""
    bot_token = os.environ.get("BOT_TOKEN")
    
    if not bot_token:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    webhook_url = os.environ.get("WEBHOOK_URL")
    railway_public_domain = os.environ.get("RAILWAY_PUBLIC_DOMAIN")
    
    if not webhook_url and railway_public_domain:
        webhook_url = f"https://{railway_public_domain}/webhook/{bot_token}"
        logger.info(f"üîß –°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω webhook URL –Ω–∞ –æ—Å–Ω–æ–≤–µ Railway –¥–æ–º–µ–Ω–∞: {webhook_url}")
    
    if not webhook_url:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å WEBHOOK_URL")
        return False
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
    try:
        logger.info("üîÑ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ webhook...")
        delete_url = f"https://api.telegram.org/bot{bot_token}/deleteWebhook?drop_pending_updates=true"
        delete_response = requests.get(delete_url, timeout=30)
        
        if delete_response.status_code == 200 and delete_response.json().get("ok"):
            logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {delete_response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        return False
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    try:
        logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook –Ω–∞ URL: {webhook_url}")
        set_url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
        
        set_data = {
            "url": webhook_url,
            "allowed_updates": ["message", "callback_query", "inline_query"],
            "drop_pending_updates": True,
        }
        
        set_response = requests.post(set_url, json=set_data, timeout=30)
        
        if set_response.status_code == 200 and set_response.json().get("ok"):
            logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {set_response.json().get('description')}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {set_response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return False

def check_webhook_info():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
    bot_token = os.environ.get("BOT_TOKEN")
    
    if not bot_token:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook...")
        info_url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
        info_response = requests.get(info_url, timeout=30)
        
        if info_response.status_code == 200 and info_response.json().get("ok"):
            webhook_info = info_response.json().get("result", {})
            webhook_url = webhook_info.get("url", "")
            last_error = webhook_info.get("last_error_message", "–Ω–µ—Ç")
            pending_updates = webhook_info.get("pending_update_count", 0)
            
            logger.info(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π webhook URL: {webhook_url}")
            logger.info(f"‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
            logger.info(f"‚ÑπÔ∏è –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {pending_updates}")
            
            return webhook_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {info_response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        return None

def test_webhook():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞ webhook URL –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏"""
    webhook_url = os.environ.get("WEBHOOK_URL")
    
    if not webhook_url:
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è WEBHOOK_URL –Ω–µ –Ω–∞–π–¥–µ–Ω–∞")
        return False
    
    try:
        logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ webhook URL: {webhook_url}")
        
        test_data = {
            "update_id": 12345,
            "message": {
                "message_id": 1,
                "from": {
                    "id": 123456789,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "test_user"
                },
                "chat": {
                    "id": 123456789,
                    "first_name": "Test",
                    "username": "test_user",
                    "type": "private"
                },
                "date": 1616142831,
                "text": "/start"
            }
        }
        
        response = requests.post(webhook_url, json=test_data, timeout=30)
        
        logger.info(f"‚ÑπÔ∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logger.info(f"‚ÑπÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            logger.info("‚úÖ Webhook URL –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –æ—Ç–≤–µ—á–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook URL: {response.status_code} - {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook URL: {e}")
        return False

def fix_railway_application():
    """–ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ–º –Ω–∞ Railway"""
    logger.info("üîß –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
    webhook_info = check_webhook_info()
    
    if not webhook_info:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway
    railway_status = check_railway_status()
    
    if not railway_status:
        logger.error("‚ùå –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –Ω–∞ Railway –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–æ")
        logger.info("‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –Ω–∞ Railway –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ")
        return False
    
    # –ü–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    reset_webhook = delete_and_set_webhook()
    
    if not reset_webhook:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
    updated_webhook_info = check_webhook_info()
    
    if not updated_webhook_info:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º webhook
    webhook_test = test_webhook()
    
    if not webhook_test:
        logger.error("‚ùå –¢–µ—Å—Ç webhook –Ω–µ –ø—Ä–æ–π–¥–µ–Ω")
        logger.info("‚ÑπÔ∏è –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–æ–¥ –æ–±—Ä–∞–±–æ—Ç–∫–∏ webhook –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
        return False
    
    logger.info("‚úÖ –í—Å–µ –ø—Ä–æ–≤–µ—Ä–∫–∏ —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–π–¥–µ–Ω—ã. –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ–ª–∂–Ω–æ —Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.")
    return True

if __name__ == "__main__":
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ —Å–∫—Ä–∏–ø—Ç–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—Ä–æ–±–ª–µ–º —Å webhook –Ω–∞ Railway")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    if not os.environ.get("BOT_TOKEN"):
        logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env —Ñ–∞–π–ª–µ")
        sys.exit(1)
    
    if not os.environ.get("WEBHOOK_URL") and not os.environ.get("RAILWAY_PUBLIC_DOMAIN"):
        logger.error("‚ùå –ù–µ –Ω–∞–π–¥–µ–Ω—ã –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ WEBHOOK_URL –∏–ª–∏ RAILWAY_PUBLIC_DOMAIN")
        sys.exit(1)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ—Ü–µ–¥—É—Ä—É –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    success = fix_railway_application()
    
    if success:
        logger.info("üéâ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(0)
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å webhook –Ω–∞ Railway")
        sys.exit(1) 