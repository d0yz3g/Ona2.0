import asyncio
import logging
import os
import sys
import traceback
from datetime import datetime
from typing import Dict, Any, Optional
from dotenv import load_dotenv

from aiogram import Bot, Dispatcher, Router, F, html
from aiogram.types import Message, Update, ErrorEvent
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.exceptions import TelegramAPIError
from aiohttp import web

from db import Database
# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã –∏–∑ handlers/__init__.py
from handlers import (
    reflect_router,
    meditate_router,
    reminder_router,
    survey_router,
    general_router
)

from services.scheduler import ReminderScheduler

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(stream=sys.stdout),
        logging.FileHandler("bot.log", mode="a", encoding="utf-8")
    ]
)

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–≥–µ—Ä–∞ –¥–ª—è –æ—Ç–ª–æ–≤–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
def handle_exception(exc_type, exc_value, exc_traceback):
    if issubclass(exc_type, KeyboardInterrupt):
        # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –æ–±—Ä–∞–±–æ—Ç–∫–∞ Ctrl+C
        sys.__excepthook__(exc_type, exc_value, exc_traceback)
        return
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
    logger.error("–ù–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω–æ–µ –∏—Å–∫–ª—é—á–µ–Ω–∏–µ:", 
                exc_info=(exc_type, exc_value, exc_traceback),
                stack_info=True)

# –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –∏—Å–∫–ª—é—á–µ–Ω–∏–π
sys.excepthook = handle_exception

logger = logging.getLogger(__name__)

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–æ–≤ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë–æ—Ç –Ω–µ –º–æ–∂–µ—Ç –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω.")
    sys.exit(1)

OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ë—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π.")

ELEVEN_API_KEY = os.getenv("ELEVEN_API_KEY")
if not ELEVEN_API_KEY:
    logger.warning("ELEVEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –§—É–Ω–∫—Ü–∏—è –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –±—É–¥–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ –∑–∞–≥–ª—É—à–∫–∏.")

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
db = Database()

# –°–æ–∑–¥–∞–Ω–∏–µ —Ä–æ—É—Ç–µ—Ä–∞ –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
main_router = Router(name="main")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥
@main_router.message(Command("start"))
async def start(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start."""
    # –î–æ–±–∞–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö
    user_id = db.add_user(
        message.from_user.id, 
        f"{message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name else ''}"
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} (db_id: {user_id}) –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")
    
    await message.answer(
        "–ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç –û–Ω–∞, –¥–∞–≤–∞–π –ø–æ–∑–Ω–∞–∫–æ–º–∏–º—Å—è. "
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏."
    )

@main_router.message(Command("help"))
async def help_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help."""
    help_text = (
        "–í–æ—Ç –∫–æ–º–∞–Ω–¥—ã, –∫–æ—Ç–æ—Ä—ã–µ —è –ø–æ–Ω–∏–º–∞—é:\n"
        "/start - –ù–∞—á–∞—Ç—å –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏–µ —Å –±–æ—Ç–æ–º\n"
        "/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ\n"
        "/profile - –ü–æ–∫–∞–∑–∞—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å (–∏–ª–∏ –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å, –µ—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—å –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç)\n"
        "/questionnaire, /begin - –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n"
        "/reflect - –ü–æ–ª—É—á–∏—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç\n"
        "/help_reflect - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –ø–æ–ª—É—á–µ–Ω–∏—é —Å–æ–≤–µ—Ç–æ–≤\n"
        "/meditate - –ü–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é\n"
        "/help_meditate - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è–º\n"
        "/reminder_on - –í–∫–ª—é—á–∏—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/reminder_off - –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è\n"
        "/reminder_status - –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π\n"
        "/help_reminder - –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º\n"
        "/cancel - –ü—Ä–µ—Ä–≤–∞—Ç—å —Ç–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å"
    )
    await message.answer(help_text)
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

@main_router.message(Command("profile"))
async def profile(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /profile."""
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ –ë–î
    user = db.get_user_by_tg_id(message.from_user.id)
    
    if not user:
        user_id = db.add_user(
            message.from_user.id,
            f"{message.from_user.first_name} {message.from_user.last_name if message.from_user.last_name else ''}"
        )
    else:
        user_id = user["id"]
        
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –ø—Ä–æ—Ñ–∏–ª—è
    profile_data = db.get_profile(user_id)
    
    if profile_data:
        # –û—Ç–æ–±—Ä–∞–∂–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
        summary = profile_data.get("summary_json", {})
        natal = profile_data.get("natal_json", {})
        
        if summary:
            # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
            name = summary.get("name", "–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ")
            strengths = summary.get("strengths", [])
            scores = summary.get("scores", {})
            
            # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ —Å –ø—Ä–æ—Ñ–∏–ª–µ–º
            profile_message = f"–ü—Ä–æ—Ñ–∏–ª—å –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {name}:\n\n"
            
            if strengths:
                profile_message += "–°–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:\n"
                for i, strength in enumerate(strengths, 1):
                    profile_message += f"{i}. {strength}\n"
                profile_message += "\n"
            
            # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –∫–∞—Ç–µ–≥–æ—Ä–∏–π
            category_names = {
                "analytical": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
                "creative": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –º—ã—Å–ª–∏—Ç–µ–ª—å",
                "leadership": "–õ–∏–¥–µ—Ä",
                "social": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä",
                "organized": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
                "resilient": "–°—Ç–æ–π–∫–∏–π"
            }
            
            if scores:
                profile_message += "–û—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:\n"
                for category, score in scores.items():
                    profile_message += f"- {category_names.get(category, category)}: {score}/5\n"
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø—Ä–æ—Ñ–∏–ª–µ
            await message.answer(profile_message)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å AI-–∞–Ω–∞–ª–∏–∑, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ
            ai_analysis = summary.get("ai_analysis", {})
            if ai_analysis:
                ai_message = "üß† –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è:\n\n"
                
                if ai_analysis.get("summary"):
                    ai_message += f"{ai_analysis['summary']}\n\n"
                
                if ai_analysis.get("strengths") and len(ai_analysis["strengths"]) > 0:
                    ai_message += "–ö–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:\n"
                    for i, strength in enumerate(ai_analysis["strengths"], 1):
                        ai_message += f"{i}. {strength}\n"
                    ai_message += "\n"
                
                if ai_analysis.get("growth_areas") and len(ai_analysis["growth_areas"]) > 0:
                    ai_message += "–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:\n"
                    for i, area in enumerate(ai_analysis["growth_areas"], 1):
                        ai_message += f"{i}. {area}\n"
                
                await message.answer(ai_message)
            
            # –ï—Å–ª–∏ –µ—Å—Ç—å –¥–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏—Ö
            if natal and not natal.get("error"):
                astro_message = "üåü –î–∞–Ω–Ω—ã–µ –Ω–∞—Ç–∞–ª—å–Ω–æ–π –∫–∞—Ä—Ç—ã:\n\n"
                astro_message += f"–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è: {summary.get('birthdate')}\n"
                astro_message += f"–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è: {summary.get('birthplace')}\n\n"
                
                # –°–ª–æ–≤–∞—Ä—å –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –ø–ª–∞–Ω–µ—Ç
                planet_names = {
                    "sun": "–°–æ–ª–Ω—Ü–µ",
                    "moon": "–õ—É–Ω–∞",
                    "mercury": "–ú–µ—Ä–∫—É—Ä–∏–π",
                    "venus": "–í–µ–Ω–µ—Ä–∞",
                    "mars": "–ú–∞—Ä—Å",
                    "jupiter": "–Æ–ø–∏—Ç–µ—Ä",
                    "saturn": "–°–∞—Ç—É—Ä–Ω"
                }
                
                for planet, position in natal.items():
                    if planet.endswith("_long") and planet.split("_")[0] in planet_names:
                        planet_name = planet_names[planet.split("_")[0]]
                        astro_message += f"{planet_name}: {position:.2f}¬∞\n"
                
                await message.answer(astro_message)
        else:
            await message.answer(
                "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É–∂–µ —Å–æ–∑–¥–∞–Ω, –Ω–æ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –≤ –Ω–µ–º –Ω–µ–ø–æ–ª–Ω–∞—è. "
                "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ —Å –ø–æ–º–æ—â—å—é –∫–æ–º–∞–Ω–¥—ã /questionnaire."
            )
    else:
        await message.answer(
            "–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. "
            "–ß—Ç–æ–±—ã –Ω–∞—á–∞—Ç—å —Å–æ–∑–¥–∞–Ω–∏–µ –ø—Ä–æ—Ñ–∏–ª—è, –ø—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å. "
            "–í–≤–µ–¥–∏—Ç–µ –∫–æ–º–∞–Ω–¥—É /questionnaire –∏–ª–∏ –Ω–∞–ø–∏—à–∏—Ç–µ '–ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å', –∫–æ–≥–¥–∞ –±—É–¥–µ—Ç–µ –≥–æ—Ç–æ–≤—ã."
        )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Ñ–∏–ª—å")

# –°–æ–∑–¥–∞–µ–º API —Ä–æ—É—Ç–µ—Ä –¥–ª—è health-check
api_router = web.RouteTableDef()

@api_router.get("/health")
async def health_handler(request):
    """–≠–Ω–¥–ø–æ–∏–Ω—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."""
    return web.Response(text="OK")

@api_router.get("/")
async def root_handler(request):
    """–ö–æ—Ä–Ω–µ–≤–æ–π —ç–Ω–¥–ø–æ–∏–Ω—Ç —Å–æ —Å—Ç–∞—Ç—É—Å–æ–º —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞."""
    uptime = datetime.now() - request.app['start_time']
    return web.json_response({
        "status": "–ë–æ—Ç —Ä–∞–±–æ—Ç–∞–µ—Ç",
        "uptime": str(uptime),
        "version": "1.0.0"
    })

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –¥–ª—è –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
async def errors_handler(event: ErrorEvent):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –æ—à–∏–±–æ–∫ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π Telegram."""
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ–± –æ—à–∏–±–∫–µ
    update = event.update if hasattr(event, 'update') else None
    exception = event.exception
    
    # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ –∏ —Å–æ–æ–±—â–µ–Ω–∏–∏
    user_id = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    chat_id = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    message_id = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    user_text = '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
    
    if update and hasattr(update, 'message') and update.message:
        user_id = update.message.from_user.id if update.message.from_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        chat_id = update.message.chat.id
        message_id = update.message.message_id
        user_text = update.message.text if hasattr(update.message, 'text') and update.message.text else '<–Ω–µ—Ç —Ç–µ–∫—Å—Ç–∞>'
    elif update and hasattr(update, 'callback_query') and update.callback_query:
        user_id = update.callback_query.from_user.id if update.callback_query.from_user else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        chat_id = update.callback_query.message.chat.id if update.callback_query.message else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        message_id = update.callback_query.message.message_id if update.callback_query.message else '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–æ'
        user_text = update.callback_query.data if update.callback_query.data else '<–Ω–µ—Ç –¥–∞–Ω–Ω—ã—Ö>'
    
    # –ü–æ–¥–≥–æ—Ç–æ–≤–∫–∞ –¥–∞–Ω–Ω—ã—Ö –æ–± –æ—à–∏–±–∫–µ
    error_message = f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ —Å–æ–æ–±—â–µ–Ω–∏—è –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}:\n"
    error_message += f"–ß–∞—Ç: {chat_id}, –°–æ–æ–±—â–µ–Ω–∏–µ ID: {message_id}\n"
    error_message += f"–¢–µ–∫—Å—Ç —Å–æ–æ–±—â–µ–Ω–∏—è: {html.quote(str(user_text))}\n"
    error_message += f"–û—à–∏–±–∫–∞: {html.quote(str(exception))}"
    
    # –õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –æ—à–∏–±–∫–∏
    logger.error(error_message, exc_info=True)
    
    # –í–æ–∑–≤—Ä–∞—â–∞—Ç—å False, —á—Ç–æ–±—ã aiogram –ø—Ä–æ–¥–æ–ª–∂–∏–ª –æ–±—Ä–∞–±–æ—Ç–∫—É –æ—à–∏–±–∫–∏
    return False

async def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞."""
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ —Å–æ—Å—Ç–æ—è–Ω–∏–π FSM
    storage = MemoryStorage()
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä–∞
    bot = Bot(token=BOT_TOKEN)
    dp = Dispatcher(storage=storage)

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∞ –æ—à–∏–±–æ–∫
    dp.errors.register(errors_handler)
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    scheduler = ReminderScheduler(bot=bot, db=db)
    
    # –ü–µ—Ä–µ–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –≤ –º–æ–¥—É–ª—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    from handlers.reminder import set_scheduler
    set_scheduler(scheduler)

    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–≤ —Ä–æ—É—Ç–µ—Ä–æ–≤ (—á–µ–º –≤—ã—à–µ —á–∏—Å–ª–æ, —Ç–µ–º –≤—ã—à–µ –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç)
    main_router.message.middleware.priority = 10  # –°–∞–º—ã–π –≤—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ—Å–Ω–æ–≤–Ω—ã—Ö –∫–æ–º–∞–Ω–¥
    survey_router.message.middleware.priority = 9  # –í—ã—Å–æ–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–ø—Ä–æ—Å–Ω–∏–∫–∞
    reflect_router.message.middleware.priority = 8
    meditate_router.message.middleware.priority = 8
    reminder_router.message.middleware.priority = 8
    general_router.message.middleware.priority = 1  # –°–∞–º—ã–π –Ω–∏–∑–∫–∏–π –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –Ω–µ—Å–ø–µ—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π

    # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
    dp.include_router(main_router)
    dp.include_router(survey_router)
    dp.include_router(reflect_router)
    dp.include_router(meditate_router)
    dp.include_router(reminder_router)
    dp.include_router(general_router)  # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –ø–æ—Å–ª–µ–¥–Ω–∏–º —Å –Ω–∏–∑–∫–∏–º –ø—Ä–∏–æ—Ä–∏—Ç–µ—Ç–æ–º

    # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.start()
    logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è healthcheck
    app = web.Application()
    app.add_routes(api_router)
    app['start_time'] = datetime.now()
    
    # –ó–∞–ø—É—Å–∫ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞
    runner = web.AppRunner(app)
    await runner.setup()
    port = int(os.getenv("PORT", 8080))
    site = web.TCPSite(runner, '0.0.0.0', port)
    await site.start()
    logger.info(f"–í–µ–±-—Å–µ—Ä–≤–µ—Ä –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –ó–∞–ø—É—Å–∫ –ø–æ–ª–ª–∏–Ω–≥–∞
    logger.info("–ë–æ—Ç –∑–∞–ø—É—â–µ–Ω, –æ–∂–∏–¥–∞–Ω–∏–µ —Å–æ–æ–±—â–µ–Ω–∏–π...")
    try:
        await dp.start_polling(bot)
    finally:
        # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä–∞ –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞
        scheduler.shutdown()
        await runner.cleanup()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π –∏ –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã")

if __name__ == "__main__":
    logger.info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –±–æ—Ç–∞...")
    try:
        asyncio.run(main())
    except KeyboardInterrupt:
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤—Ä—É—á–Ω—É—é")
    except Exception as e:
        logger.exception(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
    finally:
        # –ó–∞–∫—Ä—ã—Ç–∏–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ —Ä–∞–±–æ—Ç—ã
        if 'db' in locals():
            db.close()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –±–∞–∑–æ–π –¥–∞–Ω–Ω—ã—Ö –∑–∞–∫—Ä—ã—Ç–æ") 