import asyncio
import logging
import os
import sys
from aiogram import Bot, Dispatcher, F
from aiogram.types import Message
from aiogram.filters import Command
from aiogram.fsm.storage.memory import MemoryStorage
from dotenv import load_dotenv

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è –∏–∑ .env
load_dotenv()

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è railway_helper –∏ –µ–≥–æ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è
try:
    from railway_helper import ensure_modules_available, print_railway_info
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
    print_railway_info("–ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Railway Helper", "INFO")
    ensure_modules_available([
        "survey_handler",
        "meditation_handler",
        "conversation_handler",
        "reminder_handler",
        "voice_handler",
        "railway_logging"
    ])
except ImportError:
    print("–ë–û–¢: Railway Helper –Ω–µ –Ω–∞–π–¥–µ–Ω, –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è –¥–ª—è Railway
try:
    from railway_logging import setup_railway_logging, railway_print
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Railway
    logger = setup_railway_logging("ona_bot", logging.INFO)
    railway_print("–õ–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è Railway –Ω–∞—Å—Ç—Ä–æ–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ", "INFO")
except ImportError:
    # –°—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è, –µ—Å–ª–∏ –º–æ–¥—É–ª—å railway_logging –Ω–µ –Ω–∞–π–¥–µ–Ω
    logging.basicConfig(
        level=logging.INFO,
        format="%(asctime)s - %(name)s - %(levelname)s - %(message)s",
        handlers=[
            logging.StreamHandler(sys.stdout),
            logging.FileHandler("bot.log")
        ]
    )
    logger = logging.getLogger(__name__)
    print("–ë–û–¢: –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ (railway_logging –Ω–µ –Ω–∞–π–¥–µ–Ω)")
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ñ—É–Ω–∫—Ü–∏—é railway_print, –µ—Å–ª–∏ –º–æ–¥—É–ª—å railway_logging –Ω–µ –Ω–∞–π–¥–µ–Ω
    def railway_print(message, level="INFO"):
        prefix = "–ò–ù–§–û"
        if level.upper() == "ERROR":
            prefix = "–û–®–ò–ë–ö–ê"
        elif level.upper() == "WARNING":
            prefix = "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
        elif level.upper() == "DEBUG":
            prefix = "–û–¢–õ–ê–î–ö–ê"
        print(f"{prefix}: {message}")
        sys.stdout.flush()

# –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –∑–∞–ø—É—Å–∫–µ
railway_print("=== ONA TELEGRAM BOT STARTING ===", "INFO")
railway_print(f"Python version: {sys.version}", "INFO")
railway_print(f"Current working directory: {os.getcwd()}", "INFO")
railway_print(f"Files in directory: {[f for f in os.listdir('.') if f.endswith('.py')]}", "INFO")

# –ó–∞–≥—Ä—É–∂–∞–µ–º API —Ç–æ–∫–µ–Ω –∏–∑ .env —Ñ–∞–π–ª–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ")
    railway_print("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ .env —Ñ–∞–π–ª–µ", "ERROR")
    sys.exit(1)
else:
    railway_print("BOT_TOKEN –Ω–∞–π–¥–µ–Ω —É—Å–ø–µ—à–Ω–æ", "INFO")

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è psutil
try:
    import psutil
    PSUTIL_AVAILABLE = True
    logger.info("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ psutil —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
except ImportError:
    PSUTIL_AVAILABLE = False
    logger.warning("–ë–∏–±–ª–∏–æ—Ç–µ–∫–∞ psutil –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞, –Ω–µ–∫–æ—Ç–æ—Ä—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏ –±—É–¥—É—Ç –Ω–µ–¥–æ—Å—Ç—É–ø–Ω—ã")

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
try:
    railway_print("–ò–º–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö –º–æ–¥—É–ª–µ–π –±–æ—Ç–∞...", "INFO")
    from survey_handler import survey_router, get_main_keyboard
    from voice_handler import voice_router
    from conversation_handler import conversation_router
    from meditation_handler import meditation_router
    from reminder_handler import reminder_router, scheduler
    railway_print("–í—Å–µ –º–æ–¥—É–ª–∏ —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã", "INFO")
except ImportError as e:
    logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}")
    railway_print(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π: {e}", "ERROR")
    railway_print("–ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π...", "WARNING")
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∞–≤–∞—Ä–∏–π–Ω–æ–π –∑–∞–≥—Ä—É–∑–∫–∏ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç—ã–µ —Ä–æ—É—Ç–µ—Ä—ã
    from aiogram import Router
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    
    survey_router = Router(name="survey")
    voice_router = Router(name="voice")
    conversation_router = Router(name="conversation")
    meditation_router = Router(name="meditation")
    reminder_router = Router(name="reminder")
    
    # –°–æ–∑–¥–∞–µ–º –±–∞–∑–æ–≤—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    def get_main_keyboard():
        return ReplyKeyboardMarkup(
            keyboard=[
                [KeyboardButton(text="üìù –û–ø—Ä–æ—Å"), KeyboardButton(text="üí¨ –ü–æ–º–æ—â—å")]
            ],
            resize_keyboard=True
        )
    
    # –°–æ–∑–¥–∞–µ–º –ø—É—Å—Ç–æ–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    from apscheduler.schedulers.asyncio import AsyncIOScheduler
    scheduler = AsyncIOScheduler()
    
    railway_print("–ê–≤–∞—Ä–∏–π–Ω–∞—è –∑–∞–≥—Ä—É–∑–∫–∞ –±–∞–∑–æ–≤—ã—Ö –º–æ–¥—É–ª–µ–π –≤—ã–ø–æ–ª–Ω–µ–Ω–∞", "WARNING")

# –°–æ–∑–¥–∞–µ–º —ç–∫–∑–µ–º–ø–ª—è—Ä –±–æ—Ç–∞ –∏ –¥–∏—Å–ø–µ—Ç—á–µ—Ä
bot = Bot(token=BOT_TOKEN)
dp = Dispatcher(storage=MemoryStorage())

# –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º —Ä–æ—É—Ç–µ—Ä—ã
dp.include_router(survey_router)
dp.include_router(voice_router)
dp.include_router(meditation_router)
dp.include_router(reminder_router)
dp.include_router(conversation_router)

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
@dp.message(Command("start"))
async def cmd_start(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /start
    """
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    greeting_text = (
        f"üëã –ü—Ä–∏–≤–µ—Ç, {message.from_user.first_name}!\n\n"
        "–Ø <b>–û–ù–ê</b> - —Ç–≤–æ–π –û—Å–æ–∑–Ω–∞–Ω–Ω—ã–π –ù–∞—Å—Ç–∞–≤–Ω–∏–∫ –∏ –ê–Ω–∞–ª–∏—Ç–∏–∫.\n\n"
        "–Ø –ø–æ–º–æ–≥—É —Ç–µ–±–µ:\n"
        "‚Ä¢ üß† –û–ø—Ä–µ–¥–µ–ª–∏—Ç—å —Ç–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ —Ç–∞–ª–∞–Ω—Ç—ã\n"
        "‚Ä¢ üí° –î–∞—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã\n"
        "‚Ä¢ üå± –ü–æ–¥–¥–µ—Ä–∂–∞—Ç—å –≤ —Ä–∞–∑–≤–∏—Ç–∏–∏ –∏ —Ä–æ—Å—Ç–µ\n\n"
        "–ß—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å —Ç–≤–æ–π <b>–ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å</b>, –Ω—É–∂–Ω–æ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∏–∑ 34 –≤–æ–ø—Ä–æ—Å–æ–≤. "
        "–≠—Ç–æ –∑–∞–π–º–µ—Ç –æ–∫–æ–ª–æ 10-15 –º–∏–Ω—É—Ç.\n\n"
        "–ì–æ—Ç–æ–≤ –Ω–∞—á–∞—Ç—å?"
    )
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –µ–¥–∏–Ω—É—é –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –∏–∑ survey_handler
    keyboard = get_main_keyboard()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        greeting_text,
        parse_mode="HTML",
        reply_markup=keyboard
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
@dp.message(Command("help"))
@dp.message(F.text == "üí¨ –ü–æ–º–æ—â—å")
async def cmd_help(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /help
    """
    help_text = (
        "üîç <b>–û—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏:</b>\n\n"
        "‚Ä¢ /start - –ù–∞—á–∞—Ç—å —Ä–∞–±–æ—Ç—É —Å –±–æ—Ç–æ–º\n"
        "‚Ä¢ /survey –∏–ª–∏ üìù –û–ø—Ä–æ—Å - –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n"
        "‚Ä¢ /profile –∏–ª–∏ üë§ –ü—Ä–æ—Ñ–∏–ª—å - –ü–æ—Å–º–æ—Ç—Ä–µ—Ç—å —Å–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "‚Ä¢ /meditate –∏–ª–∏ üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ - –ü–æ–ª—É—á–∏—Ç—å –∞—É–¥–∏–æ-–º–µ–¥–∏—Ç–∞—Ü–∏—é\n"
        "‚Ä¢ /reminders –∏–ª–∏ ‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è - –ù–∞—Å—Ç—Ä–æ–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö\n"
        "‚Ä¢ /advice –∏–ª–∏ üí° –°–æ–≤–µ—Ç—ã - –ü–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–π —Å–æ–≤–µ—Ç –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –ª–∏—á–Ω–æ—Å—Ç–∏\n"
        "‚Ä¢ /restart –∏–ª–∏ üîÑ –†–µ—Å—Ç–∞—Ä—Ç - –ü–µ—Ä–µ–∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞\n"
        "‚Ä¢ /cancel –∏–ª–∏ ‚ùå –û—Ç–º–µ–Ω–∏—Ç—å - –û—Ç–º–µ–Ω–∏—Ç—å —Ç–µ–∫—É—â–µ–µ –¥–µ–π—Å—Ç–≤–∏–µ\n\n"
        "üó£ <b>–ö–∞–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç—å—Å—è –±–æ—Ç–æ–º:</b>\n\n"
        "1. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å –∏–∑ 34 –≤–æ–ø—Ä–æ—Å–æ–≤\n"
        "2. –ü–æ–ª—É—á–∏—Ç–µ —Å–≤–æ–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å\n"
        "3. –£–∑–Ω–∞–π—Ç–µ –≤–∞—à —Ç–∏–ø –ª–∏—á–Ω–æ—Å—Ç–∏ (–ò–Ω—Ç–µ–ª–ª–µ–∫—Ç—É–∞–ª—å–Ω—ã–π, –≠–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–π, –ü—Ä–∞–∫—Ç–∏—á–µ—Å–∫–∏–π –∏–ª–∏ –¢–≤–æ—Ä—á–µ—Å–∫–∏–π)\n"
        "4. –ü–æ–ª—É—á–∞–π—Ç–µ –ø–µ—Ä—Å–æ–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ —Å–æ–≤–µ—Ç—ã, —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–µ –≤–∞—à–µ–º—É —Ç–∏–ø—É –ª–∏—á–Ω–æ—Å—Ç–∏\n"
        "5. –û–±—â–∞–π—Ç–µ—Å—å —Å–æ –º–Ω–æ–π —Ç–µ–∫—Å—Ç–æ–º –∏–ª–∏ –≥–æ–ª–æ—Å–æ–≤—ã–º–∏ —Å–æ–æ–±—â–µ–Ω–∏—è–º–∏\n"
        "6. –Ø –±—É–¥—É –æ—Ç–≤–µ—á–∞—Ç—å —Å —É—á–µ—Ç–æ–º –≤–∞—à–∏—Ö –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –æ—Å–æ–±–µ–Ω–Ω–æ—Å—Ç–µ–π\n\n"
        "üí° <b>–ï—Å–ª–∏ –≤–æ–∑–Ω–∏–∫–Ω—É—Ç –≤–æ–ø—Ä–æ—Å—ã –∏–ª–∏ –ø—Ä–æ–±–ª–µ–º—ã:</b>\n"
        "‚Ä¢ –ù–∞–ø–∏—à–∏—Ç–µ \"–ü–æ–º–æ—â—å\" –∏–ª–∏ –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–æ–º–∞–Ω–¥—É /help\n"
    )
    
    await message.answer(
        help_text,
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart
@dp.message(Command("restart"))
@dp.message(F.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç")
async def cmd_restart(message: Message):
    """
    –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /restart
    """
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–µ
    await message.answer(
        "üîÑ <b>–ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω!</b>\n\n"
        "–ù–∞—á–∏–Ω–∞–µ–º –∑–∞–Ω–æ–≤–æ. –ï—Å–ª–∏ –≤—ã —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å —Å–≤–æ–π –ø—Ä–æ—Ñ–∏–ª—å, "
        "–≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–æ–π üìù –û–ø—Ä–æ—Å –∏ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏—Ç–µ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫.",
        parse_mode="HTML",
        reply_markup=get_main_keyboard()
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
async def start_scheduler():
    if scheduler and not scheduler.running:
        scheduler.start()
        logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –∑–∞–ø—É—â–µ–Ω")

async def main():
    """
    –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞
    """
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –±–æ—Ç
    logger.info("–ë–æ—Ç –û–ù–ê –∑–∞–ø—É—Å–∫–∞–µ—Ç—Å—è...")
    railway_print("–ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ü–∏–∫–ª–∞ –±–æ—Ç–∞...", "INFO")
    
    try:
        # –£–¥–∞–ª—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è, –∫–æ—Ç–æ—Ä—ã–µ –±—ã–ª–∏ –ø—Ä–æ–ø—É—â–µ–Ω—ã (–µ—Å–ª–∏ –±–æ—Ç –±—ã–ª –æ—Ç–∫–ª—é—á–µ–Ω)
        await bot.delete_webhook(drop_pending_updates=True)
        railway_print("–°—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è —É–¥–∞–ª–µ–Ω—ã", "INFO")
        
        # –£–¥–∞–ª—è–µ–º webhook (–µ—Å–ª–∏ –æ–Ω –±—ã–ª —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω)
        webhook_info = await bot.get_webhook_info()
        if webhook_info.url:
            await bot.delete_webhook()
            logger.info("Webhook —É–¥–∞–ª–µ–Ω, —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –æ—á–∏—â–µ–Ω—ã")
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API
        bot_info = await bot.get_me()
        logger.info(f"–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ. –ò–º—è –±–æ—Ç–∞: @{bot_info.username}")
        railway_print(f"–ë–æ—Ç @{bot_info.username} —É—Å–ø–µ—à–Ω–æ –ø–æ–¥–∫–ª—é—á–µ–Ω –∫ Telegram API", "INFO")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π
        await start_scheduler()
        
        # –°–æ–æ–±—â–µ–Ω–∏–µ –æ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞
        railway_print("=== ONA BOT –ó–ê–ü–£–©–ï–ù –ò –ì–û–¢–û–í –ö –†–ê–ë–û–¢–ï ===", "INFO")
        
        # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞ —Å –¥–ª–∏–Ω–Ω—ã–º –ø–æ–ª–ª–∏–Ω–≥–æ–º
        await dp.start_polling(bot)
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞: {e}")
        railway_print(f"–û—à–∏–±–∫–∞ –∑–∞–ø—É—Å–∫–∞: {str(e)}", "ERROR")
    finally:
        # –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏ –≤—ã—Ö–æ–¥–µ
        if scheduler and scheduler.running:
            scheduler.shutdown()
            logger.info("–ü–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –∑–∞–¥–∞–Ω–∏–π –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        
        await bot.session.close()
        logger.info("–ë–æ—Ç –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        railway_print("–ë–æ—Ç –∑–∞–≤–µ—Ä—à–∏–ª —Ä–∞–±–æ—Ç—É", "INFO")

if __name__ == "__main__":
    # –ó–∞–ø—É—Å–∫–∞–µ–º –±–æ—Ç–∞
    asyncio.run(main()) 