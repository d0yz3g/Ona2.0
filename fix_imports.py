#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –ø—É—Ç–µ–π –∏–º–ø–æ—Ä—Ç–∞ –≤ —Å—Ä–µ–¥–µ Railway.
–ó–∞–ø—É—Å–∫–∞–µ—Ç—Å—è –ø–µ—Ä–µ–¥ –æ—Å–Ω–æ–≤–Ω—ã–º —Å–∫—Ä–∏–ø—Ç–æ–º –±–æ—Ç–∞ –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª–µ–π.
"""

import os
import sys
import shutil
import importlib
import logging
from pathlib import Path

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –±–∞–∑–æ–≤–æ–≥–æ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [IMPORT_FIX] - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("fix_imports")

def check_environment():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–µ–µ –æ–∫—Ä—É–∂–µ–Ω–∏–µ –∏ –ø—É—Ç–∏ Python."""
    logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {os.getcwd()}")
    logger.info(f"Python path: {sys.path}")
    logger.info(f"–ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è: {os.environ.get('PYTHONPATH', '–ù–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞')}")
    logger.info(f"–§–∞–π–ª—ã –≤ —Ç–µ–∫—É—â–µ–π –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏: {[f for f in os.listdir('.') if f.endswith('.py')]}")

def fix_imports():
    """
    –ò—Å–ø—Ä–∞–≤–ª—è–µ—Ç –ø—É—Ç–∏ –∏–º–ø–æ—Ä—Ç–∞ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –≤ Railway.
    
    1. –î–æ–±–∞–≤–ª—è–µ—Ç —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
    2. –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
    3. –ü—ã—Ç–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –æ—Å–Ω–æ–≤–Ω—ã–µ –º–æ–¥—É–ª–∏
    """
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
    current_dir = os.path.dirname(os.path.abspath(__file__))
    if current_dir not in sys.path:
        sys.path.insert(0, current_dir)
        logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å {current_dir} –≤ sys.path")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞–ª–∏—á–∏—è –∫–ª—é—á–µ–≤—ã—Ö —Ñ–∞–π–ª–æ–≤
    required_files = [
        "main.py", 
        "survey_handler.py", 
        "meditation_handler.py", 
        "conversation_handler.py",
        "reminder_handler.py",
        "voice_handler.py",
        "railway_logging.py"
    ]
    
    missing_files = []
    for file in required_files:
        if not os.path.exists(file):
            missing_files.append(file)
    
    if missing_files:
        logger.error(f"–û—Ç—Å—É—Ç—Å—Ç–≤—É—é—Ç –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        logger.info("–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞–π—Ç–∏ —Ñ–∞–π–ª—ã –≤ –¥—Ä—É–≥–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö...")
        
        # –ü–æ–∏—Å–∫ —Ñ–∞–π–ª–æ–≤ –≤ –¥—Ä—É–≥–∏—Ö –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è—Ö
        for root, dirs, files in os.walk("."):
            for file in missing_files[:]:
                if file in files:
                    src_path = os.path.join(root, file)
                    logger.info(f"–ù–∞–π–¥–µ–Ω —Ñ–∞–π–ª {file} –≤ –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏–∏ {root}")
                    
                    # –ö–æ–ø–∏—Ä—É–µ–º —Ñ–∞–π–ª –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é
                    try:
                        shutil.copy2(src_path, file)
                        logger.info(f"–§–∞–π–ª {file} —Å–∫–æ–ø–∏—Ä–æ–≤–∞–Ω –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é")
                        missing_files.remove(file)
                    except Exception as e:
                        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏–∏ —Ñ–∞–π–ª–∞ {file}: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ—Å—Ç–∞–≤—à–∏—Ö—Å—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤
    if missing_files:
        logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞–π—Ç–∏ —Å–ª–µ–¥—É—é—â–∏–µ —Ñ–∞–π–ª—ã: {', '.join(missing_files)}")
        create_placeholders_for_missing_files(missing_files)
    
    # –ü–æ–ø—ã—Ç–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –∫–ª—é—á–µ–≤—ã—Ö –º–æ–¥—É–ª–µ–π
    try_import_modules()

def create_placeholders_for_missing_files(missing_files):
    """–°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö —Ñ–∞–π–ª–æ–≤."""
    for file in missing_files:
        try:
            module_name = file.replace(".py", "")
            with open(file, "w") as f:
                f.write(f"""# Placeholder module for {file}
import logging
logger = logging.getLogger(__name__)
logger.warning("This is a placeholder module created by fix_imports.py")

# –ë–∞–∑–æ–≤—ã–µ –∏–º–ø–æ—Ä—Ç—ã –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
from aiogram import Router
from aiogram.types import Message, CallbackQuery
from aiogram.utils.keyboard import InlineKeyboardBuilder

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä
{module_name}_router = Router(name="{module_name}")

# –ë–∞–∑–æ–≤—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏, –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –¥–ª—è –∏–º–ø–æ—Ä—Ç–∞ –≤ main.py
def get_main_keyboard():
    \"\"\"–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è —Ñ—É–Ω–∫—Ü–∏–∏ get_main_keyboard\"\"\"
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    keyboard = ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û–ø—Ä–æ—Å"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏"), KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã"), KeyboardButton(text="üí¨ –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True
    )
    return keyboard

# –î—Ä—É–≥–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–≥—É—Ç –ø–æ—Ç—Ä–µ–±–æ–≤–∞—Ç—å—Å—è
scheduler = None
""")
            logger.info(f"–°–æ–∑–¥–∞–Ω–∞ –∑–∞–≥–ª—É—à–∫–∞ –¥–ª—è {file}")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è {file}: {e}")

def try_import_modules():
    """–ü—ã—Ç–∞–µ—Ç—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–ª—é—á–µ–≤—ã–µ –º–æ–¥—É–ª–∏."""
    modules_to_import = [
        "survey_handler", 
        "meditation_handler", 
        "conversation_handler",
        "reminder_handler",
        "voice_handler",
        "railway_logging"
    ]
    
    for module_name in modules_to_import:
        try:
            module = importlib.import_module(module_name)
            logger.info(f"–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
        except ImportError as e:
            logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {module_name}: {e}")
        except Exception as e:
            logger.error(f"–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ {module_name}: {e}")

if __name__ == "__main__":
    print("=" * 50)
    print("–ó–ê–ü–£–°–ö –°–ö–†–ò–ü–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ú–ü–û–†–¢–û–í –î–õ–Ø RAILWAY")
    print("=" * 50)
    
    check_environment()
    fix_imports()
    
    print("=" * 50)
    print("–ó–ê–í–ï–†–®–ï–ù–ò–ï –°–ö–†–ò–ü–¢–ê –ò–°–ü–†–ê–í–õ–ï–ù–ò–Ø –ò–ú–ü–û–†–¢–û–í")
    print("=" * 50) 