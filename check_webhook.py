#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook –±–æ—Ç–∞
"""

import os
import sys
import json
import logging
import requests
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [WEBHOOK_CHECK] - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("webhook_check")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

def check_webhook():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–µ–∫ webhook...")
    
    api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
    try:
        response = requests.get(api_url, timeout=30)
        if response.status_code == 200:
            webhook_info = response.json().get('result', {})
            logger.info(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π webhook URL: {webhook_info.get('url')}")
            logger.info(f"‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.get('last_error_message', '–Ω–µ—Ç')}")
            logger.info(f"‚ÑπÔ∏è –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {webhook_info.get('pending_update_count', 0)}")
            logger.info(f"‚ÑπÔ∏è IP-–∞–¥—Ä–µ—Å: {webhook_info.get('ip_address', '–Ω–µ—Ç')}")
            logger.info(f"‚ÑπÔ∏è –ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {webhook_info.get('max_connections', '–Ω–µ—Ç')}")
            logger.info(f"‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω–∏–π –∫–æ–¥ –æ—à–∏–±–∫–∏: {webhook_info.get('last_error_date', '–Ω–µ—Ç')}")
            logger.info(f"‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω–µ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ: {webhook_info.get('last_synchronization_error_date', '–Ω–µ—Ç')}")
            
            return webhook_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}")
        return None

def delete_webhook():
    """–£–¥–∞–ª—è–µ—Ç —Ç–µ–∫—É—â–∏–π webhook"""
    logger.info("üóëÔ∏è –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ webhook...")
    
    api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook?drop_pending_updates=true"
    try:
        response = requests.get(api_url, timeout=30)
        if response.status_code == 200 and response.json().get('ok'):
            logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        return False

def setup_webhook(webhook_url=None):
    """–ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook —Å —É–∫–∞–∑–∞–Ω–Ω—ã–º URL"""
    if not webhook_url:
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ —Å–µ—Ä–≤–∏—Å–∞ Railway
        railway_service_id = os.environ.get('RAILWAY_SERVICE_ID')
        if railway_service_id:
            webhook_url = f"https://{railway_service_id}.up.railway.app/webhook/{BOT_TOKEN}"
        else:
            logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω URL –¥–ª—è webhook –∏ –Ω–µ –Ω–∞–π–¥–µ–Ω RAILWAY_SERVICE_ID")
            return False
    
    logger.info(f"üîÑ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –Ω–∞ URL: {webhook_url}")
    
    api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    try:
        response = requests.post(
            api_url,
            json={
                'url': webhook_url,
                'allowed_updates': ['message', 'callback_query', 'inline_query'],
                'drop_pending_updates': True,
                'secret_token': os.environ.get('WEBHOOK_SECRET', 'telegram_webhook_secret')
            },
            timeout=30
        )
        
        if response.status_code == 200 and response.json().get('ok'):
            description = response.json().get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {description}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook: {e}")
        return False

def send_test_message():
    """–û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —á–µ—Ä–µ–∑ Telegram API"""
    logger.info("üì® –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è...")
    
    # –ü–æ–ª—É—á–∞–µ–º —Å–≤–æ–π —á–∞—Ç ID
    my_chat_id = input("–í–≤–µ–¥–∏—Ç–µ –≤–∞—à Telegram ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: ")
    
    api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    try:
        response = requests.post(
            api_url,
            json={
                'chat_id': my_chat_id,
                'text': "ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. –ï—Å–ª–∏ –≤—ã –≤–∏–¥–∏—Ç–µ —ç—Ç–æ —Å–æ–æ–±—â–µ–Ω–∏–µ, API —Ä–∞–±–æ—Ç–∞–µ—Ç –ø—Ä–∞–≤–∏–ª—å–Ω–æ."
            },
            timeout=10
        )
        
        if response.status_code == 200 and response.json().get('ok'):
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

def test_polling_mode():
    """–ó–∞–ø—É—Å–∫–∞–µ—Ç –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏"""
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è...")
    
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º webhook
    if not delete_webhook():
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ")
    
    api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getUpdates"
    try:
        response = requests.get(api_url, timeout=30)
        if response.status_code == 200:
            updates = response.json().get('result', [])
            logger.info(f"‚ÑπÔ∏è –ü–æ–ª—É—á–µ–Ω–æ {len(updates)} –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π")
            for update in updates:
                logger.info(f"‚ÑπÔ∏è Update ID: {update.get('update_id')}")
                if 'message' in update:
                    message = update['message']
                    logger.info(f"üì© –°–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç {message['from'].get('username', 'Unknown')}: {message.get('text', 'No text')}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {e}")
        return False

def check_bot_info():
    """–ü—Ä–æ–≤–µ—Ä—è–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ"""
    logger.info("üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ...")
    
    api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
    try:
        response = requests.get(api_url, timeout=10)
        if response.status_code == 200:
            bot_info = response.json().get('result', {})
            logger.info(f"‚ÑπÔ∏è –ò–º—è –±–æ—Ç–∞: {bot_info.get('first_name')}")
            logger.info(f"‚ÑπÔ∏è Username: @{bot_info.get('username')}")
            logger.info(f"‚ÑπÔ∏è ID –±–æ—Ç–∞: {bot_info.get('id')}")
            logger.info(f"‚ÑπÔ∏è –ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç inline –∑–∞–ø—Ä–æ—Å—ã: {bot_info.get('supports_inline_queries', False)}")
            return bot_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
        return None

def main():
    """–û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è"""
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook –±–æ—Ç–∞...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
    bot_info = check_bot_info()
    if not bot_info:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ BOT_TOKEN")
        return
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook
    webhook_info = check_webhook()
    
    # –ú–µ–Ω—é –¥–µ–π—Å—Ç–≤–∏–π
    while True:
        print("\nüîß –í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ:")
        print("1. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook")
        print("2. –£–¥–∞–ª–∏—Ç—å webhook")
        print("3. –ù–∞—Å—Ç—Ä–æ–∏—Ç—å webhook")
        print("4. –û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ")
        print("5. –¢–µ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –≤ —Ä–µ–∂–∏–º–µ polling")
        print("6. –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ")
        print("0. –í—ã—Ö–æ–¥")
        
        choice = input("–í–≤–µ–¥–∏—Ç–µ –Ω–æ–º–µ—Ä –¥–µ–π—Å—Ç–≤–∏—è: ")
        
        if choice == "1":
            check_webhook()
        elif choice == "2":
            delete_webhook()
        elif choice == "3":
            webhook_url = input("–í–≤–µ–¥–∏—Ç–µ URL –¥–ª—è webhook (–æ—Å—Ç–∞–≤—å—Ç–µ –ø—É—Å—Ç—ã–º –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è): ")
            if not webhook_url:
                webhook_url = None
            setup_webhook(webhook_url)
        elif choice == "4":
            send_test_message()
        elif choice == "5":
            test_polling_mode()
        elif choice == "6":
            check_bot_info()
        elif choice == "0":
            logger.info("üëã –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã")
            break
        else:
            logger.warning("‚ö†Ô∏è –ù–µ–≤–µ—Ä–Ω—ã–π –≤—ã–±–æ—Ä. –ü–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞")

if __name__ == "__main__":
    main() 