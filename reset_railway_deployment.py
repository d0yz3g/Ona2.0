#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø–æ–ª–Ω–æ–≥–æ —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏ webhook –Ω–∞ Railway.
–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ —ç—Ç–æ—Ç —Å–∫—Ä–∏–ø—Ç, –µ—Å–ª–∏ —É –≤–∞—Å –ø—Ä–æ–¥–æ–ª–∂–∞—é—Ç—Å—è –ø—Ä–æ–±–ª–µ–º—ã —Å —Ä–∞–±–æ—Ç–æ–π –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ webhook.
"""

import os
import sys
import logging
import requests
import time
import argparse
from dotenv import load_dotenv

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [RAILWAY_RESET] - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler(), logging.FileHandler("railway_reset.log")]
)
logger = logging.getLogger("railway_reset")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

def delete_webhook(bot_token, drop_updates=False):
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª—è–µ—Ç webhook –∏ –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    
    Args:
        bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        drop_updates (bool): –£–¥–∞–ª—è—Ç—å –ª–∏ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
    Returns:
        bool: True, –µ—Å–ª–∏ webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω, –∏–Ω–∞—á–µ False
    """
    logger.info(f"üîÑ –£–¥–∞–ª–µ–Ω–∏–µ webhook{' –∏ –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π' if drop_updates else ''}...")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è —É–¥–∞–ª–µ–Ω–∏—è webhook
        url = f"https://api.telegram.org/bot{bot_token}/deleteWebhook"
        params = {"drop_pending_updates": drop_updates}
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(url, params=params, timeout=30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code == 200 and response.json().get("ok"):
            logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
        return False

def set_webhook(bot_token, webhook_url):
    """
    –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –Ω–æ–≤—ã–π webhook
    
    Args:
        bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        webhook_url (str): URL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook
        
    Returns:
        bool: True, –µ—Å–ª–∏ webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –∏–Ω–∞—á–µ False
    """
    logger.info(f"üîÑ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ webhook –Ω–∞ URL: {webhook_url}...")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –∏ –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        url = f"https://api.telegram.org/bot{bot_token}/setWebhook"
        data = {
            "url": webhook_url,
            "allowed_updates": ["message", "callback_query", "inline_query"],
            "drop_pending_updates": True
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.post(url, json=data, timeout=30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code == 200 and response.json().get("ok"):
            logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {response.json().get('description')}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return False

def get_webhook_info(bot_token):
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–∏—Ö –Ω–∞—Å—Ç—Ä–æ–π–∫–∞—Ö webhook
    
    Args:
        bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        
    Returns:
        dict|None: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    logger.info("üîç –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook...")
    
    try:
        # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞
        url = f"https://api.telegram.org/bot{bot_token}/getWebhookInfo"
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å
        response = requests.get(url, timeout=30)
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code == 200 and response.json().get("ok"):
            webhook_info = response.json().get("result", {})
            webhook_url = webhook_info.get("url", "")
            last_error = webhook_info.get("last_error_message", "–Ω–µ—Ç")
            pending_updates = webhook_info.get("pending_update_count", 0)
            
            logger.info(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π webhook URL: {webhook_url}")
            logger.info(f"‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {last_error}")
            logger.info(f"‚ÑπÔ∏è –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {pending_updates}")
            
            return webhook_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        return None

def reset_webhook_config(bot_token, webhook_url=None, railway_domain=None):
    """
    –ü–æ–ª–Ω–æ—Å—Ç—å—é —Å–±—Ä–∞—Å—ã–≤–∞–µ—Ç –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–µ—Ç webhook
    
    Args:
        bot_token (str): –¢–æ–∫–µ–Ω –±–æ—Ç–∞
        webhook_url (str|None): URL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook –∏–ª–∏ None
        railway_domain (str|None): –î–æ–º–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway –∏–ª–∏ None
        
    Returns:
        bool: True, –µ—Å–ª–∏ –æ–ø–µ—Ä–∞—Ü–∏—è —É—Å–ø–µ—à–Ω–æ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞, –∏–Ω–∞—á–µ False
    """
    # –ï—Å–ª–∏ webhook_url –Ω–µ —É–∫–∞–∑–∞–Ω, –Ω–æ —É–∫–∞–∑–∞–Ω railway_domain, —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL
    if not webhook_url and railway_domain:
        webhook_url = f"https://{railway_domain}/webhook/{bot_token}"
        logger.info(f"üîß –°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω webhook URL –Ω–∞ –æ—Å–Ω–æ–≤–µ Railway –¥–æ–º–µ–Ω–∞: {webhook_url}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ URL
    if not webhook_url:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω URL –¥–ª—è webhook")
        return False
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    logger.info("1Ô∏è‚É£ –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook...")
    initial_info = get_webhook_info(bot_token)
    
    # –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π webhook –∏ –≤—Å–µ –æ–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
    logger.info("2Ô∏è‚É£ –£–¥–∞–ª–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ webhook –∏ –≤—Å–µ—Ö –æ–∂–∏–¥–∞—é—â–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π...")
    if not delete_webhook(bot_token, drop_updates=True):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å webhook")
        return False
    
    # –ñ–¥–µ–º –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥
    logger.info("‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ 5 —Å–µ–∫—É–Ω–¥...")
    time.sleep(5)
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webhook —É–¥–∞–ª–µ–Ω
    logger.info("3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è webhook...")
    deleted_info = get_webhook_info(bot_token)
    
    if deleted_info and deleted_info.get("url"):
        logger.warning("‚ö†Ô∏è Webhook –Ω–µ –±—ã–ª –ø–æ–ª–Ω–æ—Å—Ç—å—é —É–¥–∞–ª–µ–Ω")
    else:
        logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    logger.info("4Ô∏è‚É£ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–æ–≤–æ–≥–æ webhook...")
    if not set_webhook(bot_token, webhook_url):
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
        return False
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–π webhook
    logger.info("5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤–æ–≥–æ webhook...")
    new_info = get_webhook_info(bot_token)
    
    if not new_info or new_info.get("url") != webhook_url:
        logger.error("‚ùå Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –∏–ª–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω —Å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω—ã–º URL")
        return False
    
    # –¢–µ—Å—Ç–∏—Ä—É–µ–º –Ω–æ–≤—ã–π webhook
    logger.info("6Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ webhook...")
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–π –∑–∞–ø—Ä–æ—Å –Ω–∞–ø—Ä—è–º—É—é –Ω–∞ URL
        test_data = {
            "update_id": 12345,
            "message": {
                "message_id": 1,
                "from": {
                    "id": 123456789,
                    "is_bot": False,
                    "first_name": "Test",
                    "username": "test_user"
                },
                "chat": {
                    "id": 123456789,
                    "first_name": "Test",
                    "username": "test_user",
                    "type": "private"
                },
                "date": 1616142831,
                "text": "/start"
            }
        }
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å /health endpoint
        health_url = webhook_url.replace("/webhook/" + bot_token, "/health")
        logger.info(f"üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ /health endpoint: {health_url}")
        
        health_response = requests.get(health_url, timeout=30)
        if health_response.status_code == 200:
            logger.info(f"‚úÖ Health endpoint –¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.text}")
        else:
            logger.warning(f"‚ö†Ô∏è Health endpoint –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω: {health_response.status_code} - {health_response.text}")
        
        # –¢–µ–ø–µ—Ä—å —Ç–µ—Å—Ç–∏—Ä—É–µ–º webhook
        logger.info(f"üîç –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –∑–∞–ø—Ä–æ—Å–∞ –Ω–∞ webhook URL: {webhook_url}")
        response = requests.post(webhook_url, json=test_data, timeout=30)
        
        logger.info(f"‚ÑπÔ∏è –ö–æ–¥ –æ—Ç–≤–µ—Ç–∞: {response.status_code}")
        logger.info(f"‚ÑπÔ∏è –¢–µ–∫—Å—Ç –æ—Ç–≤–µ—Ç–∞: {response.text}")
        
        if response.status_code == 200:
            logger.info("‚úÖ Webhook –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ")
        else:
            logger.warning(f"‚ö†Ô∏è Webhook –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∑–∞–ø—Ä–æ—Å—ã –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ: {response.status_code}")
            if response.status_code == 404:
                logger.warning("‚ö†Ô∏è –û—à–∏–±–∫–∞ 404 —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—É —Å –º–∞—Ä—à—Ä—É—Ç–∏–∑–∞—Ü–∏–µ–π –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–∏")
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ webhook: {e}")
    
    logger.info("‚úÖ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è webhook –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
    return True

if __name__ == "__main__":
    parser = argparse.ArgumentParser(description="–°–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ webhook –Ω–∞ Railway")
    parser.add_argument("--token", help="–¢–æ–∫–µ–Ω –±–æ—Ç–∞ Telegram")
    parser.add_argument("--webhook-url", help="URL –¥–ª—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ webhook")
    parser.add_argument("--railway-domain", help="–î–æ–º–µ–Ω –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –Ω–∞ Railway")
    args = parser.parse_args()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏–∑ .env
    bot_token = args.token or os.environ.get("BOT_TOKEN")
    if not bot_token:
        logger.error("‚ùå –ù–µ —É–∫–∞–∑–∞–Ω —Ç–æ–∫–µ–Ω –±–æ—Ç–∞. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ --token –∏–ª–∏ –¥–æ–±–∞–≤—å—Ç–µ BOT_TOKEN –≤ .env")
        sys.exit(1)
    
    # –ü–æ–ª—É—á–∞–µ–º URL webhook –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏–∑ .env
    webhook_url = args.webhook_url or os.environ.get("WEBHOOK_URL")
    
    # –ü–æ–ª—É—á–∞–µ–º –¥–æ–º–µ–Ω Railway –∏–∑ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∏–ª–∏ –∏–∑ .env
    railway_domain = args.railway_domain or os.environ.get("RAILWAY_PUBLIC_DOMAIN")
    
    # –í—ã–ø–æ–ª–Ω—è–µ–º —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ webhook
    logger.info("üöÄ –ó–∞–ø—É—Å–∫ –ø—Ä–æ—Ü–µ–¥—É—Ä—ã —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è webhook –Ω–∞ Railway")
    success = reset_webhook_config(bot_token, webhook_url, railway_domain)
    
    if success:
        logger.info("üéâ –ü—Ä–æ—Ü–µ–¥—É—Ä–∞ —Å–±—Ä–æ—Å–∞ –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏—è webhook —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∞")
        sys.exit(0)
    else:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å —Å–±—Ä–æ—Å –∏ –ø–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ webhook")
        sys.exit(1) 