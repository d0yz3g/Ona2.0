import asyncio
import logging
import os
from dotenv import load_dotenv
from typing import Dict, Union, List, Tuple, Any, Optional
import json
import uuid
from pathlib import Path
import aiohttp
import tempfile
import signal
import random

# –ò–º–ø–æ—Ä—Ç –±–∏–±–ª–∏–æ—Ç–µ–∫–∏ –¥–ª—è –ø–ª–∞–Ω–∏—Ä–æ–≤–∞–Ω–∏—è –∑–∞–¥–∞—á
from apscheduler.schedulers.asyncio import AsyncIOScheduler
from apscheduler.triggers.cron import CronTrigger

# –ò–º–ø–æ—Ä—Ç aiogram
from aiogram import Bot, Dispatcher, Router, F
from aiogram.types import Message, ReplyKeyboardMarkup, KeyboardButton, InlineKeyboardMarkup, InlineKeyboardButton
from aiogram.types import CallbackQuery, ReplyKeyboardRemove, FSInputFile
from aiogram.filters import Command, CommandStart
from aiogram.fsm.storage.memory import MemoryStorage
from aiogram.fsm.context import FSMContext
from aiogram.utils.keyboard import ReplyKeyboardBuilder, InlineKeyboardBuilder

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - %(name)s - %(levelname)s - %(message)s"
)
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞—á
scheduler = AsyncIOScheduler()

# –°–ª–æ–≤–∞—Ä—å –¥–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π —Å –≤–∫–ª—é—á–µ–Ω–Ω—ã–º–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
reminder_users = {}

# –ó–∞–≥—Ä—É–∑–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è!")
    exit(1)

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ ElevenLabs
ELEVEN_TOKEN = os.getenv("ELEVEN_API_KEY")
# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
if not ELEVEN_TOKEN:
    logger.warning("ELEVEN_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –ú–µ–¥–∏—Ç–∞—Ü–∏–∏ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.")

# –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–æ–∫–µ–Ω–∞ OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
# –ï—Å–ª–∏ —Ç–æ–∫–µ–Ω –Ω–µ –Ω–∞–π–¥–µ–Ω, –ª–æ–≥–∏—Ä—É–µ–º –ø—Ä–µ–¥—É–ø—Ä–µ–∂–¥–µ–Ω–∏–µ, –Ω–æ –ø—Ä–æ–¥–æ–ª–∂–∞–µ–º —Ä–∞–±–æ—Ç—É
if not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY –Ω–µ –Ω–∞–π–¥–µ–Ω –≤ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è. –§—É–Ω–∫—Ü–∏–∏ —Ä–∞—Å–ø–æ–∑–Ω–∞–≤–∞–Ω–∏—è –≥–æ–ª–æ—Å–∞ –∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤ –±—É–¥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–Ω–æ–º —Ä–µ–∂–∏–º–µ.")

# –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è API ElevenLabs
ELEVEN_API_URL = "https://api.elevenlabs.io/v1/text-to-speech"
ELEVEN_VOICE_ID = "21m00Tcm4TlvDq8ikWAM"  # ID —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–≥–æ –≥–æ–ª–æ—Å–∞

# –£—Ä–æ–≤–µ–Ω—å –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
LOG_LEVEL = os.getenv("LOG_LEVEL", "INFO")
logging.basicConfig(level=getattr(logging, LOG_LEVEL))

# –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tmp, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
tmp_dir = Path("tmp")
tmp_dir.mkdir(exist_ok=True)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ (–∑–∞–º–µ–Ω—è–µ–º —É–¥–∞–ª–µ–Ω–Ω—É—é —Ñ—É–Ω–∫—Ü–∏—é –∏–∑ services/tts.py)
async def generate_audio(text: str, user_id: int, meditation_type: str) -> str:
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ElevenLabs API –∏–ª–∏ gTTS –≤ –¥–µ–º–æ-—Ä–µ–∂–∏–º–µ.
    
    Args:
        text: –¢–µ–∫—Å—Ç –¥–ª—è –ø—Ä–µ–æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è –≤ –∞—É–¥–∏–æ
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è Telegram
        meditation_type: –¢–∏–ø –º–µ–¥–∏—Ç–∞—Ü–∏–∏ (relax, focus, sleep)
        
    Returns:
        str: –ü—É—Ç—å –∫ —Å–æ–∑–¥–∞–Ω–Ω–æ–º—É –∞—É–¥–∏–æ-—Ñ–∞–π–ª—É
    """
    # –°–æ–∑–¥–∞–µ–º –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é tmp, –µ—Å–ª–∏ –æ–Ω–∞ –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
    tmp_dir = Path("tmp")
    tmp_dir.mkdir(exist_ok=True)
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º —É–Ω–∏–∫–∞–ª—å–Ω–æ–µ –∏–º—è —Ñ–∞–π–ª–∞
    file_name = f"{meditation_type}_{user_id}_{uuid.uuid4()}.mp3"
    file_path = tmp_dir / file_name
    
    try:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ —Ç–æ–∫–µ–Ω–∞ ElevenLabs
        if not ELEVEN_TOKEN:
            logger.warning(f"ELEVEN_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω. –°–æ–∑–¥–∞–µ–º –¥–µ–º–æ-—Ñ–∞–π–ª –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
            
            # –°–æ–∑–¥–∞–µ–º MP3 —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é Google Text-to-Speech
            try:
                # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –±–∏–±–ª–∏–æ—Ç–µ–∫—É gTTS
                from gtts import gTTS
                
                # –°–æ–∑–¥–∞–µ–º –æ–±—ä–µ–∫—Ç gTTS –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ
                tts = gTTS(text=text, lang='ru', slow=False)
                tts.save(str(file_path))
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª –±—ã–ª —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω
                if os.path.exists(file_path) and os.path.getsize(file_path) > 0:
                    logger.info(f"–°–æ–∑–¥–∞–Ω –¥–µ–º–æ MP3 —Ñ–∞–π–ª —Å –ø–æ–º–æ—â—å—é gTTS: {file_path}")
                    return str(file_path)
                else:
                    logger.error(f"–§–∞–π–ª gTTS —Å–æ–∑–¥–∞–Ω, –Ω–æ –∏–º–µ–µ—Ç –Ω—É–ª–µ–≤–æ–π —Ä–∞–∑–º–µ—Ä: {file_path}")
                    return None
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –¥–µ–º–æ MP3 —Ñ–∞–π–ª–∞ —Å gTTS: {e}")
                return None
        
        # –ï—Å–ª–∏ –µ—Å—Ç—å —Ç–æ–∫–µ–Ω ElevenLabs, –∏—Å–ø–æ–ª—å–∑—É–µ–º API ElevenLabs
        # –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∑–∞–ø—Ä–æ—Å–∞ –∫ API
        headers = {
            "xi-api-key": ELEVEN_TOKEN,
            "Content-Type": "application/json",
        }
        
        data = {
            "text": text,
            "model_id": "eleven_multilingual_v2",
            "voice_settings": {
                "stability": 0.75,
                "similarity_boost": 0.75
            }
        }
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –∫ API
        logger.info(f"–û—Ç–ø—Ä–∞–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞ –∫ ElevenLabs API –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {user_id}")
        
        # –í—ã–ø–æ–ª–Ω—è–µ–º –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π –∑–∞–ø—Ä–æ—Å –∫ API
        async with aiohttp.ClientSession() as session:
            async with session.post(
                f"{ELEVEN_API_URL}/{ELEVEN_VOICE_ID}",
                headers=headers,
                json=data
            ) as response:
                if response.status == 200:
                    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∞—É–¥–∏–æ-—Ñ–∞–π–ª
                    with open(file_path, "wb") as f:
                        f.write(await response.read())
                    logger.info(f"–ê—É–¥–∏–æ —É—Å–ø–µ—à–Ω–æ —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–æ –∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–æ: {file_path}")
                    return str(file_path)
                else:
                    error_text = await response.text()
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {response.status}, {error_text}")
                    # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º None
                    return None
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∞—É–¥–∏–æ: {e}")
        return None

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
async def send_reminder(bot: Bot, user_id: int):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é.
    
    Args:
        bot: –ë–æ—Ç, –∫–æ—Ç–æ—Ä—ã–π –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏–µ
        user_id: ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ Telegram
    """
    try:
        await bot.send_message(
            chat_id=user_id,
            text="üßò <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –æ –ø—Ä–∞–∫—Ç–∏–∫–µ</b>\n\n"
                 "–ü—Ä–∏–≤–µ—Ç! –ù–µ –∑–∞–±—É–¥—å—Ç–µ —É–¥–µ–ª–∏—Ç—å –≤—Ä–µ–º—è —Å–µ–±–µ —Å–µ–≥–æ–¥–Ω—è. "
                 "–ú–µ–¥–∏—Ç–∞—Ü–∏—è –∏–ª–∏ –¥—Ä—É–≥–∞—è –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –ø–æ–º–æ–∂–µ—Ç –≤–∞–º "
                 "—á—É–≤—Å—Ç–≤–æ–≤–∞—Ç—å —Å–µ–±—è –ª—É—á—à–µ –∏ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –º–µ–Ω—Ç–∞–ª—å–Ω–æ–µ –∑–¥–æ—Ä–æ–≤—å–µ.",
            parse_mode="HTML"
        )
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {user_id}: {e}")

# –ò–º–ø–æ—Ä—Ç –º–æ–¥—É–ª–µ–π –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
from services.stt import process_voice_message
from services.recs import generate_response as generate_ai_response

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è
from button_states import SurveyStates, MeditationStates, ReminderStates

# –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã
try:
    from questions import get_demo_questions, get_strength_questions, get_strength_options_labels
    
    # –ò—Å–ø–æ–ª—å–∑—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –∏–∑ —Ñ–∞–π–ª–∞ questions.py
    DEMO_QUESTIONS_FULL = get_demo_questions()
    DEMO_QUESTIONS = [q["text"] for q in DEMO_QUESTIONS_FULL]
    STRENGTH_QUESTIONS = get_strength_questions()
    STRENGTH_OPTIONS_LABELS = get_strength_options_labels()
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
    STRENGTH_CATEGORIES = {
        "analytical": "–ê–Ω–∞–ª–∏—Ç–∏–∫",
        "creative": "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –º—ã—Å–ª–∏—Ç–µ–ª—å",
        "leadership": "–õ–∏–¥–µ—Ä",
        "social": "–ö–æ–º–º—É–Ω–∏–∫–∞—Ç–æ—Ä",
        "organized": "–û—Ä–≥–∞–Ω–∏–∑–∞—Ç–æ—Ä",
        "resilient": "–°—Ç–æ–π–∫–∏–π"
    }
    
    # –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –≤–æ–ø—Ä–æ—Å—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º –¥–ª—è –ø–æ–¥—Å—á–µ—Ç–∞ –±–∞–ª–ª–æ–≤
    CATEGORY_QUESTIONS = {
        "analytical": [],
        "creative": [],
        "leadership": [],
        "social": [],
        "organized": [],
        "resilient": []
    }
    
    # –ó–∞–ø–æ–ª–Ω—è–µ–º –≥—Ä—É–ø–ø—ã –≤–æ–ø—Ä–æ—Å–æ–≤
    for question in STRENGTH_QUESTIONS:
        if "category" in question:
            category = question["category"]
            if category in CATEGORY_QUESTIONS:
                CATEGORY_QUESTIONS[category].append(question["id"])
    
    logger.info("–í–æ–ø—Ä–æ—Å—ã —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω—ã –∏–∑ questions.py")
except ImportError:
    logger.warning("–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –≤–æ–ø—Ä–æ—Å—ã –∏–∑ questions.py, –∏—Å–ø–æ–ª—å–∑—É–µ–º –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã")
    # –î–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–æ—Å–∞, –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å
    DEMO_QUESTIONS = [
        "–ö–∞–∫ –≤–∞—Å –∑–æ–≤—É—Ç?",
        "–°–∫–æ–ª—å–∫–æ –≤–∞–º –ª–µ—Ç?",
        "–ö–∞–∫–æ–π —É –≤–∞—Å —É—Ä–æ–≤–µ–Ω—å –æ–±—Ä–∞–∑–æ–≤–∞–Ω–∏—è?",
        "–ì–¥–µ –≤—ã –∂–∏–≤–µ—Ç–µ?",
        "–ß–µ–º –≤—ã –∑–∞–Ω–∏–º–∞–µ—Ç–µ—Å—å?"
    ]
    STRENGTH_CATEGORIES = {}
    CATEGORY_QUESTIONS = {}

# –°–æ–∑–¥–∞–µ–º —Ä–æ—É—Ç–µ—Ä—ã
main_router = Router(name="main")
profile_router = Router(name="profile")
reflect_router = Router(name="reflect")
meditate_router = Router(name="meditate")
reminder_router = Router(name="reminder")
survey_router = Router(name="survey")

# –ö–æ–Ω—Å—Ç–∞–Ω—Ç—ã –¥–ª—è callback_data
class CallbackActions:
    # –û—Å–Ω–æ–≤–Ω—ã–µ –¥–µ–π—Å—Ç–≤–∏—è
    START = "start"
    HELP = "help"
    PROFILE = "profile"
    QUESTIONNAIRE = "questionnaire"
    RESET = "reset"
    REFLECT = "reflect"
    HELP_REFLECT = "help_reflect"
    MEDITATE = "meditate"
    HELP_MEDITATE = "help_meditate"
    REMINDER_ON = "reminder_on"
    REMINDER_OFF = "reminder_off"
    REMINDER_STATUS = "reminder_status"
    HELP_REMINDER = "help_reminder"
    CANCEL = "cancel"
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏ –º–µ–Ω—é
    MAIN_MENU = "main_menu"
    REFLECT_MENU = "reflect_menu"
    MEDITATE_MENU = "meditate_menu"
    REMINDER_MENU = "reminder_menu"
    PROFILE_MENU = "profile_menu"

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –≥–ª–∞–≤–Ω–æ–≥–æ –º–µ–Ω—é
def get_main_keyboard() -> ReplyKeyboardMarkup:
    builder = ReplyKeyboardBuilder()
    
    # –û—Å–Ω–æ–≤–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏
    builder.button(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")
    builder.button(text="üìù –û–ø—Ä–æ—Å")
    
    # –ö–∞—Ç–µ–≥–æ—Ä–∏–∏
    builder.button(text="üí≠ –°–æ–≤–µ—Ç—ã")
    builder.button(text="üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
    builder.button(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
    
    # –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –æ–ø—Ü–∏–∏
    builder.button(text="üîÑ –†–µ—Å—Ç–∞—Ä—Ç")
    builder.button(text="üÜò –ü–æ–º–æ—â—å")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: 2-2-2-1
    builder.adjust(2, 2, 2, 1)
    
    return builder.as_markup(
        resize_keyboard=True,
        one_time_keyboard=False,
        is_persistent=True,
        input_field_placeholder="–í—ã–±–µ—Ä–∏—Ç–µ –¥–µ–π—Å—Ç–≤–∏–µ..."
    )

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é —Å–æ–≤–µ—Ç–æ–≤
def get_reflect_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="üí≠ –ü–æ–ª—É—á–∏—Ç—å —Å–æ–≤–µ—Ç", 
        callback_data=CallbackActions.REFLECT
    )
    builder.button(
        text="‚ùì –ü–æ–º–æ—â—å –ø–æ —Å–æ–≤–µ—Ç–∞–º", 
        callback_data=CallbackActions.HELP_REFLECT
    )
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
        callback_data=CallbackActions.MAIN_MENU
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1, 1, 1)
    
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –º–µ–¥–∏—Ç–∞—Ü–∏–π
def get_meditate_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –†–∞–∑–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏—Ç–∞—Ü–∏–π
    builder.button(
        text="üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è", 
        callback_data="meditate_relax"
    )
    builder.button(
        text="üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏", 
        callback_data="meditate_focus"
    )
    builder.button(
        text="üò¥ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω–∞", 
        callback_data="meditate_sleep"
    )
    builder.button(
        text="üìñ –°–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è–º", 
        callback_data=CallbackActions.HELP_MEDITATE
    )
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
        callback_data=CallbackActions.MAIN_MENU
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ –¥–ª—è –ª—É—á—à–µ–π —á–∏—Ç–∞–µ–º–æ—Å—Ç–∏
    builder.adjust(1, 1, 1, 1, 1)
    
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
def get_reminder_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    # –í–µ—Ä—Ö–Ω–∏–π —Ä—è–¥ —Å –¥–≤—É–º—è –∫–Ω–æ–ø–∫–∞–º–∏ (–≤–∫–ª—é—á–∏—Ç—å/–æ—Ç–∫–ª—é—á–∏—Ç—å)
    builder.button(
        text="‚è∞ –í–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
        callback_data=CallbackActions.REMINDER_ON
    )
    builder.button(
        text="üîï –û—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è", 
        callback_data=CallbackActions.REMINDER_OFF
    )
    
    # –û—Ç–¥–µ–ª—å–Ω—ã–µ –∫–Ω–æ–ø–∫–∏
    builder.button(
        text="üìÖ –°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π", 
        callback_data=CallbackActions.REMINDER_STATUS
    )
    builder.button(
        text="‚ÑπÔ∏è –°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º", 
        callback_data=CallbackActions.HELP_REMINDER
    )
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
        callback_data=CallbackActions.MAIN_MENU
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: –¥–≤–µ –≤ –ø–µ—Ä–≤–æ–º —Ä—è–¥—É, –ø–æ –æ–¥–Ω–æ–π –≤ –æ—Å—Ç–∞–ª—å–Ω—ã—Ö
    builder.adjust(2, 1, 1, 1)
    
    return builder.as_markup()

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –º–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è
def get_profile_keyboard() -> InlineKeyboardMarkup:
    builder = InlineKeyboardBuilder()
    
    builder.button(
        text="üë§ –ü–æ–∫–∞–∑–∞—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", 
        callback_data=CallbackActions.PROFILE
    )
    builder.button(
        text="üìù –ù–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å", 
        callback_data=CallbackActions.QUESTIONNAIRE
    )
    builder.button(
        text="üóë –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", 
        callback_data=CallbackActions.RESET
    )
    builder.button(
        text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", 
        callback_data=CallbackActions.MAIN_MENU
    )
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
    builder.adjust(1, 1, 1, 1)
    
    return builder.as_markup()

# –¢–µ–∫—Å—Ç—ã –º–µ–¥–∏—Ç–∞—Ü–∏–π –¥–ª—è —Ä–∞–∑–Ω—ã—Ö —Ç–∏–ø–æ–≤
MEDITATION_TEXTS = {
    "relax": "–°—è–¥—å—Ç–µ —É–¥–æ–±–Ω–æ, —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ –ø–ª–µ—á–∏ –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞. –°–¥–µ–ª–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö —á–µ—Ä–µ–∑ –Ω–æ—Å, "
             "–Ω–∞–ø–æ–ª–Ω—è—è –ª–µ–≥–∫–∏–µ –≤–æ–∑–¥—É—Ö–æ–º. –ó–∞–¥–µ—Ä–∂–∏—Ç–µ –¥—ã—Ö–∞–Ω–∏–µ –Ω–∞ —Ç—Ä–∏ —Å–µ–∫—É–Ω–¥—ã. –¢–µ–ø–µ—Ä—å –º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ "
             "—á–µ—Ä–µ–∑ —Ä–æ—Ç, –æ—â—É—â–∞—è, –∫–∞–∫ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –ø–æ–∫–∏–¥–∞–µ—Ç –≤–∞—à–µ —Ç–µ–ª–æ. –°–∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É–π—Ç–µ—Å—å –Ω–∞ —Å–≤–æ–µ–º –¥—ã—Ö–∞–Ω–∏–∏, "
             "–ø–æ–∑–≤–æ–ª—è—è –∫–∞–∂–¥–æ–º—É –≤–¥–æ—Ö—É –∏ –≤—ã–¥–æ—Ö—É —Å—Ç–∞–Ω–æ–≤–∏—Ç—å—Å—è –≤—Å–µ –≥–ª—É–±–∂–µ –∏ —Å–ø–æ–∫–æ–π–Ω–µ–µ. –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ —Å "
             "–∫–∞–∂–¥—ã–º –≤—ã–¥–æ—Ö–æ–º –≤—ã –≤—Å–µ –±–æ–ª—å—à–µ —Ä–∞—Å—Å–ª–∞–±–ª—è–µ—Ç–µ—Å—å. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –Ω–∞—Ö–æ–¥–∏—Ç–µ—Å—å –Ω–∞ "
             "—Å–ø–æ–∫–æ–π–Ω–æ–º –ø–ª—è–∂–µ, —Å–ª—É—à–∞—è —à—É–º –≤–æ–ª–Ω –∏ –æ—â—É—â–∞—è —Ç–µ–ø–ª–æ —Å–æ–ª–Ω—Ü–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –≥–ª—É–±–æ–∫–æ –¥—ã—à–∞—Ç—å –≤ "
             "—ç—Ç–æ–º —É–º–∏—Ä–æ—Ç–≤–æ—Ä–µ–Ω–Ω–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏–∏.",
    
    "focus": "–ü—Ä–∏–º–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ –∏ —Å–¥–µ–ª–∞–π—Ç–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≥–ª—É–±–æ–∫–∏—Ö –≤–¥–æ—Ö–æ–≤. –°–æ—Å—Ä–µ–¥–æ—Ç–æ—á—å—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ "
             "–Ω–∞ —Å–≤–æ–µ–º –¥—ã—Ö–∞–Ω–∏–∏. –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ –≤–æ–∑–¥—É—Ö –≤—Ö–æ–¥–∏—Ç –∏ –≤—ã—Ö–æ–¥–∏—Ç —á–µ—Ä–µ–∑ –≤–∞—à–∏ –Ω–æ–∑–¥—Ä–∏. –û–±—Ä–∞—Ç–∏—Ç–µ "
             "–≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ —Ç–æ, –∫–∞–∫ –ø–æ–¥–Ω–∏–º–∞–µ—Ç—Å—è –∏ –æ–ø—É—Å–∫–∞–µ—Ç—Å—è –≤–∞—à–∞ –≥—Ä—É–¥—å. –ï—Å–ª–∏ –≤ –≤–∞—à —É–º –ø—Ä–∏—Ö–æ–¥—è—Ç –º—ã—Å–ª–∏, "
             "–ø—Ä–æ—Å—Ç–æ –æ—Ç–º–µ—Ç—å—Ç–µ –∏—Ö –∏ –º—è–≥–∫–æ –≤–µ—Ä–Ω–∏—Ç–µ –≤–Ω–∏–º–∞–Ω–∏–µ –∫ –¥—ã—Ö–∞–Ω–∏—é. –°–µ–π—á–∞—Å –º—ã –±—É–¥–µ–º —Å—á–∏—Ç–∞—Ç—å –≤–¥–æ—Ö–∏ –∏ "
             "–≤—ã–¥–æ—Ö–∏. –í–¥–æ—Ö ‚Äì –æ–¥–∏–Ω, –≤—ã–¥–æ—Ö ‚Äì –æ–¥–∏–Ω. –í–¥–æ—Ö ‚Äì –¥–≤–∞, –≤—ã–¥–æ—Ö ‚Äì –¥–≤–∞. –ü—Ä–æ–¥–æ–ª–∂–∞–π—Ç–µ –¥–æ –¥–µ—Å—è—Ç–∏, –∑–∞—Ç–µ–º "
             "–Ω–∞—á–Ω–∏—Ç–µ —Å–Ω–∞—á–∞–ª–∞. –≠—Ç–æ –ø–æ–º–æ–≥–∞–µ—Ç —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å —É–º –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≤–Ω–∏–º–∞–Ω–∏—è.",
    
    "sleep": "–õ—è–≥—Ç–µ —É–¥–æ–±–Ω–æ, —Ä–∞—Å—Å–ª–∞–±—å—Ç–µ –≤—Å–µ –º—ã—à—Ü—ã –∏ –∑–∞–∫—Ä–æ–π—Ç–µ –≥–ª–∞–∑–∞. –°–¥–µ–ª–∞–π—Ç–µ –≥–ª—É–±–æ–∫–∏–π –≤–¥–æ—Ö, –∑–∞—Ç–µ–º "
             "–º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥–æ—Ö–Ω–∏—Ç–µ. –ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ —Å –∫–∞–∂–¥—ã–º –≤—ã–¥–æ—Ö–æ–º –≤—ã –ø–æ–≥—Ä—É–∂–∞–µ—Ç–µ—Å—å –≥–ª—É–±–∂–µ –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–µ "
             "–ø–æ–∫–æ—è. –ù–∞—á–Ω–∏—Ç–µ —Å —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è –º—ã—à—Ü –ª–∏—Ü–∞ ‚Äì –ª–æ–±, –≥–ª–∞–∑–∞, —â–µ–∫–∏, —á–µ–ª—é—Å—Ç—å. –ó–∞—Ç–µ–º –ø–µ—Ä–µ—Ö–æ–¥–∏—Ç–µ –∫ "
             "—à–µ–µ –∏ –ø–ª–µ—á–∞–º, —Ä—É–∫–∞–º, –≥—Ä—É–¥–∏, –∂–∏–≤–æ—Ç—É, –Ω–æ–≥–∞–º. –ü–æ—á—É–≤—Å—Ç–≤—É–π—Ç–µ, –∫–∞–∫ —Ç—è–∂–µ–ª–µ—é—Ç –≤–∞—à–∏ –∫–æ–Ω–µ—á–Ω–æ—Å—Ç–∏. "
             "–ü—Ä–µ–¥—Å—Ç–∞–≤—å—Ç–µ, —á—Ç–æ –≤—ã –ª–µ–∂–∏—Ç–µ –Ω–∞ –º—è–≥–∫–æ–º –æ–±–ª–∞–∫–µ, –∫–æ—Ç–æ—Ä–æ–µ –Ω–µ–∂–Ω–æ –∫–∞—á–∞–µ—Ç –≤–∞—Å, —É–Ω–æ—Å—è –≤—Å–µ –¥–∞–ª—å—à–µ –≤ "
             "—Å—Ç—Ä–∞–Ω—É —Å–Ω–æ–≤. –í–∞—à–µ –¥—ã—Ö–∞–Ω–∏–µ —Å—Ç–∞–Ω–æ–≤–∏—Ç—Å—è –≤—Å–µ –º–µ–¥–ª–µ–Ω–Ω–µ–µ –∏ –≥–ª—É–±–∂–µ. –ü–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –ø–ª–∞–≤–Ω–æ "
             "–ø–æ–≥—Ä—É–∑–∏—Ç—å—Å—è –≤ —Å–ø–æ–∫–æ–π–Ω—ã–π, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–∏–π —Å–æ–Ω."
}

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∫–æ–º–∞–Ω–¥

@main_router.message(CommandStart())
@main_router.message(F.text == "üîÑ –†–µ—Å—Ç–∞—Ä—Ç")
async def command_start(message: Message):
    await message.answer(
        "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –±–æ—Ç-–ø—Å–∏—Ö–æ–ª–æ–≥ –û–Ω–∞.\n\n"
        "–Ø –ø–æ–º–æ–≥—É –≤–∞–º —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –∏ –¥–∞–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏. "
        "–í–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–Ω–æ–ø–∫–∞–º–∏ –Ω–∏–∂–µ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å–æ –º–Ω–æ–π:",
        reply_markup=get_main_keyboard()
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –±–æ—Ç–∞")

@main_router.message(Command("help"))
@main_router.message(F.text == "üÜò –ü–æ–º–æ—â—å")
async def command_help(message: Message):
    help_text = (
        "üÜò <b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:</b>\n\n"
        "üë§ <b>–ü—Ä–æ—Ñ–∏–ª—å</b> - –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è –∏–ª–∏ –Ω–∞—á–∞–ª–æ –æ–ø—Ä–æ—Å–∞\n"
        "üìù <b>–û–ø—Ä–æ—Å</b> - –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏–µ –æ–ø—Ä–æ—Å–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –ø—Ä–æ—Ñ–∏–ª—è\n"
        "üí≠ <b>–°–æ–≤–µ—Ç—ã</b> - –ø–æ–ª—É—á–µ–Ω–∏–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏—Ö —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–π\n"
        "üßò <b>–ú–µ–¥–∏—Ç–∞—Ü–∏–∏</b> - –ø–æ–ª—É—á–µ–Ω–∏–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö –º–µ–¥–∏—Ç–∞—Ü–∏–π\n"
        "‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è</b> - —É–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏\n"
        "üîÑ <b>–†–µ—Å—Ç–∞—Ä—Ç</b> - –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫ –±–æ—Ç–∞\n"
        "‚ùå <b>–û—Ç–º–µ–Ω–∞</b> - –æ—Ç–º–µ–Ω–∞ —Ç–µ–∫—É—â–µ–≥–æ –æ–ø—Ä–æ—Å–∞\n\n"
        "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è —Å –±–æ—Ç–æ–º."
    )
    await message.answer(help_text, parse_mode="HTML")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø–æ–º–æ—â—å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∫–Ω–æ–ø–æ–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –º–µ–Ω—é
@main_router.message(F.text == "üë§ –ü—Ä–æ—Ñ–∏–ª—å")
async def profile_menu(message: Message):
    await message.answer(
        "üë§ <b>–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º:",
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML"
    )

@main_router.message(F.text == "üìù –û–ø—Ä–æ—Å")
async def questionnaire_start(message: Message, state: FSMContext):
    # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –Ω–∞ start_survey
    await start_survey(message, state)

@main_router.message(F.text == "üí≠ –°–æ–≤–µ—Ç—ã")
async def reflect_menu(message: Message):
    await message.answer(
        "üí≠ <b>–ú–µ–Ω—é —Å–æ–≤–µ—Ç–æ–≤</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ –ø–æ–ª—É—á–∏—Ç—å –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏:",
        reply_markup=get_reflect_keyboard(),
        parse_mode="HTML"
    )

@main_router.message(F.text == "üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏")
async def meditate_menu(message: Message):
    await message.answer(
        "üßò <b>–ê–£–î–ò–û-–ú–ï–î–ò–¢–ê–¶–ò–ò –î–õ–Ø –†–ï–õ–ê–ö–°–ê–¶–ò–ò</b>\n\n"
        "–í—ã–±–µ—Ä–∏—Ç–µ —Ç–∏–ø –º–µ–¥–∏—Ç–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–π —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –≤–∞—à–∏–º —Ç–µ–∫—É—â–∏–º –ø–æ—Ç—Ä–µ–±–Ω–æ—Å—Ç—è–º:\n\n"
        "‚Ä¢ <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è</b> - —Å–Ω–∏–º–∞–µ—Ç —Å—Ç—Ä–µ—Å—Å –∏ –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ\n"
        "‚Ä¢ <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏</b> - —É–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –∏ —è—Å–Ω–æ—Å—Ç—å —É–º–∞\n"
        "‚Ä¢ <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω–∞</b> - –ø–æ–º–æ–≥–∞–µ—Ç –∑–∞—Å–Ω—É—Ç—å –∏ —É–ª—É—á—à–∞–µ—Ç –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞\n\n"
        "–í—Å–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –¥–æ—Å—Ç–∞–≤–ª—è—é—Ç—Å—è –≤ –≤–∏–¥–µ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ —ç—Ñ—Ñ–µ–∫—Ç–∞.",
        reply_markup=get_meditate_keyboard(),
        parse_mode="HTML"
    )

@main_router.message(F.text == "‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")
async def reminder_menu(message: Message):
    await message.answer(
        "‚è∞ <b>–ú–µ–Ω—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏ –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö:",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫
@main_router.callback_query(F.data == CallbackActions.MAIN_MENU)
async def back_to_main_menu(callback: CallbackQuery):
    await callback.message.answer(
        "–ì–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –¥–ª—è –Ω–∞–≤–∏–≥–∞—Ü–∏–∏:",
        reply_markup=get_main_keyboard()
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –≤–µ—Ä–Ω—É–ª—Å—è –≤ –≥–ª–∞–≤–Ω–æ–µ –º–µ–Ω—é")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –ø—Ä–æ—Ñ–∏–ª—è
@profile_router.callback_query(F.data == CallbackActions.PROFILE)
async def show_profile(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç—ã —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if not user_data or "answers" not in user_data:
        await callback.message.edit_text(
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            "–ü—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=get_profile_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    answers = user_data.get("answers", {})
    
    if not answers:
        await callback.message.edit_text(
            "üë§ <b>–í–∞—à –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
            "–ü—Ä–æ—Ñ–∏–ª—å –µ—â–µ –Ω–µ —Å–æ–∑–¥–∞–Ω. –ü—Ä–æ–π–¥–∏—Ç–µ –æ–ø—Ä–æ—Å, —á—Ç–æ–±—ã —Å–æ–∑–¥–∞—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å.",
            reply_markup=get_profile_keyboard(),
            parse_mode="HTML"
        )
        await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω")
        return
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º –æ—Å–Ω–æ–≤–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø—Ä–æ—Ñ–∏–ª—è
    profile_text = "üë§ <b>–í–∞—à –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ñ–∏–ª—å:</b>\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –∏–∑ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å–æ–≤
    profile_text += "üìã <b>–û—Å–Ω–æ–≤–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è:</b>\n"
    
    # –û—Ç–ª–∞–¥–æ—á–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –æ—Ç–≤–µ—Ç–æ–≤
    logger.info(f"–°—Ç—Ä—É–∫—Ç—É—Ä–∞ –æ—Ç–≤–µ—Ç–æ–≤: {answers}")
    
    # –ü–æ–ª—É—á–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã
    demo_answers = {}
    for key, value in answers.items():
        if key.startswith("demo_"):
            question_index = int(key.split("_")[1]) - 1
            if question_index < len(DEMO_QUESTIONS):
                demo_answers[question_index] = value
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–∞–ª–∏—á–∏–∏/–æ—Ç—Å—É—Ç—Å—Ç–≤–∏–∏ –æ—Ç–≤–µ—Ç–æ–≤
    if not demo_answers:
        profile_text += "‚ùå –ë–∞–∑–æ–≤–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–∞\n\n"
    else:
        # –°–æ–∑–¥–∞–µ–º —Å–ª–æ–≤–∞—Ä—å –¥–ª—è –∫—Ä–∞—Å–∏–≤—ã—Ö –Ω–∞–∏–º–µ–Ω–æ–≤–∞–Ω–∏–π –ø–æ–ª–µ–π
        field_icons = {
            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?": "üë§ <b>–ò–º—è:</b> ",
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?": "üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ",
            "–ö–∞–∫–∞—è —É —Ç–µ–±—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è?": "üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ",
            "–ö–∞–∫–∞—è —É —Ç–µ–±—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è? (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)": "üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ",
            "–ì–¥–µ —Ç—ã —Ä–æ–¥–∏–ª—Å—è/—Ä–æ–¥–∏–ª–∞—Å—å?": "üåç <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ",
            "–ì–¥–µ —Ç—ã —Ä–æ–¥–∏–ª—Å—è/—Ä–æ–¥–∏–ª–∞—Å—å? (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞)": "üåç <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ",
            "–í –∫–∞–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?": "üïí <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> ",
            "–í –∫–∞–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è? (–Ω–∞–ø—Ä–∏–º–µ—Ä, UTC+3 –¥–ª—è –ú–æ—Å–∫–≤—ã)": "üïí <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> "
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        for i in sorted(demo_answers.keys()):
            if i < len(DEMO_QUESTIONS):
                question = DEMO_QUESTIONS[i]
                answer = demo_answers[i]
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –≤–æ–ø—Ä–æ—Å –≤ —Å–ª–æ–≤–∞—Ä–µ –∏–∫–æ–Ω–æ–∫
                if question in field_icons:
                    profile_text += f"{field_icons[question]}{answer}\n"
                else:
                    # –î–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    profile_text += f"‚Ä¢ <b>{question}</b> {answer}\n"
        
        profile_text += "\n"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö
    strength_answers = {}
    for key, value in answers.items():
        if key.startswith("strength_") and value.isdigit():
            strength_answers[key] = value
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö, –¥–æ–±–∞–≤–ª—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö
    if strength_answers:
        profile_text += "üß† <b>–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨</b>\n"
        profile_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        profile_text += "‚úÖ –û–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –∑–∞–≤–µ—Ä—à–µ–Ω\n"
        profile_text += "üìä –ü—Ä–æ–∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–æ –æ—Ç–≤–µ—Ç–æ–≤: <b>34</b>\n\n"
        
        # –ü–æ–ª—É—á–∞–µ–º —Ç–æ–ø-3 —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        scores = {}
        for category in CATEGORY_QUESTIONS:
            scores[category] = {"total": 0, "count": 0}
        
        for question_id, answer_value in strength_answers.items():
            for category, questions in CATEGORY_QUESTIONS.items():
                if question_id in questions:
                    scores[category]["total"] += int(answer_value)
                    scores[category]["count"] += 1
        
        final_scores = {}
        for category, data in scores.items():
            if data["count"] > 0:
                final_scores[category] = round(data["total"] / data["count"], 2)
            else:
                final_scores[category] = 0
        
        top_strengths = sorted(final_scores.items(), key=lambda x: x[1], reverse=True)[:3]
        
        if top_strengths:
            profile_text += "üí™ <b>–í–ê–®–ò –ö–õ–Æ–ß–ï–í–´–ï –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´:</b>\n"
            for i, (category, score) in enumerate(top_strengths, 1):
                category_name = STRENGTH_CATEGORIES.get(category, category)
                # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
                stars = "‚òÖ" * round(score) + "‚òÜ" * (5 - round(score))
                profile_text += f"{i}. <b>{category_name}</b> ({score}/5) {stars}\n"
            profile_text += "\n"
            profile_text += "üìã –î–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –ø–æ–ª–Ω—ã—Ö —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞ –Ω–∞–∂–º–∏—Ç–µ –∫–Ω–æ–ø–∫—É <b>¬´–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞¬ª</b> –Ω–∏–∂–µ\n\n"
        
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–π –∫–Ω–æ–ø–∫–æ–π –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤ —Ç–µ—Å—Ç–∞
        builder = InlineKeyboardBuilder()
        builder.button(text="üìä –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞", callback_data="show_test_results")
        builder.button(text="üìù –ü—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ", callback_data=CallbackActions.QUESTIONNAIRE)
        builder.button(text="üóë –°–±—Ä–æ—Å–∏—Ç—å –ø—Ä–æ—Ñ–∏–ª—å", callback_data=CallbackActions.RESET)
        builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=CallbackActions.MAIN_MENU)
        
        # –§–æ—Ä–º–∏—Ä—É–µ–º —Å–µ—Ç–∫—É –∫–Ω–æ–ø–æ–∫: –ø–æ –æ–¥–Ω–æ–π –∫–Ω–æ–ø–∫–µ –≤ —Å—Ç—Ä–æ–∫–µ
        builder.adjust(1, 1, 1, 1)
        
        await callback.message.edit_text(
            profile_text,
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
    else:
        profile_text += "üß† <b>–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ü–†–û–§–ò–õ–¨</b>\n"
        profile_text += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n"
        profile_text += "‚ùå <b>–û–ø—Ä–æ—Å –Ω–∞ –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω –Ω–µ –ø—Ä–æ–π–¥–µ–Ω</b>\n\n"
        profile_text += "üìù –ß—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å —Å–≤–æ–∏ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã, –ø—Ä–æ–π–¥–∏—Ç–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Ç–µ—Å—Ç\n"
        profile_text += "üîç –¢–µ—Å—Ç –ø–æ–º–æ–∂–µ—Ç –≤—ã—è–≤–∏—Ç—å –≤–∞—à–∏ –ø—Ä–∏—Ä–æ–¥–Ω—ã–µ —Ç–∞–ª–∞–Ω—Ç—ã –∏ —Å–∫–ª–æ–Ω–Ω–æ—Å—Ç–∏\n"
        profile_text += "‚è± –í—Ä–µ–º—è –ø—Ä–æ—Ö–æ–∂–¥–µ–Ω–∏—è: –æ–∫–æ–ª–æ 5-7 –º–∏–Ω—É—Ç\n\n"
        
        await callback.message.edit_text(
            profile_text,
            reply_markup=get_profile_keyboard(),
            parse_mode="HTML"
        )
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª –ø—Ä–æ—Å–º–æ—Ç—Ä –ø—Ä–æ—Ñ–∏–ª—è")

@profile_router.callback_query(F.data == CallbackActions.QUESTIONNAIRE)
async def start_questionnaire_callback(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    has_profile = user_data.get("answers", {}) and any(key.startswith("demo_") for key in user_data.get("answers", {}))
    
    # –ï—Å–ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –µ—Å—Ç—å –ø—Ä–æ—Ñ–∏–ª—å, —Å–ø—Ä–∞—à–∏–≤–∞–µ–º –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ
    if has_profile:
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="confirm_survey")
        builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=CallbackActions.PROFILE_MENU)
        builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        
        await callback.message.edit_text(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ, "
            "–≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        await callback.answer()
        return
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å —Å—Ä–∞–∑—É
    # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback
    await callback.answer("–ó–∞–ø—É—Å–∫–∞–µ–º –æ–ø—Ä–æ—Å...")
    
    # –£–¥–∞–ª—è–µ–º –∏–Ω–ª–∞–π–Ω –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É
    await callback.message.delete()
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –Ω–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await callback.message.answer(
        "üìã <b>–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å!</b>\n\n"
        "–Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è. "
        "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º –º—ã –ø–µ—Ä–µ–π–¥–µ–º –∫ "
        "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await callback.message.answer(
        f"–í–æ–ø—Ä–æ—Å 1: {DEMO_QUESTIONS[0]}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")]],
            resize_keyboard=True,
            one_time_keyboard=False,
            is_persistent=True,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
        )
    )
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ä–æ—Å
    await state.set_state(SurveyStates.answering_questions)
    await state.update_data(
        question_index=0,
        answers={},
        is_strength_questions=False
    )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—É—Å—Ç–∏–ª –æ–ø—Ä–æ—Å —á–µ—Ä–µ–∑ –∫–Ω–æ–ø–∫—É –≤ –ø—Ä–æ—Ñ–∏–ª–µ")

@profile_router.callback_query(F.data == CallbackActions.RESET)
async def reset_profile(callback: CallbackQuery):
    builder = InlineKeyboardBuilder()
    builder.button(text="‚úÖ –î–∞, —Å–±—Ä–æ—Å–∏—Ç—å", callback_data="confirm_reset")
    builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=CallbackActions.PROFILE_MENU)
    builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
    
    await callback.message.edit_text(
        "üóë <b>–°–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è:</b>\n\n"
        "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ —Å–±—Ä–æ—Å–∏—Ç—å –≤–∞—à –ø—Ä–æ—Ñ–∏–ª—å? –í—Å–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç —É–¥–∞–ª–µ–Ω—ã.",
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è")

@profile_router.callback_query(F.data == "confirm_reset")
async def confirm_reset_profile(callback: CallbackQuery, state: FSMContext):
    # –°–±—Ä–∞—Å—ã–≤–∞–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await state.clear()
    
    await callback.message.edit_text(
        "‚úÖ –í–∞—à –ø—Ä–æ—Ñ–∏–ª—å —É—Å–ø–µ—à–Ω–æ —Å–±—Ä–æ—à–µ–Ω. –í—ã –º–æ–∂–µ—Ç–µ –ø—Ä–æ–π—Ç–∏ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ.",
        reply_markup=get_profile_keyboard()
    )
    await callback.answer("–ü—Ä–æ—Ñ–∏–ª—å —Å–±—Ä–æ—à–µ–Ω!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª —Å–±—Ä–æ—Å –ø—Ä–æ—Ñ–∏–ª—è")

@profile_router.callback_query(F.data == CallbackActions.PROFILE_MENU)
async def back_to_profile_menu(callback: CallbackQuery):
    await callback.message.edit_text(
        "üë§ <b>–ú–µ–Ω—é –ø—Ä–æ—Ñ–∏–ª—è</b>\n\n"
        "–ó–¥–µ—Å—å –≤—ã –º–æ–∂–µ—Ç–µ —É–ø—Ä–∞–≤–ª—è—Ç—å —Å–≤–æ–∏–º –ø—Ä–æ—Ñ–∏–ª–µ–º:",
        reply_markup=get_profile_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ —Å–æ–≤–µ—Ç–æ–≤
@reflect_router.callback_query(F.data == CallbackActions.REFLECT)
async def get_reflect(callback: CallbackQuery):
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –≥–µ–Ω–µ—Ä–∏—Ä—É–µ–º —Å–æ–≤–µ—Ç
    await callback.answer("–ì–µ–Ω–µ—Ä–∏—Ä—É—é –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç...")
    
    try:
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –ø–µ—Ä—Å–æ–Ω–∞–ª—å–Ω—ã–π —Å–æ–≤–µ—Ç —Å –ø–æ–º–æ—â—å—é OpenAI
        advice = await generate_ai_response(
            text="–î–∞–π –º–Ω–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –Ω–∞ —Å–µ–≥–æ–¥–Ω—è",
            user_id=callback.from_user.id
        )
        
        await callback.message.edit_text(
            f"üí≠ <b>–í–∞—à —Å–æ–≤–µ—Ç:</b>\n\n{advice}",
            reply_markup=get_reflect_keyboard(),
            parse_mode="HTML"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ª—É—á–∏–ª –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç")
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ —Å–æ–≤–µ—Ç–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        await callback.message.edit_text(
            "üí≠ <b>–í–∞—à —Å–æ–≤–µ—Ç:</b>\n\n"
            "–ü–æ–º–Ω–∏—Ç–µ, —á—Ç–æ –∑–∞–±–æ—Ç–∞ –æ —Å–µ–±–µ - —ç—Ç–æ –Ω–µ —ç–≥–æ–∏–∑–º, –∞ –Ω–µ–æ–±—Ö–æ–¥–∏–º–æ—Å—Ç—å. "
            "–í—ã–¥–µ–ª–∏—Ç–µ —Å–µ–≥–æ–¥–Ω—è 15 –º–∏–Ω—É—Ç –Ω–∞ —Ç–æ, —á—Ç–æ –ø—Ä–∏–Ω–æ—Å–∏—Ç –≤–∞–º —Ä–∞–¥–æ—Å—Ç—å.",
            reply_markup=get_reflect_keyboard(),
            parse_mode="HTML"
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ª—É—á–∏–ª —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π —Å–æ–≤–µ—Ç –∏–∑-–∑–∞ –æ—à–∏–±–∫–∏")

@reflect_router.callback_query(F.data == CallbackActions.HELP_REFLECT)
async def help_reflect(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ùì <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ —Å–æ–≤–µ—Ç–∞–º:</b>\n\n"
        "–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–æ–≤–µ—Ç—ã - —ç—Ç–æ —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏, –∫–æ—Ç–æ—Ä—ã–µ –ø–æ–º–æ–≥—É—Ç –≤–∞–º —Å–ø—Ä–∞–≤–∏—Ç—å—Å—è "
        "—Å –ø–æ–≤—Å–µ–¥–Ω–µ–≤–Ω—ã–º–∏ —Ç—Ä—É–¥–Ω–æ—Å—Ç—è–º–∏ –∏ —É–ª—É—á—à–∏—Ç—å –≤–∞—à–µ –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ.\n\n"
        "–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ —Ñ–æ—Ä–º–∏—Ä—É—é—Ç—Å—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–∞—à–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è –∏ –∫–æ–Ω—Ç–µ–∫—Å—Ç–∞ –±–µ—Å–µ–¥—ã.",
        reply_markup=get_reflect_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É –ø–æ —Å–æ–≤–µ—Ç–∞–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –º–µ–¥–∏—Ç–∞—Ü–∏–π
@meditate_router.callback_query(F.data == "meditate_relax")
async def get_relax_meditation(callback: CallbackQuery):
    await callback.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    await callback.message.edit_text(
        "üßò <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è:</b>\n\n"
        "–°–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é. –ù–∞–π–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ, "
        "–≥–¥–µ –≤–∞—Å –Ω–µ –±—É–¥—É—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.",
        reply_markup=get_meditate_keyboard(),
        parse_mode="HTML"
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∏—Ç—Å—è
        preparing_message = await callback.message.answer(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ –º–µ–¥–∏—Ç–∞—Ü–∏—é...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ElevenLabs API
        audio_path = await generate_audio(
            text=MEDITATION_TEXTS["relax"],
            user_id=callback.from_user.id,
            meditation_type="relax"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
        await preparing_message.delete()
        
        if audio_path:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(audio_path):
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer_voice(
                        FSInputFile(audio_path),
                        caption="üßò –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è. –ù–∞–π–¥–∏—Ç–µ —Å–ø–æ–∫–æ–π–Ω–æ–µ –º–µ—Å—Ç–æ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
                    )
                    logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
                    await callback.message.answer(
                        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['relax']}",
                        parse_mode="HTML"
                    )
            else:
                logger.error(f"–§–∞–π–ª {audio_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                await callback.message.answer(
                    f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ-—Ñ–∞–π–ª. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['relax']}",
                    parse_mode="HTML"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {audio_path} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
            await callback.message.answer(
                f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['relax']}",
                parse_mode="HTML"
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ª—É—á–∏–ª –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@meditate_router.callback_query(F.data == "meditate_focus")
async def get_focus_meditation(callback: CallbackQuery):
    await callback.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    await callback.message.edit_text(
        "üß† <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏:</b>\n\n"
        "–°–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é. –ù–∞–π–¥–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –º–µ—Å—Ç–æ, "
        "–≥–¥–µ –≤–∞—Å –Ω–µ –±—É–¥—É—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å –≤ —Ç–µ—á–µ–Ω–∏–µ 5-10 –º–∏–Ω—É—Ç.",
        reply_markup=get_meditate_keyboard(),
        parse_mode="HTML"
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∏—Ç—Å—è
        preparing_message = await callback.message.answer(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ –º–µ–¥–∏—Ç–∞—Ü–∏—é...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ElevenLabs API
        audio_path = await generate_audio(
            text=MEDITATION_TEXTS["focus"],
            user_id=callback.from_user.id,
            meditation_type="focus"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
        await preparing_message.delete()
        
        if audio_path:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(audio_path):
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer_voice(
                        FSInputFile(audio_path),
                        caption="üß† –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏. –°—è–¥—å—Ç–µ –≤ —É–¥–æ–±–Ω–æ–π –ø–æ–∑–µ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
                    )
                    logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
                    await callback.message.answer(
                        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['focus']}",
                        parse_mode="HTML"
                    )
            else:
                logger.error(f"–§–∞–π–ª {audio_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                await callback.message.answer(
                    f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ-—Ñ–∞–π–ª. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['focus']}",
                    parse_mode="HTML"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {audio_path} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
            await callback.message.answer(
                f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['focus']}",
                parse_mode="HTML"
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ª—É—á–∏–ª –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@meditate_router.callback_query(F.data == "meditate_sleep")
async def get_sleep_meditation(callback: CallbackQuery):
    await callback.answer("–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —Å–Ω–∞...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    await callback.message.edit_text(
        "üò¥ <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω–∞:</b>\n\n"
        "–°–µ–π—á–∞—Å –≤—ã –ø–æ–ª—É—á–∏—Ç–µ –≥–æ–ª–æ—Å–æ–≤—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —Å–ª—É—à–∞—Ç—å "
        "–µ–µ –ª–µ–∂–∞ –≤ –∫—Ä–æ–≤–∞—Ç–∏ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.",
        reply_markup=get_meditate_keyboard(),
        parse_mode="HTML"
    )
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ —Ç–æ–º, —á—Ç–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è –≥–æ—Ç–æ–≤–∏—Ç—Å—è
        preparing_message = await callback.message.answer(
            "‚è≥ –ì–µ–Ω–µ—Ä–∏—Ä—É—é –∞—É–¥–∏–æ –º–µ–¥–∏—Ç–∞—Ü–∏—é...\n"
            "–≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥."
        )
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∞—É–¥–∏–æ —Å –ø–æ–º–æ—â—å—é ElevenLabs API
        audio_path = await generate_audio(
            text=MEDITATION_TEXTS["sleep"],
            user_id=callback.from_user.id,
            meditation_type="sleep"
        )
        
        # –£–¥–∞–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ
        await preparing_message.delete()
        
        if audio_path:
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —Ñ–∞–π–ª —Å—É—â–µ—Å—Ç–≤—É–µ—Ç
            if os.path.exists(audio_path):
                try:
                    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                    await callback.message.answer_voice(
                        FSInputFile(audio_path),
                        caption="üò¥ –ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω–∞. –õ—è–≥—Ç–µ —É–¥–æ–±–Ω–æ –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
                    )
                    logger.info(f"–ì–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {callback.from_user.id}")
                except Exception as e:
                    logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
                    # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
                    await callback.message.answer(
                        f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Ç–ø—Ä–∞–≤–∏—Ç—å –∞—É–¥–∏–æ. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['sleep']}",
                        parse_mode="HTML"
                    )
            else:
                logger.error(f"–§–∞–π–ª {audio_path} –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç")
                await callback.message.answer(
                    f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—É–¥–∏–æ-—Ñ–∞–π–ª. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['sleep']}",
                    parse_mode="HTML"
                )
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            try:
                if os.path.exists(audio_path):
                    os.remove(audio_path)
                    logger.info(f"–í—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª {audio_path} —É–¥–∞–ª–µ–Ω")
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ –≤—Ä–µ–º–µ–Ω–Ω–æ–≥–æ —Ñ–∞–π–ª–∞: {e}")
        else:
            # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
            await callback.message.answer(
                f"<b>–ù–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –∞—É–¥–∏–æ. –í–æ—Ç —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏:</b>\n\n{MEDITATION_TEXTS['sleep']}",
                parse_mode="HTML"
            )
        
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø–æ–ª—É—á–∏–ª –º–µ–¥–∏—Ç–∞—Ü–∏—é –¥–ª—è —Å–Ω–∞")
        
    except Exception as e:
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏: {e}")
        await callback.message.answer(
            "‚ùå –ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–≥–æ—Ç–æ–≤–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@meditate_router.callback_query(F.data == CallbackActions.HELP_MEDITATE)
async def help_meditate(callback: CallbackQuery):
    await callback.message.edit_text(
        "üìñ <b>–°–ü–†–ê–í–ö–ê –ü–û –ú–ï–î–ò–¢–ê–¶–ò–Ø–ú</b>\n\n"
        "–ì–æ–ª–æ—Å–æ–≤—ã–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏ –ø–æ–º–æ–≥–∞—é—Ç —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è, —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å –∏ —É–ª—É—á—à–∏—Ç—å –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é. "
        "–û–Ω–∏ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª—è—é—Ç —Å–æ–±–æ–π –∞—É–¥–∏–æ–∑–∞–ø–∏—Å–∏ —Å –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º–∏ –¥–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è "
        "—Ä–µ–ª–∞–∫—Å–∞—Ü–∏–æ–Ω–Ω—ã—Ö —É–ø—Ä–∞–∂–Ω–µ–Ω–∏–π.\n\n"
        "<b>–î–æ—Å—Ç—É–ø–Ω—ã–µ —Ç–∏–ø—ã –º–µ–¥–∏—Ç–∞—Ü–∏–π:</b>\n\n"
        "üßò <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è</b>\n"
        "–ü–æ–º–æ–≥–∞–µ—Ç —Å–Ω—è—Ç—å —Å—Ç—Ä–µ—Å—Å, –Ω–∞–ø—Ä—è–∂–µ–Ω–∏–µ –∏ —Ç—Ä–µ–≤–æ–≥—É. –≠—Ç–∞ –º–µ–¥–∏—Ç–∞—Ü–∏—è –∏–¥–µ–∞–ª—å–Ω–æ –ø–æ–¥—Ö–æ–¥–∏—Ç –¥–ª—è –ø–µ—Ä–∏–æ–¥–æ–≤ –ø–æ–≤—ã—à–µ–Ω–Ω–æ–≥–æ —Å—Ç—Ä–µ—Å—Å–∞ –∏–ª–∏ "
        "–≤ –∫–æ–Ω—Ü–µ –Ω–∞–ø—Ä—è–∂–µ–Ω–Ω–æ–≥–æ –¥–Ω—è. –û–Ω–∞ –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∞ –Ω–∞ –≥–ª—É–±–æ–∫–æ–µ —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏–µ —Ç–µ–ª–∞ –∏ —É—Å–ø–æ–∫–æ–µ–Ω–∏–µ —É–º–∞ —á–µ—Ä–µ–∑ "
        "–æ—Å–æ–∑–Ω–∞–Ω–Ω–æ–µ –¥—ã—Ö–∞–Ω–∏–µ –∏ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏—é.\n\n"
        "üß† <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ñ–æ–∫—É—Å–∏—Ä–æ–≤–∫–∏</b>\n"
        "–£–ª—É—á—à–∞–µ—Ç –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏—é –≤–Ω–∏–º–∞–Ω–∏—è –∏ —è—Å–Ω–æ—Å—Ç—å —É–º–∞. –†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø–µ—Ä–µ–¥ –≤–∞–∂–Ω—ã–º–∏ –∑–∞–¥–∞—á–∞–º–∏, "
        "—Ç—Ä–µ–±—É—é—â–∏–º–∏ –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏, –∏–ª–∏ –≤ –ø–µ—Ä–∏–æ–¥—ã, –∫–æ–≥–¥–∞ –≤–∞–º —Å–ª–æ–∂–Ω–æ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è. –ü–æ–º–æ–≥–∞–µ—Ç —É—Å—Ç—Ä–∞–Ω–∏—Ç—å "
        "–º–µ–Ω—Ç–∞–ª—å–Ω—ã–π —à—É–º –∏ –Ω–∞–ø—Ä–∞–≤–∏—Ç—å –≤–Ω–∏–º–∞–Ω–∏–µ –Ω–∞ –∫–æ–Ω–∫—Ä–µ—Ç–Ω—É—é –∑–∞–¥–∞—á—É.\n\n"
        "üò¥ <b>–ú–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω–∞</b>\n"
        "–ü–æ–º–æ–≥–∞–µ—Ç –±—ã—Å—Ç—Ä–µ–µ –∑–∞—Å–Ω—É—Ç—å –∏ —É–ª—É—á—à–∏—Ç—å –∫–∞—á–µ—Å—Ç–≤–æ —Å–Ω–∞. –≠—Ç–∞ –º–µ–¥–∏—Ç–∞—Ü–∏—è –∏—Å–ø–æ–ª—å–∑—É–µ—Ç —Ç–µ—Ö–Ω–∏–∫–∏ –ø—Ä–æ–≥—Ä–µ—Å—Å–∏–≤–Ω–æ–π "
        "—Ä–µ–ª–∞–∫—Å–∞—Ü–∏–∏ –∏ —É—Å–ø–æ–∫–∞–∏–≤–∞—é—â–∏–µ –≤–∏–∑—É–∞–ª–∏–∑–∞—Ü–∏–∏ –¥–ª—è –ø–æ–¥–≥–æ—Ç–æ–≤–∫–∏ —Ç–µ–ª–∞ –∏ —É–º–∞ –∫ –≥–ª—É–±–æ–∫–æ–º—É, –≤–æ—Å—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞—é—â–µ–º—É —Å–Ω—É. "
        "–†–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è –≤—ã–ø–æ–ª–Ω—è—Ç—å –ª–µ–∂–∞ –≤ –ø–æ—Å—Ç–µ–ª–∏ –Ω–µ–ø–æ—Å—Ä–µ–¥—Å—Ç–≤–µ–Ω–Ω–æ –ø–µ—Ä–µ–¥ —Å–Ω–æ–º.\n\n"
        "<b>–†–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –ø–æ –ø—Ä–∞–∫—Ç–∏–∫–µ:</b>\n"
        "‚Ä¢ –ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤–∞—Å –Ω–µ –±—É–¥—É—Ç –±–µ—Å–ø–æ–∫–æ–∏—Ç—å\n"
        "‚Ä¢ –ü—Ä–∏–º–∏—Ç–µ —É–¥–æ–±–Ω–æ–µ –ø–æ–ª–æ–∂–µ–Ω–∏–µ (—Å–∏–¥—è –∏–ª–∏ –ª–µ–∂–∞)\n"
        "‚Ä¢ –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –Ω–∞—É—à–Ω–∏–∫–∏ –¥–ª—è –ª—É—á—à–µ–≥–æ –≤–æ—Å–ø—Ä–∏—è—Ç–∏—è\n"
        "‚Ä¢ –°–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º –≤ –∞—É–¥–∏–æ, –Ω–µ —Ç–æ—Ä–æ–ø—è—Å—å\n"
        "‚Ä¢ –†–µ–≥—É–ª—è—Ä–Ω–∞—è –ø—Ä–∞–∫—Ç–∏–∫–∞ –¥–∞–µ—Ç –Ω–∞–∏–ª—É—á—à–∏–µ —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã",
        reply_markup=get_meditate_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É –ø–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –∏–Ω–ª–∞–π–Ω-–∫–Ω–æ–ø–æ–∫ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
@reminder_router.callback_query(F.data == CallbackActions.REMINDER_ON)
async def reminder_on(callback: CallbackQuery):
    global reminder_users
    user_id = callback.from_user.id
    
    # –ü–æ–ª—É—á–∞–µ–º –≤—Ä–µ–º—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    default_time = os.getenv("DEFAULT_REMINDER_TIME", "20:00")
    hour, minute = map(int, default_time.split(":"))
    
    # –î–æ–±–∞–≤–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤ —Å–ª–æ–≤–∞—Ä—å —Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º–∏
    reminder_users[user_id] = default_time
    
    # –°–æ–∑–¥–∞–µ–º —É–Ω–∏–∫–∞–ª—å–Ω—ã–π ID –¥–ª—è –∑–∞–¥–∞—á–∏
    job_id = f"reminder_{user_id}"
    
    # –£–¥–∞–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â—É—é –∑–∞–¥–∞—á—É, –µ—Å–ª–∏ –æ–Ω–∞ –µ—Å—Ç—å
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
    
    # –î–æ–±–∞–≤–ª—è–µ–º –Ω–æ–≤—É—é –∑–∞–¥–∞—á—É –≤ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫
    scheduler.add_job(
        send_reminder,
        CronTrigger(hour=hour, minute=minute),
        id=job_id,
        args=[callback.bot, user_id],
        replace_existing=True
    )
    
    # –ï—Å–ª–∏ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫ –Ω–µ –∑–∞–ø—É—â–µ–Ω, –∑–∞–ø—É—Å–∫–∞–µ–º –µ–≥–æ
    if not scheduler.running:
        scheduler.start()
    
    await callback.message.edit_text(
        f"‚è∞ <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã</b>\n\n"
        f"–í—ã –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –µ–∂–µ–¥–Ω–µ–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö –≤ {default_time}.",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤–∫–ª—é—á–µ–Ω—ã!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –≤–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –Ω–∞ {default_time}")

@reminder_router.callback_query(F.data == CallbackActions.REMINDER_OFF)
async def reminder_off(callback: CallbackQuery):
    global reminder_users
    user_id = callback.from_user.id
    
    # –£–¥–∞–ª—è–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–ª–æ–≤–∞—Ä—è –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π
    if user_id in reminder_users:
        del reminder_users[user_id]
    
    # –£–¥–∞–ª—è–µ–º –∑–∞–¥–∞—á—É –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞
    job_id = f"reminder_{user_id}"
    if scheduler.get_job(job_id):
        scheduler.remove_job(job_id)
        logger.info(f"–ó–∞–¥–∞—á–∞ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è {job_id} —É–¥–∞–ª–µ–Ω–∞ –∏–∑ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞")
    
    await callback.message.edit_text(
        "üîï <b>–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã</b>\n\n"
        "–í—ã –Ω–µ –±—É–¥–µ—Ç–µ –ø–æ–ª—É—á–∞—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö.",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer("–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ—Ç–∫–ª—é—á–µ–Ω—ã!")
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –æ—Ç–∫–ª—é—á–∏–ª –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")

@reminder_router.callback_query(F.data == CallbackActions.REMINDER_STATUS)
async def reminder_status(callback: CallbackQuery):
    user_id = callback.from_user.id
    job_id = f"reminder_{user_id}"
    job = scheduler.get_job(job_id)
    
    if job and user_id in reminder_users:
        reminder_time = reminder_users[user_id]
        status_text = (
            "üìÖ <b>–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>\n\n"
            f"–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö: –í–∫–ª—é—á–µ–Ω—ã\n"
            f"–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: –ï–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ {reminder_time}"
        )
    else:
        status_text = (
            "üìÖ <b>–°—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π:</b>\n\n"
            "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –æ –ø—Ä–∞–∫—Ç–∏–∫–∞—Ö: –û—Ç–∫–ª—é—á–µ–Ω—ã\n"
            "–†–∞—Å–ø–∏—Å–∞–Ω–∏–µ: -"
        )
    
    await callback.message.edit_text(
        status_text,
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {user_id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å—Ç–∞—Ç—É—Å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏–π")

@reminder_router.callback_query(F.data == CallbackActions.HELP_REMINDER)
async def help_reminder(callback: CallbackQuery):
    await callback.message.edit_text(
        "‚ÑπÔ∏è <b>–°–ø—Ä–∞–≤–∫–∞ –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º:</b>\n\n"
        "–ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø–æ–º–æ–≥–∞—é—Ç –≤–∞–º —Ä–µ–≥—É–ª—è—Ä–Ω–æ –≤—ã–ø–æ–ª–Ω—è—Ç—å –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–µ –ø—Ä–∞–∫—Ç–∏–∫–∏. "
        "–í—ã –º–æ–∂–µ—Ç–µ –≤–∫–ª—é—á–∏—Ç—å –∏–ª–∏ –æ—Ç–∫–ª—é—á–∏—Ç—å –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –≤ –ª—é–±–æ–π –º–æ–º–µ–Ω—Ç.\n\n"
        "–ü–æ —É–º–æ–ª—á–∞–Ω–∏—é –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è –ø—Ä–∏—Ö–æ–¥—è—Ç –µ–∂–µ–¥–Ω–µ–≤–Ω–æ –≤ 20:00.",
        reply_markup=get_reminder_keyboard(),
        parse_mode="HTML"
    )
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –∑–∞–ø—Ä–æ—Å–∏–ª —Å–ø—Ä–∞–≤–∫—É –ø–æ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è–º")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–Ω–æ–ø–∫–∏ –û—Ç–º–µ–Ω–∞
@main_router.message(Command("cancel"))
@main_router.message(F.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")
async def cancel_command(message: Message, state: FSMContext):
    current_state = await state.get_state()
    if current_state is not None:
        await state.clear()
        await message.answer(
            "‚ùå –¢–µ–∫—É—â–∏–π –æ–ø—Ä–æ—Å –æ—Ç–º–µ–Ω–µ–Ω.",
            reply_markup=get_main_keyboard()
        )
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–º–µ–Ω–∏–ª –æ–ø—Ä–æ—Å")
    else:
        await message.answer(
            "–£ –≤–∞—Å –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ –æ–ø—Ä–æ—Å–∞ –¥–ª—è –æ—Ç–º–µ–Ω—ã.",
            reply_markup=get_main_keyboard()
        )

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@main_router.message()
async def unknown_message(message: Message, state: FSMContext):
    current_state = await state.get_state()
    
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–ø—Ä–æ—Å–∞
    if current_state == SurveyStates.answering_questions:
        # –ü–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏—è –≤ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –æ–±—Ä–∞–±–æ—Ç—á–∏–∫
        await process_survey_answer(message, state)
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –æ–∂–∏–¥–∞–Ω–∏—è –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
    elif current_state == SurveyStates.waiting_start:
        # –£—Å—Ç–∞–Ω–æ–≤–∏–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ answering_questions –∏ —Å–æ—Ö—Ä–∞–Ω–∏–º –∏–Ω–¥–µ–∫—Å —Ç–µ–∫—É—â–µ–≥–æ –≤–æ–ø—Ä–æ—Å–∞
        await state.set_state(SurveyStates.answering_questions)
        await state.update_data(question_index=0, answers={})
        
        # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
        await message.answer(f"–í–æ–ø—Ä–æ—Å 1: {DEMO_QUESTIONS[0]}")
        logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –æ—Ç–≤–µ—á–∞—Ç—å –Ω–∞ –æ–ø—Ä–æ—Å")
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å
    elif current_state == SurveyStates.completed:
        await message.answer(
            "–í—ã —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –æ–ø—Ä–æ—Å. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –¥—Ä—É–≥–∏—Ö —Ñ—É–Ω–∫—Ü–∏–π.",
            reply_markup=get_main_keyboard()
        )
    # –ï—Å–ª–∏ –Ω–µ—Ç –∞–∫—Ç–∏–≤–Ω–æ–≥–æ —Å–æ—Å—Ç–æ—è–Ω–∏—è –∏–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ
    else:
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è
        if message.text:
            # –ï—Å–ª–∏ —ç—Ç–æ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ process_text_message
            await process_text_message(message, state)
        elif message.voice:
            # –ï—Å–ª–∏ —ç—Ç–æ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ, –ø–µ—Ä–µ–Ω–∞–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –≤ process_voice_message_handler
            await process_voice_message_handler(message, state)
        else:
            # –ï—Å–ª–∏ —ç—Ç–æ –¥—Ä—É–≥–æ–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç
            await message.answer(
                "–Ø –Ω–µ –ø–æ–Ω–∏–º–∞—é —ç—Ç—É –∫–æ–º–∞–Ω–¥—É. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –∏—Å–ø–æ–ª—å–∑—É–π—Ç–µ –∫–Ω–æ–ø–∫–∏ –º–µ–Ω—é –¥–ª—è –≤–∑–∞–∏–º–æ–¥–µ–π—Å—Ç–≤–∏—è.",
                reply_markup=get_main_keyboard()
            )
            logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª –Ω–µ–ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–π —Ç–∏–ø —Å–æ–æ–±—â–µ–Ω–∏—è")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ –¥–ª—è –æ–ø—Ä–æ—Å–∞
@survey_router.message(SurveyStates.answering_questions)
async def process_survey_answer(message: Message, state: FSMContext):
    # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Ö–æ—á–µ—Ç –æ—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å
    if message.text == "‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å":
        await cancel_command(message, state)
        return
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–∏–π –∏–Ω–¥–µ–∫—Å –≤–æ–ø—Ä–æ—Å–∞ –∏ –æ—Ç–≤–µ—Ç—ã
    data = await state.get_data()
    question_index = data.get("question_index", 0)
    answers = data.get("answers", {})
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º, –≤ –∫–∞–∫–æ–π —á–∞—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞ –º—ã –Ω–∞—Ö–æ–¥–∏–º—Å—è
    is_strength_questions = data.get("is_strength_questions", False)
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    if is_strength_questions:
        question_id = f"strength_{question_index + 1}"
    else:
        question_id = f"demo_{question_index + 1}"
    
    answers[question_id] = message.text
    
    # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ —Å–ª–µ–¥—É—é—â–µ–º—É –≤–æ–ø—Ä–æ—Å—É
    question_index += 1
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ –µ—â–µ –≤–æ–ø—Ä–æ—Å—ã –≤ —Ç–µ–∫—É—â–µ–π —á–∞—Å—Ç–∏ –æ–ø—Ä–æ—Å–∞
    if not is_strength_questions and question_index < len(DEMO_QUESTIONS):
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã
        await state.update_data(question_index=question_index, answers=answers)
        await message.answer(f"–í–æ–ø—Ä–æ—Å {question_index + 1}: {DEMO_QUESTIONS[question_index]}")
    elif not is_strength_questions and question_index >= len(DEMO_QUESTIONS):
        # –ü–µ—Ä–µ—Ö–æ–¥–∏–º –∫ –≤–æ–ø—Ä–æ—Å–∞–º –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö
        await state.update_data(
            question_index=0, 
            answers=answers,
            is_strength_questions=True
        )
        
        # –û–±—ä—è—Å–Ω—è–µ–º —à–∫–∞–ª—É –æ—Ü–µ–Ω–∫–∏
        scale_explanation = "–¢–µ–ø–µ—Ä—å —è –∑–∞–¥–∞–º –≤–æ–ø—Ä–æ—Å—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.\n\n"
        scale_explanation += "–û—Ü–µ–Ω–∏ –∫–∞–∂–¥–æ–µ —É—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏–µ –ø–æ —à–∫–∞–ª–µ –æ—Ç 1 –¥–æ 5, –≥–¥–µ:\n"
        scale_explanation += "1 - –°–æ–≤—Å–µ–º –Ω–µ –ø—Ä–æ –º–µ–Ω—è\n"
        scale_explanation += "2 - –°–∫–æ—Ä–µ–µ –Ω–µ –ø—Ä–æ –º–µ–Ω—è\n"
        scale_explanation += "3 - –ù–µ–π—Ç—Ä–∞–ª—å–Ω–æ\n"
        scale_explanation += "4 - –°–∫–æ—Ä–µ–µ –ø—Ä–æ –º–µ–Ω—è\n"
        scale_explanation += "5 - –¢–æ—á–Ω–æ –ø—Ä–æ –º–µ–Ω—è\n\n"
        scale_explanation += "–û—Ç–≤–µ—á–∞–π —Ç–æ–ª—å–∫–æ —Ü–∏—Ñ—Ä–æ–π –æ—Ç 1 –¥–æ 5."
        
        await message.answer(scale_explanation)
        
        # –ó–∞–¥–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö
        if STRENGTH_QUESTIONS:
            await message.answer(
                f"–í–æ–ø—Ä–æ—Å 1/{len(STRENGTH_QUESTIONS)}: {STRENGTH_QUESTIONS[0]['text']}"
            )
        else:
            # –ï—Å–ª–∏ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö –Ω–µ –Ω–∞–π–¥–µ–Ω—ã, –∑–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
            await complete_survey(message, state, answers)
    elif is_strength_questions and question_index < len(STRENGTH_QUESTIONS):
        # –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö
        await state.update_data(question_index=question_index, answers=answers)
        await message.answer(
            f"–í–æ–ø—Ä–æ—Å {question_index + 1}/{len(STRENGTH_QUESTIONS)}: {STRENGTH_QUESTIONS[question_index]['text']}"
        )
    else:
        # –ó–∞–≤–µ—Ä—à–∞–µ–º –æ–ø—Ä–æ—Å
        await complete_survey(message, state, answers)

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
async def complete_survey(message: Message, state: FSMContext, answers: Dict[str, str]):
    """–§—É–Ω–∫—Ü–∏—è –¥–ª—è –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –æ–ø—Ä–æ—Å–∞ –∏ –∞–Ω–∞–ª–∏–∑–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤."""
    await state.set_state(SurveyStates.completed)
    
    # –°–æ–æ–±—â–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    await message.answer("–ê–Ω–∞–ª–∏–∑–∏—Ä—É—é —Ç–≤–æ–∏ –æ—Ç–≤–µ—Ç—ã... –≠—Ç–æ –º–æ–∂–µ—Ç –∑–∞–Ω—è—Ç—å –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥.")
    
    # –†–∞—Å—á–µ—Ç –±–∞–ª–ª–æ–≤ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if CATEGORY_QUESTIONS:
        scores = {}
        
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
        for category in CATEGORY_QUESTIONS:
            scores[category] = {"total": 0, "count": 0}
        
        # –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤
        for question_id, answer in answers.items():
            if question_id.startswith("strength_") and answer.isdigit():
                q_id = question_id
                for category, questions in CATEGORY_QUESTIONS.items():
                    if q_id in questions:
                        scores[category]["total"] += int(answer)
                        scores[category]["count"] += 1
        
        # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
        final_scores = {}
        for category, data in scores.items():
            if data["count"] > 0:
                final_scores[category] = round(data["total"] / data["count"], 2)
            else:
                final_scores[category] = 0
        
        # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ø-3 —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        top_strengths = sorted(final_scores.items(), key=lambda x: x[1], reverse=True)[:3]
        top_strengths_names = []
        
        for category, score in top_strengths:
            top_strengths_names.append(STRENGTH_CATEGORIES.get(category, category))
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
        result_message = "‚úÖ <b>–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n"
        
        if top_strengths_names:
            result_message += "üèÜ <b>–¢–≤–æ–∏ —Ç–æ–ø-3 —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</b>\n"
            for i, strength in enumerate(top_strengths_names, 1):
                result_message += f"{i}. {strength}\n"
            result_message += "\n"
        
        if final_scores:
            result_message += "üìä <b>–¢–≤–æ–∏ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º:</b>\n"
            for category, score in final_scores.items():
                category_name = STRENGTH_CATEGORIES.get(category, category)
                result_message += f"- {category_name}: {score}/5\n"
            result_message += "\n"
        
        # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
        result_message += "üß† <b>–ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ —Ç–≤–æ–µ–≥–æ –ø—Ä–æ—Ñ–∏–ª—è:</b>\n\n"
        
        # –°–æ–±–∏—Ä–∞–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ø-—Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        personality_traits = {
            "analytical": "–¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Å–∫–ª–∞–¥–æ–º —É–º–∞. –¢–≤–æ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ –º—ã—Å–ª–∏—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.",
            "creative": "–¢—ã —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å –±–æ–≥–∞—Ç—ã–º –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –¢–≤–æ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è —Ü–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã.",
            "leadership": "–£ —Ç–µ–±—è —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω—ã –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞. –¢—ã —É–º–µ–µ—à—å –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∏ –±—Ä–∞—Ç—å –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç —Ç–µ–±—è –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏–¥–µ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ.",
            "social": "–¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –≤—ã—Å–æ–∫–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏. –¢–≤–æ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏ —Å—Ç—Ä–æ–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ü–µ–Ω–∏—Ç—Å—è –≤ –ª—é–±–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ.",
            "organized": "–¢—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –¢–≤–æ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ–º–æ–≥–∞–µ—Ç —Ç–µ–±–µ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.",
            "resilient": "–¢—ã –æ–±–ª–∞–¥–∞–µ—à—å –≤—ã—Å–æ–∫–æ–π —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –¢–≤–æ—è —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö - —ç—Ç–æ —Ü–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        for category, _ in top_strengths:
            if category in personality_traits:
                result_message += f"{personality_traits[category]}\n\n"
        
        # –ö–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
        result_message += "üí™ <b>–¢–≤–æ–∏ –∫–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã:</b>\n"
        strength_traits = {
            "analytical": ["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á", "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏"],
            "creative": ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π", "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–¥–∞—á–∞–º"],
            "leadership": ["–£–º–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö", "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
            "social": ["–≠–º–ø–∞—Ç–∏—è", "–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å", "–£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ"],
            "organized": ["–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º", "–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"],
            "resilient": ["–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º 3 –∫–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
        strength_count = 1
        for category, _ in top_strengths:
            if category in strength_traits:
                for trait in strength_traits[category]:
                    result_message += f"{strength_count}. {trait}\n"
                    strength_count += 1
        
        result_message += "\n"
        
        # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
        result_message += "üå± <b>–ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è:</b>\n"
        
        # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (—Å —Å–∞–º—ã–º–∏ –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏)
        bottom_strengths = sorted(final_scores.items(), key=lambda x: x[1])[:2]
        
        growth_areas = {
            "analytical": ["–†–∞–∑–≤–∏–≤–∞–π –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á", "–ü—Ä–∞–∫—Ç–∏–∫—É–π –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
            "creative": ["–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π —Å –Ω–æ–≤—ã–º–∏ —Ö–æ–±–±–∏", "–£–¥–µ–ª—è–π –≤—Ä–µ–º—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –∑–∞–Ω—è—Ç–∏—è–º"],
            "leadership": ["–ü—Ä–∞–∫—Ç–∏–∫—É–π –ø—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", "–ë–µ—Ä–∏ –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"],
            "social": ["–†–∞–∑–≤–∏–≤–∞–π —ç–º–ø–∞—Ç–∏—é —á–µ—Ä–µ–∑ –æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ª—é–¥—å–º–∏", "–ü—Ä–∞–∫—Ç–∏–∫—É–π –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ"],
            "organized": ["–ò—Å–ø–æ–ª—å–∑—É–π –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", "–ü—Ä–∞–∫—Ç–∏–∫—É–π —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"],
            "resilient": ["–†–∞–∑–≤–∏–≤–∞–π —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å—Ç—Ä–µ—Å—Å—É —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏", "–†–∞–±–æ—Ç–∞–π –Ω–∞–¥ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º"]
        }
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
        growth_count = 1
        for category, _ in bottom_strengths:
            if category in growth_areas:
                for area in growth_areas[category]:
                    result_message += f"{growth_count}. {area}\n"
                    growth_count += 1
        
        await message.answer(result_message, parse_mode="HTML", reply_markup=get_main_keyboard())
    else:
        # –ï—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∫–∞—Ç–µ–≥–æ—Ä–∏–∏, –ø—Ä–æ—Å—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç—ã
        result_text = "‚úÖ <b>–û–ø—Ä–æ—Å –∑–∞–≤–µ—Ä—à–µ–Ω!</b>\n\n<b>–í–∞—à–∏ –æ—Ç–≤–µ—Ç—ã:</b>\n\n"
        for i, answer in enumerate(answers.values()):
            if i < len(DEMO_QUESTIONS):
                result_text += f"<b>–í–æ–ø—Ä–æ—Å {i + 1}:</b> {DEMO_QUESTIONS[i]}\n"
                result_text += f"<b>–û—Ç–≤–µ—Ç:</b> {answer}\n\n"
        
        await message.answer(
            result_text,
            parse_mode="HTML",
            reply_markup=get_main_keyboard()
        )
    
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –∑–∞–≤–µ—Ä—à–∏–ª –æ–ø—Ä–æ—Å")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã –Ω–∞—á–∞–ª–∞ –æ–ø—Ä–æ—Å–∞
@survey_router.message(Command("questionnaire"))
@survey_router.message(F.text == "üìù –û–ø—Ä–æ—Å")
async def start_survey(message: Message, state: FSMContext):
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —É–∂–µ –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å
    user_data = await state.get_data()
    has_profile = user_data.get("answers", {}) and any(key.startswith("demo_") for key in user_data.get("answers", {}))
    
    if has_profile:
        # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É —Å –∫–Ω–æ–ø–∫–∞–º–∏ –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
        builder = InlineKeyboardBuilder()
        builder.button(text="‚úÖ –î–∞, –Ω–∞—á–∞—Ç—å –∑–∞–Ω–æ–≤–æ", callback_data="confirm_survey_button")
        builder.button(text="‚ùå –ù–µ—Ç, –æ—Ç–º–µ–Ω–∞", callback_data=CallbackActions.MAIN_MENU)
        builder.adjust(2)  # –†–∞–∑–º–µ—â–∞–µ–º –æ–±–µ –∫–Ω–æ–ø–∫–∏ –≤ –æ–¥–Ω–æ–º —Ä—è–¥—É
        
        await message.answer(
            "‚ö†Ô∏è <b>–í–Ω–∏–º–∞–Ω–∏–µ:</b>\n\n"
            "–£ –≤–∞—Å —É–∂–µ –µ—Å—Ç—å –∑–∞–ø–æ–ª–Ω–µ–Ω–Ω—ã–π –ø—Ä–æ—Ñ–∏–ª—å. –ï—Å–ª–∏ –≤—ã –ø—Ä–æ–π–¥–µ—Ç–µ –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ, "
            "–≤–∞—à–∏ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ –±—É–¥—É—Ç –ø–µ—Ä–µ–∑–∞–ø–∏—Å–∞–Ω—ã.\n\n"
            "–í—ã —É–≤–µ—Ä–µ–Ω—ã, —á—Ç–æ —Ö–æ—Ç–∏—Ç–µ –Ω–∞—á–∞—Ç—å –æ–ø—Ä–æ—Å –∑–∞–Ω–æ–≤–æ?",
            reply_markup=builder.as_markup(),
            parse_mode="HTML"
        )
        return
    
    # –ï—Å–ª–∏ –ø—Ä–æ—Ñ–∏–ª—è –Ω–µ—Ç, –Ω–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä—É–µ–º –æ–ø—Ä–æ—Å
    await state.set_state(SurveyStates.answering_questions)
    await state.update_data(
        question_index=0,
        answers={},
        is_strength_questions=False
    )
    
    # –ü—Ä–∏–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
    await message.answer(
        "üìã <b>–ù–∞—á–∏–Ω–∞–µ–º –æ–ø—Ä–æ—Å!</b>\n\n"
        "–Ø –∑–∞–¥–∞–º –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–ø—Ä–æ—Å–æ–≤, —á—Ç–æ–±—ã –ª—É—á—à–µ —É–∑–Ω–∞—Ç—å —Ç–µ–±—è. "
        "–°–Ω–∞—á–∞–ª–∞ –æ—Ç–≤–µ—Ç—å –Ω–∞ –Ω–µ—Å–∫–æ–ª—å–∫–æ –±–∞–∑–æ–≤—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤, –∞ –∑–∞—Ç–µ–º –º—ã –ø–µ—Ä–µ–π–¥–µ–º –∫ "
        "—Å–ø–µ—Ü–∏–∞–ª—å–Ω–æ–º—É —Ç–µ—Å—Ç—É –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è —Ç–≤–æ–∏—Ö —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω.",
        parse_mode="HTML"
    )
    
    # –ü–æ–∫–∞–∑—ã–≤–∞–µ–º –ø–µ—Ä–≤—ã–π –≤–æ–ø—Ä–æ—Å
    await message.answer(
        f"–í–æ–ø—Ä–æ—Å 1: {DEMO_QUESTIONS[0]}",
        reply_markup=ReplyKeyboardMarkup(
            keyboard=[[KeyboardButton(text="‚ùå –û—Ç–º–µ–Ω–∏—Ç—å –æ–ø—Ä–æ—Å")]],
            resize_keyboard=True,
            one_time_keyboard=False,
            is_persistent=True,
            input_field_placeholder="–í–≤–µ–¥–∏—Ç–µ –≤–∞—à –æ—Ç–≤–µ—Ç..."
        )
    )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—á–∞–ª –æ–ø—Ä–æ—Å")

@profile_router.callback_query(F.data == "show_test_results")
async def show_test_results(callback: CallbackQuery, state: FSMContext):
    # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ —Å–æ—Å—Ç–æ—è–Ω–∏—è
    user_data = await state.get_data()
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –æ—Ç–≤–µ—Ç–æ–≤
    if not user_data or "answers" not in user_data:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    answers = user_data.get("answers", {})
    
    # –°–æ–±–∏—Ä–∞–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö
    strength_answers = {}
    for key, value in answers.items():
        if key.startswith("strength_") and value.isdigit():
            question_id = key
            strength_answers[question_id] = int(value)
    
    # –ï—Å–ª–∏ –Ω–µ—Ç –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö
    if not strength_answers:
        await callback.answer("–†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã")
        return
    
    logger.info(f"–ù–∞–π–¥–µ–Ω–æ {len(strength_answers)} –æ—Ç–≤–µ—Ç–æ–≤ –Ω–∞ –≤–æ–ø—Ä–æ—Å—ã –æ —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω–∞—Ö")
    
    # –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –±–∞–ª–ª—ã –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    scores = {}
    
    # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Å—á–µ—Ç—á–∏–∫–æ–≤ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    for category in CATEGORY_QUESTIONS:
        scores[category] = {"total": 0, "count": 0}
    
    # –ü–æ–¥—Å—á–µ—Ç –±–∞–ª–ª–æ–≤
    for question_id, answer_value in strength_answers.items():
        for category, questions in CATEGORY_QUESTIONS.items():
            if question_id in questions:
                scores[category]["total"] += answer_value
                scores[category]["count"] += 1
                logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –±–∞–ª–ª {answer_value} –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é {category} –¥–ª—è –≤–æ–ø—Ä–æ—Å–∞ {question_id}")
    
    # –†–∞—Å—á–µ—Ç —Å—Ä–µ–¥–Ω–∏—Ö –∑–Ω–∞—á–µ–Ω–∏–π
    final_scores = {}
    for category, data in scores.items():
        if data["count"] > 0:
            final_scores[category] = round(data["total"] / data["count"], 2)
        else:
            final_scores[category] = 0
    
    logger.info(f"–§–∏–Ω–∞–ª—å–Ω—ã–µ –æ—Ü–µ–Ω–∫–∏ –ø–æ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º: {final_scores}")
    
    # –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ç–æ–ø-3 —Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
    top_strengths = sorted(final_scores.items(), key=lambda x: x[1], reverse=True)[:3]
    top_strengths_names = []
    
    for category, score in top_strengths:
        category_name = STRENGTH_CATEGORIES.get(category, category)
        top_strengths_names.append(f"{category_name} ({score}/5)")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞ —Å –±–æ–ª–µ–µ –∫—Ä–∞—Å–∏–≤—ã–º —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ–º
    result_message = "üìä <b>–†–ï–ó–£–õ–¨–¢–ê–¢–´ –ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–û–ì–û –¢–ï–°–¢–ê</b>\n"
    result_message += "‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ‚îÅ\n\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –±–∞–∑–æ–≤—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é
    demo_answers = {}
    for key, value in answers.items():
        if key.startswith("demo_"):
            question_index = int(key.split("_")[1]) - 1
            if question_index < len(DEMO_QUESTIONS):
                demo_answers[question_index] = value
    
    if demo_answers:
        result_message += "üë§ <b>–õ–ò–ß–ù–ê–Ø –ò–ù–§–û–†–ú–ê–¶–ò–Ø</b>\n"
        
        # –°–ª–æ–≤–∞—Ä—å —Å –∫—Ä–∞—Å–∏–≤—ã–º–∏ –æ–±–æ–∑–Ω–∞—á–µ–Ω–∏—è–º–∏ –ø–æ–ª–µ–π
        field_icons = {
            "–ö–∞–∫ —Ç–µ–±—è –∑–æ–≤—É—Ç?": "üë§ <b>–ò–º—è:</b> ",
            "–°–∫–æ–ª—å–∫–æ —Ç–µ–±–µ –ª–µ—Ç?": "üéÇ <b>–í–æ–∑—Ä–∞—Å—Ç:</b> ",
            "–ö–∞–∫–∞—è —É —Ç–µ–±—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è?": "üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ",
            "–ö–∞–∫–∞—è —É —Ç–µ–±—è –¥–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è? (—Ñ–æ—Ä–º–∞—Ç: –î–î.–ú–ú.–ì–ì–ì–ì)": "üìÖ <b>–î–∞—Ç–∞ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ",
            "–ì–¥–µ —Ç—ã —Ä–æ–¥–∏–ª—Å—è/—Ä–æ–¥–∏–ª–∞—Å—å?": "üåç <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ",
            "–ì–¥–µ —Ç—ã —Ä–æ–¥–∏–ª—Å—è/—Ä–æ–¥–∏–ª–∞—Å—å? (–≥–æ—Ä–æ–¥, —Å—Ç—Ä–∞–Ω–∞)": "üåç <b>–ú–µ—Å—Ç–æ —Ä–æ–∂–¥–µ–Ω–∏—è:</b> ",
            "–í –∫–∞–∫–æ–º —á–∞—Å–æ–≤–æ–º –ø–æ—è—Å–µ —Ç—ã –Ω–∞—Ö–æ–¥–∏—à—å—Å—è?": "üïí <b>–ß–∞—Å–æ–≤–æ–π –ø–æ—è—Å:</b> "
        }
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∏ –¥–æ–±–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç—ã –Ω–∞ –¥–µ–º–æ-–≤–æ–ø—Ä–æ—Å—ã –≤ –∫—Ä–∞—Å–∏–≤–æ–º —Ñ–æ—Ä–º–∞—Ç–µ
        for i in sorted(demo_answers.keys()):
            if i < len(DEMO_QUESTIONS):
                question = DEMO_QUESTIONS[i]
                answer = demo_answers[i]
                
                # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∏–∫–æ–Ω–∫–∏ –∏ —Ñ–æ—Ä–º–∞—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –¥–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—è
                if question in field_icons:
                    result_message += f"{field_icons[question]}{answer}\n"
                else:
                    # –î–ª—è –Ω–µ–æ–±—Ä–∞–±–æ—Ç–∞–Ω–Ω—ã—Ö –≤–æ–ø—Ä–æ—Å–æ–≤ –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç
                    result_message += f"‚Ä¢ <b>{question}</b> {answer}\n"
        
        result_message += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ç–æ–ø-3 —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    if top_strengths_names:
        result_message += "üèÜ <b>–¢–û–ü-3 –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´</b>\n"
        for i, strength in enumerate(top_strengths, 1):
            category, score = strength
            category_name = STRENGTH_CATEGORIES.get(category, category)
            # –î–æ–±–∞–≤–ª—è–µ–º –∑–≤–µ–∑–¥–æ—á–∫–∏ –¥–ª—è –≤–∏–∑—É–∞–ª—å–Ω–æ–≥–æ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –æ—Ü–µ–Ω–∫–∏
            stars = "‚òÖ" * round(score) + "‚òÜ" * (5 - round(score))
            result_message += f"{i}. <b>{category_name}</b> ({score}/5) {stars}\n"
        result_message += "\n"
    
    # –î–æ–±–∞–≤–ª—è–µ–º –æ—Ü–µ–Ω–∫–∏ –ø–æ –≤—Å–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º
    if final_scores:
        result_message += "üìà <b>–û–¶–ï–ù–ö–ò –ü–û –ö–ê–¢–ï–ì–û–†–ò–Ø–ú</b>\n"
        
        # –°–æ—Ä—Ç–∏—Ä—É–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ –ø–æ —É–±—ã–≤–∞–Ω–∏—é –æ—Ü–µ–Ω–æ–∫
        sorted_scores = sorted(final_scores.items(), key=lambda x: x[1], reverse=True)
        
        for category, score in sorted_scores:
            category_name = STRENGTH_CATEGORIES.get(category, category)
            # –î–æ–±–∞–≤–ª—è–µ–º –≤–∏–∑—É–∞–ª—å–Ω–æ–µ –ø—Ä–µ–¥—Å—Ç–∞–≤–ª–µ–Ω–∏–µ –æ—Ü–µ–Ω–∫–∏
            stars = "‚òÖ" * round(score) + "‚òÜ" * (5 - round(score))
            result_message += f"‚Ä¢ <b>{category_name}:</b> {score}/5 {stars}\n"
        
        result_message += "\n"
    
    # –ü—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –ø—Ä–æ—Ñ–∏–ª—è
    result_message += "üß† <b>–ü–°–ò–•–û–õ–û–ì–ò–ß–ï–°–ö–ò–ô –ê–ù–ê–õ–ò–ó –ü–†–û–§–ò–õ–Ø</b>\n\n"
    
    # –°–æ–±–∏—Ä–∞–µ–º –ø—Å–∏—Ö–æ–ª–æ–≥–∏—á–µ—Å–∫–∏–π –∞–Ω–∞–ª–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–æ–ø-—Å–∏–ª—å–Ω—ã—Ö —Å—Ç–æ—Ä–æ–Ω
    personality_traits = {
        "analytical": "–í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–º —Å–∫–ª–∞–¥–æ–º —É–º–∞. –í–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏ –º—ã—Å–ª–∏—Ç—å –∏ –∞–Ω–∞–ª–∏–∑–∏—Ä–æ–≤–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º –Ω–∞—Ö–æ–¥–∏—Ç—å –æ–ø—Ç–∏–º–∞–ª—å–Ω—ã–µ —Ä–µ—à–µ–Ω–∏—è —Å–ª–æ–∂–Ω—ã—Ö –∑–∞–¥–∞—á.",
        "creative": "–í—ã —Ç–≤–æ—Ä—á–µ—Å–∫–∞—è –ª–∏—á–Ω–æ—Å—Ç—å —Å –±–æ–≥–∞—Ç—ã–º –≤–æ–æ–±—Ä–∞–∂–µ–Ω–∏–µ–º. –í–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –º—ã—Å–ª–∏—Ç—å –Ω–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ –∏ –≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –Ω–æ–≤—ã–µ –∏–¥–µ–∏ –¥–µ–ª–∞–µ—Ç –≤–∞—Å —Ü–µ–Ω–Ω—ã–º —É—á–∞—Å—Ç–Ω–∏–∫–æ–º –ª—é–±–æ–π –∫–æ–º–∞–Ω–¥—ã.",
        "leadership": "–£ –≤–∞—Å —è—Ä–∫–æ –≤—ã—Ä–∞–∂–µ–Ω—ã –ª–∏–¥–µ—Ä—Å–∫–∏–µ –∫–∞—á–µ—Å—Ç–≤–∞. –í—ã —É–º–µ–µ—Ç–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö –∏ –±—Ä–∞—Ç—å –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å, —á—Ç–æ –¥–µ–ª–∞–µ—Ç –≤–∞—Å –µ—Å—Ç–µ—Å—Ç–≤–µ–Ω–Ω—ã–º –ª–∏–¥–µ—Ä–æ–º –≤ –≥—Ä—É–ø–ø–µ.",
        "social": "–í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –≤—ã—Å–æ–∫–∏–º —ç–º–æ—Ü–∏–æ–Ω–∞–ª—å–Ω—ã–º –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–æ–º –∏ –∫–æ–º–º—É–Ω–∏–∫–∞—Ç–∏–≤–Ω—ã–º–∏ –Ω–∞–≤—ã–∫–∞–º–∏. –í–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–æ–Ω–∏–º–∞—Ç—å –¥—Ä—É–≥–∏—Ö –∏ —Å—Ç—Ä–æ–∏—Ç—å –≥–∞—Ä–º–æ–Ω–∏—á–Ω—ã–µ –æ—Ç–Ω–æ—à–µ–Ω–∏—è —Ü–µ–Ω–∏—Ç—Å—è –≤ –ª—é–±–æ–º –∫–æ–ª–ª–µ–∫—Ç–∏–≤–µ.",
        "organized": "–í—ã –æ—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω—ã–π –∏ –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω—ã–π —á–µ–ª–æ–≤–µ–∫. –í–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø–ª–∞–Ω–∏—Ä–æ–≤–∞—Ç—å –∏ —Å—Ç—Ä—É–∫—Ç—É—Ä–∏—Ä–æ–≤–∞—Ç—å —Ä–∞–±–æ—Ç—É –ø–æ–º–æ–≥–∞–µ—Ç –≤–∞–º —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ –¥–æ—Å—Ç–∏–≥–∞—Ç—å –ø–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã—Ö —Ü–µ–ª–µ–π.",
        "resilient": "–í—ã –æ–±–ª–∞–¥–∞–µ—Ç–µ –≤—ã—Å–æ–∫–æ–π —Å—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å—é –∏ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é. –í–∞—à–∞ —Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å —Å–æ—Ö—Ä–∞–Ω—è—Ç—å —Å–ø–æ–∫–æ–π—Å—Ç–≤–∏–µ –∏ —ç—Ñ—Ñ–µ–∫—Ç–∏–≤–Ω–æ—Å—Ç—å –≤ —Å–ª–æ–∂–Ω—ã—Ö —Å–∏—Ç—É–∞—Ü–∏—è—Ö - —ç—Ç–æ —Ü–µ–Ω–Ω–æ–µ –∫–∞—á–µ—Å—Ç–≤–æ."
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º –∞–Ω–∞–ª–∏–∑ –¥–ª—è —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    for category, _ in top_strengths:
        if category in personality_traits:
            result_message += f"{personality_traits[category]}\n\n"
    
    # –ö–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã
    result_message += "üí™ <b>–ö–õ–Æ–ß–ï–í–´–ï –°–ò–õ–¨–ù–´–ï –°–¢–û–†–û–ù–´</b>\n"
    strength_traits = {
        "analytical": ["–ö—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–°–∏—Å—Ç–µ–º–Ω—ã–π –ø–æ–¥—Ö–æ–¥ –∫ —Ä–µ—à–µ–Ω–∏—é –∑–∞–¥–∞—á", "–°–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –≤–∏–¥–µ—Ç—å –ª–æ–≥–∏—á–µ—Å–∫–∏–µ —Å–≤—è–∑–∏"],
        "creative": ["–ì–µ–Ω–µ—Ä–∞—Ü–∏—è –Ω–æ–≤—ã—Ö –∏–¥–µ–π", "–ù–µ—Å—Ç–∞–Ω–¥–∞—Ä—Ç–Ω–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–¢–≤–æ—Ä—á–µ—Å–∫–∏–π –ø–æ–¥—Ö–æ–¥ –∫ –∑–∞–¥–∞—á–∞–º"],
        "leadership": ["–£–º–µ–Ω–∏–µ –≤–¥–æ—Ö–Ω–æ–≤–ª—è—Ç—å –¥—Ä—É–≥–∏—Ö", "–°—Ç—Ä–∞—Ç–µ–≥–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ", "–†–µ—à–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å"],
        "social": ["–≠–º–ø–∞—Ç–∏—è", "–ö–æ–º–º—É–Ω–∏–∫–∞–±–µ–ª—å–Ω–æ—Å—Ç—å", "–£–º–µ–Ω–∏–µ —Ä–∞–±–æ—Ç–∞—Ç—å –≤ –∫–æ–º–∞–Ω–¥–µ"],
        "organized": ["–û—Ä–≥–∞–Ω–∏–∑–æ–≤–∞–Ω–Ω–æ—Å—Ç—å", "–í–Ω–∏–º–∞–Ω–∏–µ –∫ –¥–µ—Ç–∞–ª—è–º", "–ü—É–Ω–∫—Ç—É–∞–ª—å–Ω–æ—Å—Ç—å"],
        "resilient": ["–°—Ç—Ä–µ—Å—Å–æ—É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å", "–ê–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å", "–ù–∞—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å"]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º 3 –∫–ª—é—á–µ–≤—ã–µ —Å–∏–ª—å–Ω—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã –¥–ª—è –∫–∞–∂–¥–æ–π –∏–∑ —Ç–æ–ø-3 –∫–∞—Ç–µ–≥–æ—Ä–∏–π
    strength_count = 1
    for category, _ in top_strengths:
        if category in strength_traits and strength_count <= 9:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 9 –∫–ª—é—á–µ–≤—ã—Ö –∫–∞—á–µ—Å—Ç–≤
            for trait in strength_traits[category]:
                result_message += f"‚Ä¢ {trait}\n"
                strength_count += 1
    
    result_message += "\n"
    
    # –ù–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è
    result_message += "üå± <b>–ù–ê–ü–†–ê–í–õ–ï–ù–ò–Ø –î–õ–Ø –†–ê–ó–í–ò–¢–ò–Ø</b>\n"
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Å–ª–∞–±—ã–µ —Å—Ç–æ—Ä–æ–Ω—ã (—Å —Å–∞–º—ã–º–∏ –Ω–∏–∑–∫–∏–º–∏ –±–∞–ª–ª–∞–º–∏)
    bottom_strengths = sorted(final_scores.items(), key=lambda x: x[1])[:2]
    
    growth_areas = {
        "analytical": ["–†–∞–∑–≤–∏–≤–∞–π—Ç–µ –∫—Ä–∏—Ç–∏—á–µ—Å–∫–æ–µ –º—ã—à–ª–µ–Ω–∏–µ —á–µ—Ä–µ–∑ —Ä–µ—à–µ–Ω–∏–µ –ª–æ–≥–∏—á–µ—Å–∫–∏—Ö –∑–∞–¥–∞—á", "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–Ω–∞–ª–∏–∑ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –∏–∑ —Ä–∞–∑–Ω—ã—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤"],
        "creative": ["–≠–∫—Å–ø–µ—Ä–∏–º–µ–Ω—Ç–∏—Ä—É–π—Ç–µ —Å –Ω–æ–≤—ã–º–∏ —Ö–æ–±–±–∏", "–£–¥–µ–ª—è–π—Ç–µ –≤—Ä–µ–º—è —Ç–≤–æ—Ä—á–µ—Å–∫–∏–º –∑–∞–Ω—è—Ç–∏—è–º"],
        "leadership": ["–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –ø—É–±–ª–∏—á–Ω—ã–µ –≤—ã—Å—Ç—É–ø–ª–µ–Ω–∏—è", "–ë–µ—Ä–∏—Ç–µ –Ω–∞ —Å–µ–±—è –æ—Ç–≤–µ—Ç—Å—Ç–≤–µ–Ω–Ω–æ—Å—Ç—å –∑–∞ –≥—Ä—É–ø–ø–æ–≤—ã–µ –ø—Ä–æ–µ–∫—Ç—ã"],
        "social": ["–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —ç–º–ø–∞—Ç–∏—é —á–µ—Ä–µ–∑ –æ–±—â–µ–Ω–∏–µ —Å —Ä–∞–∑–Ω—ã–º–∏ –ª—é–¥—å–º–∏", "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ –∞–∫—Ç–∏–≤–Ω–æ–µ —Å–ª—É—à–∞–Ω–∏–µ"],
        "organized": ["–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∏ –∏ —Å–∏—Å—Ç–µ–º—ã –æ—Ä–≥–∞–Ω–∏–∑–∞—Ü–∏–∏", "–ü—Ä–∞–∫—Ç–∏–∫—É–π—Ç–µ —Ç–∞–π–º-–º–µ–Ω–µ–¥–∂–º–µ–Ω—Ç"],
        "resilient": ["–†–∞–∑–≤–∏–≤–∞–π—Ç–µ —É—Å—Ç–æ–π—á–∏–≤–æ—Å—Ç—å –∫ —Å—Ç—Ä–µ—Å—Å—É —á–µ—Ä–µ–∑ —Ä–µ–≥—É–ª—è—Ä–Ω—ã–µ –ø—Ä–∞–∫—Ç–∏–∫–∏", "–†–∞–±–æ—Ç–∞–π—Ç–µ –Ω–∞–¥ –∞–¥–∞–ø—Ç–∏–≤–Ω–æ—Å—Ç—å—é –∫ –∏–∑–º–µ–Ω–µ–Ω–∏—è–º"]
    }
    
    # –î–æ–±–∞–≤–ª—è–µ–º —Ä–µ–∫–æ–º–µ–Ω–¥–∞—Ü–∏–∏ –¥–ª—è —Ä–∞–∑–≤–∏—Ç–∏—è —Å–ª–∞–±—ã—Ö —Å—Ç–æ—Ä–æ–Ω
    growth_count = 1
    for category, _ in bottom_strengths:
        if category in growth_areas and growth_count <= 4:  # –û–≥—Ä–∞–Ω–∏—á–∏–≤–∞–µ–º –¥–æ 4 –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–π —Ä–∞–∑–≤–∏—Ç–∏—è
            for area in growth_areas[category]:
                result_message += f"‚Ä¢ {area}\n"
                growth_count += 1
    
    # –°–æ–∑–¥–∞–µ–º –∫–ª–∞–≤–∏–∞—Ç—É—Ä—É –¥–ª—è –≤–æ–∑–≤—Ä–∞—Ç–∞ –≤ –ø—Ä–æ—Ñ–∏–ª—å
    builder = InlineKeyboardBuilder()
    builder.button(text="üë§ –í–µ—Ä–Ω—É—Ç—å—Å—è –∫ –ø—Ä–æ—Ñ–∏–ª—é", callback_data=CallbackActions.PROFILE)
    builder.button(text="‚óÄÔ∏è –ù–∞–∑–∞–¥ –≤ –º–µ–Ω—é", callback_data=CallbackActions.MAIN_MENU)
    builder.adjust(1, 1)
    
    await callback.message.edit_text(
        result_message,
        reply_markup=builder.as_markup(),
        parse_mode="HTML"
    )
    
    await callback.answer()
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {callback.from_user.id} –ø—Ä–æ—Å–º–æ—Ç—Ä–µ–ª —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–∞")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@main_router.message(F.text, ~F.text.startswith('/'))
async def process_text_message(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ —Ç–µ–∫—Å—Ç–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è (–Ω–µ –∫–æ–º–∞–Ω–¥)."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞
    current_state = await state.get_state()
    if current_state is not None and current_state != SurveyStates.completed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø—Ä–æ—Å),
        # —Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞, —á—Ç–æ–±—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –≤–∏–¥–µ–ª, —á—Ç–æ –±–æ—Ç "–ø–µ—á–∞—Ç–∞–µ—Ç"
    await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏—é –¥–ª—è –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞ –∏–∑ services/recs.py
        from services.recs import generate_response as generate_ai_response
        
        # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç
        response = await generate_ai_response(
            text=message.text,
            user_id=message.from_user.id
        )
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
        await message.answer(response)
        logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–≥–æ—Ç–æ–≤–ª–µ–Ω–Ω—ã–π –æ—Ç–≤–µ—Ç
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –æ—Ç–≤–µ—Ç–∞: {e}")
        await message.answer(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –≤–∞—à–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ –∏–ª–∏ –≤–æ—Å–ø–æ–ª—å–∑—É–π—Ç–µ—Å—å –∫–æ–º–∞–Ω–¥–∞–º–∏ –±–æ—Ç–∞."
        )
    logger.info(f"–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –æ—Ç–ø—Ä–∞–≤–∏–ª —Å–æ–æ–±—â–µ–Ω–∏–µ: {message.text}")

# –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
@main_router.message(F.voice)
async def process_voice_message_handler(message: Message, state: FSMContext):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π."""
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–µ–µ —Å–æ—Å—Ç–æ—è–Ω–∏–µ FSM, —á—Ç–æ–±—ã –Ω–µ –¥—É–±–ª–∏—Ä–æ–≤–∞—Ç—å –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–æ–æ–±—â–µ–Ω–∏–π –≤–æ –≤—Ä–µ–º—è –æ–ø—Ä–æ—Å–∞
    current_state = await state.get_state()
    if current_state is not None and current_state != SurveyStates.completed:
        # –ï—Å–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ –∫–∞–∫–æ–º-—Ç–æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –ø—Ä–æ—Ö–æ–¥–∏—Ç –æ–ø—Ä–æ—Å),
        # —Ç–æ –Ω–µ –æ–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –∑–¥–µ—Å—å
        logger.debug(f"–ü—Ä–æ–ø—É—Å–∫ –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å {message.from_user.id} –Ω–∞—Ö–æ–¥–∏—Ç—Å—è –≤ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ {current_state}")
        return
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –æ–±—Ä–∞–±–æ—Ç–∫–∏
    processing_message = await message.answer("–û–±—Ä–∞–±–∞—Ç—ã–≤–∞—é –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ...")
    
    try:
        # –ò–º–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≥–æ–ª–æ—Å–æ–≤—ã—Ö —Å–æ–æ–±—â–µ–Ω–∏–π
        from services.stt import process_voice_message
        from services.recs import generate_response as generate_ai_response
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –Ω–∞–±–æ—Ä–∞ —Ç–µ–∫—Å—Ç–∞
        await message.bot.send_chat_action(chat_id=message.chat.id, action="typing")
        
        # –¢—Ä–∞–Ω—Å–∫—Ä–∏–±–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        transcribed_text = await process_voice_message(message.bot, message.voice)
        
        if transcribed_text:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç —É—Å–ø–µ—à–Ω–æ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º –µ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é
            await processing_message.edit_text(f"–Ø —Ä–∞—Å–ø–æ–∑–Ω–∞–ª: ¬´{transcribed_text}¬ª")
            
            # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –∫–æ–Ω—Ç–µ–∫—Å—Ç—É–∞–ª—å–Ω—ã–π –æ—Ç–≤–µ—Ç —Å —É—á–µ—Ç–æ–º —Ç–∏–ø–∞ —Å–æ–æ–±—â–µ–Ω–∏—è
            response = await generate_ai_response(
                text=transcribed_text,
                user_id=message.from_user.id
            )
            
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç
            await message.answer(response)
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω –æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id} –Ω–∞ –æ—Å–Ω–æ–≤–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
        else:
            # –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω, —Ç–æ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
            await processing_message.edit_text(
                "–ò–∑–≤–∏–Ω–∏—Ç–µ, –Ω–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≤–∞—à–µ –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ. "
                "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
            )
            logger.warning(f"–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–æ–∑–Ω–∞—Ç—å –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è {message.from_user.id}")
    except Exception as e:
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
        logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        await processing_message.edit_text(
            "–ò–∑–≤–∏–Ω–∏—Ç–µ, –ø—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ –≤–∞—à–µ–≥–æ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è. "
            "–ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –µ—â–µ —Ä–∞–∑ –∏–ª–∏ –æ—Ç–ø—Ä–∞–≤—å—Ç–µ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ."
        )

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –∏ –∑–∞–ø—É—Å–∫ –±–æ—Ç–∞
async def main():
    try:
        # –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ö—Ä–∞–Ω–∏–ª–∏—â–∞ –∏ –±–æ—Ç–∞
        storage = MemoryStorage()
        bot = Bot(token=BOT_TOKEN)
        dp = Dispatcher(storage=storage)
        
        # –†–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–æ–≤
        dp.include_router(main_router)
        dp.include_router(profile_router)
        dp.include_router(reflect_router)
        dp.include_router(meditate_router)
        dp.include_router(reminder_router)
        dp.include_router(survey_router)  # –î–æ–±–∞–≤–ª—è–µ–º —Ä–æ—É—Ç–µ—Ä –¥–ª—è –æ–ø—Ä–æ—Å–∞
        
        # –ó–∞–ø—É—Å–∫ –ø–ª–∞–Ω–∏—Ä–æ–≤—â–∏–∫–∞ –∑–∞–¥–∞–Ω–∏–π, –µ—Å–ª–∏ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –Ω–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è
        if not scheduler.running and reminder_users:
            scheduler.start()
        
        # –ó–∞–ø—É—Å–∫ –±–æ—Ç–∞
        logger.info("–ó–∞–ø—É—Å–∫ –±–æ—Ç–∞...")
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º allowed_updates, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤ –∏ —É–ª—É—á—à–∏—Ç—å –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
        allowed_updates = ["message", "callback_query"]
        
        # –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º, –Ω–µ—Ç –ª–∏ —É–∂–µ –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö —ç–∫–∑–µ–º–ø–ª—è—Ä–æ–≤
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –ø—Ä–æ—Å—Ç–æ–π –∑–∞–ø—Ä–æ—Å, —á—Ç–æ–±—ã –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
            await bot.get_me()
            logger.info("–°–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å Telegram API —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–∏ –∫ Telegram API: {e}")
            return
        
        # –ò–≥–Ω–æ—Ä–∏—Ä—É–µ–º —Å—Ç–∞—Ä—ã–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–ª—è –ø—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–µ–Ω–∏—è –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
        await bot.delete_webhook(drop_pending_updates=True)
        
        # –î–æ–±–∞–≤–ª—è–µ–º –æ–±—Ä–∞–±–æ—Ç–∫—É —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
        def signal_handler(sig, frame):
            logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è, –æ—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –±–æ—Ç–∞...")
            asyncio.create_task(dp.stop_polling())
        
        # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫ —Å–∏–≥–Ω–∞–ª–æ–≤
        for sig in (signal.SIGINT, signal.SIGTERM):
            signal.signal(sig, signal_handler)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ç–∞–π–º–∞—É—Ç –∏ –ø–æ–≤—Ç–æ—Ä–Ω—ã–µ –ø–æ–ø—ã—Ç–∫–∏
        await dp.start_polling(
            bot, 
            allowed_updates=allowed_updates,
            polling_timeout=30,
            handle_signals=True,
            close_bot_session=True
        )
    except Exception as e:
        logger.error(f"–ö—Ä–∏—Ç–∏—á–µ—Å–∫–∞—è –æ—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ –±–æ—Ç–∞: {e}")
        # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏, –ø—ã—Ç–∞–µ–º—Å—è –∑–∞–∫—Ä—ã—Ç—å —Å–µ—Å—Å–∏—é
        try:
            await bot.session.close()
        except:
            pass

if __name__ == "__main__":
    asyncio.run(main()) 