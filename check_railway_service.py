#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Railway
–ü–æ–∑–≤–æ–ª—è–µ—Ç –¥–∏–∞–≥–Ω–æ—Å—Ç–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å –¥–µ–ø–ª–æ–µ–º –∏ webhook
"""

import os
import sys
import time
import json
import logging
import requests
from dotenv import load_dotenv
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [CHECK_RAILWAY] - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("railway_check.log")
    ]
)
logger = logging.getLogger("check_railway")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

def check_bot_api():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bot API
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
        response = requests.get(api_url, timeout=10)
        
        if response.status_code == 200 and response.json().get('ok'):
            bot_info = response.json().get('result', {})
            bot_name = bot_info.get('first_name', 'Unknown')
            bot_username = bot_info.get('username', 'Unknown')
            logger.info(f"‚úÖ Bot API –¥–æ—Å—Ç—É–ø–µ–Ω. –ò–º—è –±–æ—Ç–∞: {bot_name}, username: @{bot_username}")
            return bot_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Bot API: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Bot API: {e}")
        return None

def get_webhook_info():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
        response = requests.get(api_url, timeout=10)
        
        if response.status_code == 200 and response.json().get('ok'):
            webhook_info = response.json().get('result', {})
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook: {webhook_info}")
            return webhook_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        return None

def check_railway_env():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –∏ –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ—Å—Ç—å –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
    
    Returns:
        dict: –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
    """
    railway_vars = {
        'RAILWAY_SERVICE_ID': os.environ.get('RAILWAY_SERVICE_ID'),
        'RAILWAY_PROJECT_ID': os.environ.get('RAILWAY_PROJECT_ID'),
        'RAILWAY_PUBLIC_DOMAIN': os.environ.get('RAILWAY_PUBLIC_DOMAIN'),
        'RAILWAY_SERVICE_NAME': os.environ.get('RAILWAY_SERVICE_NAME'),
        'WEBHOOK_URL': os.environ.get('WEBHOOK_URL'),
        'WEBHOOK_HOST': os.environ.get('WEBHOOK_HOST'),
        'PORT': os.environ.get('PORT', '8080')
    }
    
    logger.info("=== –ü–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway ===")
    for key, value in railway_vars.items():
        status = "‚úÖ" if value else "‚ùå"
        masked_value = value if key not in ['WEBHOOK_URL', 'WEBHOOK_HOST'] else f"{value[:15]}..." if value else None
        logger.info(f"{status} {key}: {masked_value}")
    logger.info("===================================")
    
    return railway_vars

def check_railway_service():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Railway
    
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    # –ü–æ–ª—É—á–∞–µ–º URL —Å–µ—Ä–≤–∏—Å–∞
    service_url = None
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º WEBHOOK_URL
    webhook_url = os.environ.get('WEBHOOK_URL')
    if webhook_url:
        from urllib.parse import urlparse
        parsed_url = urlparse(webhook_url)
        if parsed_url.netloc and "healthcheck.railway.app" not in parsed_url.netloc:
            service_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAILWAY_PUBLIC_DOMAIN
    if not service_url:
        railway_public_domain = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
        if railway_public_domain and "healthcheck.railway.app" not in railway_public_domain:
            service_url = f"https://{railway_public_domain}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAILWAY_SERVICE_ID
    if not service_url:
        railway_service_id = os.environ.get('RAILWAY_SERVICE_ID')
        if railway_service_id:
            service_url = f"https://{railway_service_id}.up.railway.app"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
    if not service_url:
        webhook_info = get_webhook_info()
        if webhook_info and webhook_info.get('url'):
            from urllib.parse import urlparse
            parsed_url = urlparse(webhook_info.get('url'))
            if parsed_url.netloc and "healthcheck.railway.app" not in parsed_url.netloc:
                service_url = f"{parsed_url.scheme}://{parsed_url.netloc}"
    
    if not service_url:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —Å–µ—Ä–≤–∏—Å–∞")
        return None
    
    logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ URL: {service_url}")
    
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ—Ä–Ω–µ–≤–æ–π URL
    try:
        root_url = service_url
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL: {root_url}")
        response = requests.get(root_url, timeout=10)
        results['root'] = {
            'url': root_url,
            'status_code': response.status_code,
            'response': response.text[:200] + "..." if len(response.text) > 200 else response.text
        }
        
        if response.status_code == 200:
            logger.info(f"‚úÖ –ö–æ—Ä–Ω–µ–≤–æ–π URL –¥–æ—Å—Ç—É–ø–µ–Ω: {root_url}")
        else:
            logger.warning(f"‚ö†Ô∏è –ö–æ—Ä–Ω–µ–≤–æ–π URL –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {root_url}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∫–æ—Ä–Ω–µ–≤–æ–≥–æ URL: {e}")
        results['root'] = {
            'url': root_url,
            'error': str(e)
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º /health URL
    try:
        health_url = f"{service_url}/health"
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –¥–ª—è health check: {health_url}")
        response = requests.get(health_url, timeout=10)
        results['health'] = {
            'url': health_url,
            'status_code': response.status_code,
            'response': response.text[:200] + "..." if len(response.text) > 200 else response.text
        }
        
        if response.status_code == 200:
            logger.info(f"‚úÖ URL –¥–ª—è health check –¥–æ—Å—Ç—É–ø–µ–Ω: {health_url}")
        else:
            logger.warning(f"‚ö†Ô∏è URL –¥–ª—è health check –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {health_url}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL –¥–ª—è health check: {e}")
        results['health'] = {
            'url': health_url,
            'error': str(e)
        }
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook URL
    webhook_path = f"{service_url}/webhook/{BOT_TOKEN}"
    try:
        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ URL –¥–ª—è webhook: {webhook_path}")
        # –î–ª—è webhook –∏—Å–ø–æ–ª—å–∑—É–µ–º POST, —Ç–∞–∫ –∫–∞–∫ GET –º–æ–∂–µ—Ç –Ω–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å—Å—è
        response = requests.post(webhook_path, json={'test': True}, timeout=10)
        results['webhook'] = {
            'url': webhook_path,
            'status_code': response.status_code,
            'response': response.text[:200] + "..." if len(response.text) > 200 else response.text
        }
        
        if response.status_code in [200, 400, 401, 403]:  # –ü—Ä–∏–µ–º–ª–µ–º—ã–µ –∫–æ–¥—ã –¥–ª—è webhook (400 –º–æ–∂–µ—Ç –æ–∑–Ω–∞—á–∞—Ç—å –Ω–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç —Å–æ–æ–±—â–µ–Ω–∏—è)
            logger.info(f"‚úÖ URL –¥–ª—è webhook –¥–æ—Å—Ç—É–ø–µ–Ω: {webhook_path}")
        else:
            logger.warning(f"‚ö†Ô∏è URL –¥–ª—è webhook –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}: {webhook_path}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ URL –¥–ª—è webhook: {e}")
        results['webhook'] = {
            'url': webhook_path,
            'error': str(e)
        }
    
    return results

def check_webhook_operation():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å webhook
    
    Returns:
        bool: True –µ—Å–ª–∏ webhook —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    webhook_info = get_webhook_info()
    if not webhook_info:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook")
        return False
    
    webhook_url = webhook_info.get('url')
    if not webhook_url:
        logger.warning("‚ö†Ô∏è Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
        return False
    
    last_error = webhook_info.get('last_error_message')
    if last_error:
        logger.warning(f"‚ö†Ô∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ webhook: {last_error}")
        return False
    
    pending_updates = webhook_info.get('pending_update_count', 0)
    logger.info(f"‚ÑπÔ∏è –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {pending_updates}")
    
    if "healthcheck.railway.app" in webhook_url:
        logger.error(f"‚ùå Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –Ω–∞ healthcheck.railway.app: {webhook_url}")
        return False
    
    logger.info(f"‚úÖ Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ: {webhook_url}")
    return True

def send_test_message(chat_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    
    Args:
        chat_id (str, optional): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ADMIN_CHAT_ID.
        
    Returns:
        dict: –†–µ–∑—É–ª—å—Ç–∞—Ç –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    if not chat_id:
        chat_id = os.environ.get('ADMIN_CHAT_ID')
        if not chat_id:
            logger.warning("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω ADMIN_CHAT_ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return None
    
    logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
    
    try:
        api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        data = {
            'chat_id': chat_id,
            'text': "ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç —Å–∫—Ä–∏–ø—Ç–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏ Railway. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –±–æ—Ç–∞."
        }
        
        response = requests.post(api_url, json=data, timeout=10)
        
        if response.status_code == 200 and response.json().get('ok'):
            message_info = response.json().get('result', {})
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return message_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return None

def generate_report(results):
    """
    –ì–µ–Ω–µ—Ä–∏—Ä—É–µ—Ç –æ—Ç—á–µ—Ç –æ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞—Ö –ø—Ä–æ–≤–µ—Ä–∫–∏
    
    Args:
        results (dict): –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏
        
    Returns:
        str: –û—Ç—á–µ—Ç –≤ —Ñ–æ—Ä–º–∞—Ç–µ —Ç–µ–∫—Å—Ç–∞
    """
    report = "=== –û–¢–ß–ï–¢ –û –°–û–°–¢–û–Ø–ù–ò–ò –ë–û–¢–ê –ò RAILWAY –°–ï–†–í–ò–°–ê ===\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ –±–æ—Ç–µ
    bot_info = results.get('bot_info')
    if bot_info:
        report += f"–ë–û–¢: {bot_info.get('first_name')} (@{bot_info.get('username')})\n"
        report += f"ID –±–æ—Ç–∞: {bot_info.get('id')}\n"
        report += f"–ü–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ—Ç Inline: {bot_info.get('supports_inline_queries', False)}\n\n"
    else:
        report += "–ë–û–¢: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook
    webhook_info = results.get('webhook_info')
    if webhook_info:
        report += f"WEBHOOK URL: {webhook_info.get('url')}\n"
        report += f"–û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {webhook_info.get('pending_update_count', 0)}\n"
        report += f"–ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.get('last_error_message', '–Ω–µ—Ç')}\n"
        report += f"–ú–∞–∫—Å–∏–º–∞–ª—å–Ω—ã–µ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è: {webhook_info.get('max_connections', 40)}\n\n"
    else:
        report += "WEBHOOK: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –Ω–µ –¥–æ—Å—Ç—É–ø–Ω–∞\n\n"
    
    # –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Railway
    railway_env = results.get('railway_env', {})
    report += "RAILWAY –ü–ï–†–ï–ú–ï–ù–ù–´–ï –û–ö–†–£–ñ–ï–ù–ò–Ø:\n"
    for key, value in railway_env.items():
        if key in ['WEBHOOK_URL', 'WEBHOOK_HOST']:
            masked_value = f"{value[:15]}..." if value else "–Ω–µ –∑–∞–¥–∞–Ω–æ"
            report += f"- {key}: {masked_value}\n"
        else:
            report += f"- {key}: {value or '–Ω–µ –∑–∞–¥–∞–Ω–æ'}\n"
    report += "\n"
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–µ—Ä–≤–∏—Å–∞
    service_results = results.get('service_results', {})
    if service_results:
        report += "–ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–ê:\n"
        
        # –ö–æ—Ä–Ω–µ–≤–æ–π URL
        root_check = service_results.get('root', {})
        if 'error' in root_check:
            report += f"- –ö–æ—Ä–Ω–µ–≤–æ–π URL ({root_check.get('url')}): –û–®–ò–ë–ö–ê - {root_check.get('error')}\n"
        else:
            report += f"- –ö–æ—Ä–Ω–µ–≤–æ–π URL ({root_check.get('url')}): –∫–æ–¥ {root_check.get('status_code')}\n"
        
        # Health URL
        health_check = service_results.get('health', {})
        if 'error' in health_check:
            report += f"- Health URL ({health_check.get('url')}): –û–®–ò–ë–ö–ê - {health_check.get('error')}\n"
        else:
            report += f"- Health URL ({health_check.get('url')}): –∫–æ–¥ {health_check.get('status_code')}\n"
        
        # Webhook URL
        webhook_check = service_results.get('webhook', {})
        if 'error' in webhook_check:
            report += f"- Webhook URL ({webhook_check.get('url')}): –û–®–ò–ë–ö–ê - {webhook_check.get('error')}\n"
        else:
            report += f"- Webhook URL ({webhook_check.get('url')}): –∫–æ–¥ {webhook_check.get('status_code')}\n"
    else:
        report += "–ü–†–û–í–ï–†–ö–ê –°–ï–†–í–ò–°–ê: –ù–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞\n"
    
    report += "\n"
    
    # –†–µ–∑—É–ª—å—Ç–∞—Ç—ã —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    test_message = results.get('test_message')
    if test_message:
        report += "–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï: –£—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
        report += f"- Message ID: {test_message.get('message_id')}\n"
        report += f"- –î–∞—Ç–∞ –æ—Ç–ø—Ä–∞–≤–∫–∏: {test_message.get('date')}\n"
    else:
        report += "–¢–ï–°–¢–û–í–û–ï –°–û–û–ë–©–ï–ù–ò–ï: –ù–µ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ\n"
    
    report += "\n"
    
    # –ó–∞–∫–ª—é—á–µ–Ω–∏–µ
    webhook_operation = results.get('webhook_operation', False)
    if webhook_operation:
        report += "‚úÖ –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ –∏ —Ä–∞–±–æ—Ç–∞–µ—Ç\n"
    else:
        report += "‚ùå –ó–ê–ö–õ–Æ–ß–ï–ù–ò–ï: Webhook –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç –∏–ª–∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ\n"
    
    return report

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Å–∫—Ä–∏–ø—Ç–∞
    """
    parser = argparse.ArgumentParser(description='–°–∫—Ä–∏–ø—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Railway')
    parser.add_argument('--fix', action='store_true', help='–ò—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å webhook')
    parser.add_argument('--test', action='store_true', help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    parser.add_argument('--chat-id', type=str, help='ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
    parser.add_argument('--report', action='store_true', help='–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –æ—Ç—á–µ—Ç')
    parser.add_argument('--output', type=str, help='–ü—É—Ç—å –∫ —Ñ–∞–π–ª—É –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –æ—Ç—á–µ—Ç–∞')
    args = parser.parse_args()
    
    logger.info("=== –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ—Å—Ç–æ—è–Ω–∏—è Railway —Å–µ—Ä–≤–∏—Å–∞ ===")
    
    # –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã –≤—Å–µ—Ö –ø—Ä–æ–≤–µ—Ä–æ–∫
    results = {}
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Bot API
    results['bot_info'] = check_bot_api()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook
    results['webhook_info'] = get_webhook_info()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    results['railway_env'] = check_railway_env()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–µ—Ä–≤–∏—Å–∞
    results['service_results'] = check_railway_service()
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç—ã webhook
    results['webhook_operation'] = check_webhook_operation()
    
    # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if args.test or args.chat_id:
        results['test_message'] = send_test_message(args.chat_id)
    
    # –ì–µ–Ω–µ—Ä–∞—Ü–∏—è –æ—Ç—á–µ—Ç–∞
    if args.report or args.output:
        report = generate_report(results)
        logger.info(f"\n{report}")
        
        if args.output:
            try:
                with open(args.output, 'w', encoding='utf-8') as f:
                    f.write(report)
                logger.info(f"‚úÖ –û—Ç—á–µ—Ç —Å–æ—Ö—Ä–∞–Ω–µ–Ω –≤ —Ñ–∞–π–ª: {args.output}")
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–∏ –æ—Ç—á–µ—Ç–∞ –≤ —Ñ–∞–π–ª: {e}")
    
    # –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å webhook
    if args.fix and not results.get('webhook_operation', False):
        logger.info("üîÑ –ò—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–±–ª–µ–º —Å webhook...")
        
        from railway_fix import setup_webhook
        setup_webhook()
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        results['webhook_info_after_fix'] = get_webhook_info()
        results['webhook_operation_after_fix'] = check_webhook_operation()
        
        if results.get('webhook_operation_after_fix', False):
            logger.info("‚úÖ –ü—Ä–æ–±–ª–µ–º—ã —Å webhook —É—Å–ø–µ—à–Ω–æ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω—ã")
        else:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∏—Å–ø—Ä–∞–≤–∏—Ç—å –ø—Ä–æ–±–ª–µ–º—ã —Å webhook")
    
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–æ—Å—Ç–æ—è–Ω–∏—è Railway —Å–µ—Ä–≤–∏—Å–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞ ===")

if __name__ == "__main__":
    main() 