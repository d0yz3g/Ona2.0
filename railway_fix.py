#!/usr/bin/env python
"""
–°–∫—Ä–∏–ø—Ç –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø–µ—Ä–µ–∑–∞–ø—É—Å–∫–∞ –±–æ—Ç–∞ –Ω–∞ Railway
–†–µ—à–∞–µ—Ç –ø—Ä–æ–±–ª–µ–º—ã —Å webhook –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –±–æ—Ç–∞
"""

import os
import sys
import time
import json
import logging
import requests
from dotenv import load_dotenv
import asyncio
import aiohttp
import argparse

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [RAILWAY_FIX] - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout),
        logging.FileHandler("railway_fix.log")
    ]
)
logger = logging.getLogger("railway_fix")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.environ.get('BOT_TOKEN')
if not BOT_TOKEN:
    logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞. –£–∫–∞–∂–∏—Ç–µ BOT_TOKEN –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

def get_webhook_info():
    """
    –ü–æ–ª—É—á–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ç–µ–∫—É—â–µ–º webhook
    
    Returns:
        dict: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook –∏–ª–∏ None –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
    """
    try:
        api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
        response = requests.get(api_url, timeout=10)
        
        if response.status_code == 200 and response.json().get('ok'):
            webhook_info = response.json().get('result', {})
            logger.info(f"‚úÖ –ü–æ–ª—É—á–µ–Ω–∞ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ webhook: {webhook_info}")
            return webhook_info
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {response.text}")
            return None
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
        return None

def get_railway_service_url():
    """
    –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç URL –¥–ª—è —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Railway, –∏–∑–±–µ–≥–∞—è healthcheck.railway.app
    
    Returns:
        str: URL —Å–µ—Ä–≤–∏—Å–∞ –∏–ª–∏ None –µ—Å–ª–∏ –Ω–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å
    """
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è Railway
    railway_service_id = os.environ.get('RAILWAY_SERVICE_ID')
    railway_project_id = os.environ.get('RAILWAY_PROJECT_ID')
    railway_public_domain = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
    
    logger.info("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Railway ===")
    logger.info(f"RAILWAY_SERVICE_ID: {railway_service_id}")
    logger.info(f"RAILWAY_PROJECT_ID: {railway_project_id}")
    logger.info(f"RAILWAY_PUBLIC_DOMAIN: {railway_public_domain}")
    logger.info("==========================")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º RAILWAY_PUBLIC_DOMAIN
    if railway_public_domain and "healthcheck.railway.app" not in railway_public_domain:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º RAILWAY_PUBLIC_DOMAIN: {railway_public_domain}")
        return f"https://{railway_public_domain}"
    
    # –ï—Å–ª–∏ –µ—Å—Ç—å RAILWAY_SERVICE_ID, —Ñ–æ—Ä–º–∏—Ä—É–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ –Ω–µ–≥–æ
    if railway_service_id:
        service_url = f"https://{railway_service_id}.up.railway.app"
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º URL –Ω–∞ –æ—Å–Ω–æ–≤–µ RAILWAY_SERVICE_ID: {service_url}")
        return service_url
    
    # –ü—ã—Ç–∞–µ–º—Å—è –ø–æ–ª—É—á–∏—Ç—å URL –∏–∑ –¥—Ä—É–≥–∏—Ö –∏—Å—Ç–æ—á–Ω–∏–∫–æ–≤
    webhook_host = os.environ.get('WEBHOOK_HOST')
    if webhook_host and "healthcheck.railway.app" not in webhook_host:
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º WEBHOOK_HOST: {webhook_host}")
        return f"https://{webhook_host}"
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø—Ä—è–º–æ–µ —É–∫–∞–∑–∞–Ω–∏–µ WEBHOOK_URL
    webhook_url_env = os.environ.get('WEBHOOK_URL')
    if webhook_url_env:
        try:
            from urllib.parse import urlparse
            parsed_url = urlparse(webhook_url_env)
            if parsed_url.netloc and "healthcheck.railway.app" not in parsed_url.netloc:
                logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω –∏–∑ WEBHOOK_URL: {parsed_url.netloc}")
                return f"{parsed_url.scheme}://{parsed_url.netloc}"
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞ –∏–∑ WEBHOOK_URL: {e}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–π webhook (–≤–æ–∑–º–æ–∂–Ω–æ, —Ç–∞–º —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω—ã–π URL)
    webhook_info = get_webhook_info()
    if webhook_info and webhook_info.get('url'):
        webhook_url = webhook_info.get('url')
        # –ò–∑–≤–ª–µ–∫–∞–µ–º –¥–æ–º–µ–Ω –∏–∑ URL
        if webhook_url and "healthcheck.railway.app" not in webhook_url:
            try:
                from urllib.parse import urlparse
                parsed_url = urlparse(webhook_url)
                domain = parsed_url.netloc
                if domain:
                    logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ–º –¥–æ–º–µ–Ω –∏–∑ —Ç–µ–∫—É—â–µ–≥–æ webhook URL: {domain}")
                    return f"{parsed_url.scheme}://{domain}"
            except Exception as e:
                logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–≤–ª–µ—á–µ–Ω–∏–∏ –¥–æ–º–µ–Ω–∞ –∏–∑ webhook URL: {e}")
    
    # –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ
    logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —Å–µ—Ä–≤–∏—Å–∞ Railway")
    return None

def setup_webhook(webhook_url=None, drop_pending_updates=True):
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è –±–æ—Ç–∞
    
    Args:
        webhook_url (str, optional): URL –¥–ª—è webhook. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏.
        drop_pending_updates (bool): –°–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∏ –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not webhook_url:
        # –ü—ã—Ç–∞–µ–º—Å—è –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —Å–µ—Ä–≤–∏—Å–∞
        service_url = get_railway_service_url()
        if not service_url:
            logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è webhook")
            return False
        
        webhook_url = f"{service_url}/webhook/{BOT_TOKEN}"
    
    logger.info(f"üîÑ –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook –Ω–∞ URL: {webhook_url}")
    
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π webhook
    try:
        delete_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook?drop_pending_updates={str(drop_pending_updates).lower()}"
        delete_response = requests.get(delete_url, timeout=10)
        
        if delete_response.status_code == 200 and delete_response.json().get('ok'):
            logger.info("‚úÖ –¢–µ–∫—É—â–∏–π webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π webhook: {delete_response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
    
    # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –Ω–æ–≤—ã–π webhook
    try:
        api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
        
        data = {
            'url': webhook_url,
            'allowed_updates': ['message', 'callback_query', 'inline_query'],
            'drop_pending_updates': drop_pending_updates,
            'secret_token': os.environ.get('WEBHOOK_SECRET', 'telegram_webhook_secret')
        }
        
        response = requests.post(api_url, json=data, timeout=10)
        
        if response.status_code == 200 and response.json().get('ok'):
            logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {response.json().get('description')}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webhook –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            webhook_info = get_webhook_info()
            
            if webhook_info and webhook_info.get('url') == webhook_url:
                logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –ø—Ä–æ–≤–µ—Ä–µ–Ω –∏ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –ø—Ä–∞–≤–∏–ª—å–Ω–æ")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è Webhook —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω, –Ω–æ URL –Ω–µ —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É–µ—Ç –æ–∂–∏–¥–∞–µ–º–æ–º—É: {webhook_info.get('url', 'None')}")
                return False
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {e}")
        return False

def disable_webhook(drop_pending_updates=True):
    """
    –û—Ç–∫–ª—é—á–∞–µ—Ç webhook
    
    Args:
        drop_pending_updates (bool): –°–±—Ä–∞—Å—ã–≤–∞—Ç—å –ª–∏ –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        
    Returns:
        bool: True –µ—Å–ª–∏ webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    logger.info(f"üîÑ –û—Ç–∫–ª—é—á–∞–µ–º webhook (—Å–±—Ä–æ—Å –Ω–∞–∫–æ–ø–∏–≤—à–∏—Ö—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π: {drop_pending_updates})")
    
    try:
        delete_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook?drop_pending_updates={str(drop_pending_updates).lower()}"
        delete_response = requests.get(delete_url, timeout=10)
        
        if delete_response.status_code == 200 and delete_response.json().get('ok'):
            logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ webhook –¥–µ–π—Å—Ç–≤–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω
            time.sleep(1)  # –î–∞–µ–º –≤—Ä–µ–º—è –Ω–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏–µ –∏–∑–º–µ–Ω–µ–Ω–∏–π
            webhook_info = get_webhook_info()
            
            if webhook_info and not webhook_info.get('url'):
                logger.info("‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥—Ç–≤–µ—Ä–¥–∏–ª–∞, —á—Ç–æ webhook –æ—Ç–∫–ª—é—á–µ–Ω")
                return True
            else:
                logger.warning(f"‚ö†Ô∏è –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–∫–∞–∑–∞–ª–∞, —á—Ç–æ webhook –≤—Å—ë –µ—â–µ –∞–∫—Ç–∏–≤–µ–Ω: {webhook_info.get('url', 'None')}")
                return False
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ webhook: {delete_response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–∫–ª—é—á–µ–Ω–∏–∏ webhook: {e}")
        return False

def test_bot_api():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å Bot API
    
    Returns:
        bool: True –µ—Å–ª–∏ API –¥–æ—Å—Ç—É–ø–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
        response = requests.get(api_url, timeout=10)
        
        if response.status_code == 200 and response.json().get('ok'):
            bot_info = response.json().get('result', {})
            bot_name = bot_info.get('first_name', 'Unknown')
            bot_username = bot_info.get('username', 'Unknown')
            logger.info(f"‚úÖ Bot API –¥–æ—Å—Ç—É–ø–µ–Ω. –ò–º—è –±–æ—Ç–∞: {bot_name}, username: @{bot_username}")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Bot API: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ Bot API: {e}")
        return False

def check_railway_service():
    """
    –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Railway
    
    Returns:
        bool: True –µ—Å–ª–∏ —Å–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    service_url = get_railway_service_url()
    if not service_url:
        logger.error("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL —Å–µ—Ä–≤–∏—Å–∞ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏")
        return False
    
    health_url = f"{service_url}/health"
    logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ URL: {health_url}")
    
    try:
        response = requests.get(health_url, timeout=10)
        logger.info(f"‚úÖ –û—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–∏—Å–∞: –∫–æ–¥ {response.status_code}, —Ç–µ–ª–æ: {response.text[:200]}...")
        
        if response.status_code == 200:
            logger.info("‚úÖ –°–µ—Ä–≤–∏—Å –¥–æ—Å—Ç—É–ø–µ–Ω –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç 200 OK")
            return True
        else:
            logger.warning(f"‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –≤–µ—Ä–Ω—É–ª –∫–æ–¥ {response.status_code}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞: {e}")
        return False

def send_test_message(chat_id=None):
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –∏–º–µ–Ω–∏ –±–æ—Ç–∞
    
    Args:
        chat_id (str, optional): ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Å–æ–æ–±—â–µ–Ω–∏—è. –ï—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω ADMIN_CHAT_ID.
        
    Returns:
        bool: True –µ—Å–ª–∏ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    if not chat_id:
        chat_id = os.environ.get('ADMIN_CHAT_ID')
        if not chat_id:
            logger.warning("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω ADMIN_CHAT_ID –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è")
            return False
    
    logger.info(f"üîÑ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ —á–∞—Ç {chat_id}")
    
    try:
        api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
        
        data = {
            'chat_id': chat_id,
            'text': "ü§ñ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –±–æ—Ç–∞. –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –ø–æ—Å–ª–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook."
        }
        
        response = requests.post(api_url, json=data, timeout=10)
        
        if response.status_code == 200 and response.json().get('ok'):
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
            return False
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
        return False

async def webhook_test_loop():
    """
    –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω—ã–π —Ü–∏–∫–ª –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è —Ä–∞–±–æ—Ç—ã webhook
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Å–æ–æ–±—â–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä—è–µ—Ç –æ—Ç–≤–µ—Ç—ã –Ω–∞ –Ω–∏—Ö
    """
    logger.info("üîÑ –ó–∞–ø—É—Å–∫ –∞—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–≥–æ —Ç–µ—Å—Ç–∞ webhook...")
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ –∫–æ–º–∞–Ω–¥—ã –∏ –ø—Ä–æ–≤–µ—Ä—è–µ–º –æ—Ç–≤–µ—Ç—ã
    commands = ['/start', '/help', '/about']
    admin_id = os.environ.get('ADMIN_CHAT_ID')
    
    if not admin_id:
        logger.warning("‚ö†Ô∏è –ù–µ —É–∫–∞–∑–∞–Ω ADMIN_CHAT_ID –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è –∫–æ–º–∞–Ω–¥")
        return
    
    for command in commands:
        logger.info(f"üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∫–æ–º–∞–Ω–¥—ã: {command}")
        
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∫–æ–º–∞–Ω–¥—É
            api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
            data = {
                'chat_id': admin_id,
                'text': command
            }
            
            async with aiohttp.ClientSession() as session:
                async with session.post(api_url, json=data, timeout=10) as response:
                    response_json = await response.json()
                    
                    if response.status == 200 and response_json.get('ok'):
                        logger.info(f"‚úÖ –ö–æ–º–∞–Ω–¥–∞ {command} —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞")
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –∫–æ–º–∞–Ω–¥—ã {command}: {await response.text()}")
            
            # –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ, —á—Ç–æ–±—ã –±–æ—Ç —É—Å–ø–µ–ª –æ–±—Ä–∞–±–æ—Ç–∞—Ç—å –∫–æ–º–∞–Ω–¥—É
            await asyncio.sleep(2)
            
        except Exception as e:
            logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∫–æ–º–∞–Ω–¥—ã {command}: {e}")
    
    logger.info("‚úÖ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook –∑–∞–≤–µ—Ä—à–µ–Ω–æ")

def main():
    """
    –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ –±–æ—Ç–∞
    """
    # –ü–∞—Ä—Å–∏–Ω–≥ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤ –∫–æ–º–∞–Ω–¥–Ω–æ–π —Å—Ç—Ä–æ–∫–∏
    parser = argparse.ArgumentParser(description='–£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –∏ –ø—Ä–æ–≤–µ—Ä–∫–∏ Telegram –±–æ—Ç–∞ –Ω–∞ Railway')
    parser.add_argument('--disable-webhook', action='store_true', help='–û—Ç–∫–ª—é—á–∏—Ç—å webhook –¥–ª—è –ø–µ—Ä–µ—Ö–æ–¥–∞ –≤ —Ä–µ–∂–∏–º polling')
    parser.add_argument('--set-webhook', action='store_true', help='–£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é)')
    parser.add_argument('--webhook-url', type=str, help='URL –¥–ª—è webhook (–µ—Å–ª–∏ –Ω–µ —É–∫–∞–∑–∞–Ω, –±—É–¥–µ—Ç –æ–ø—Ä–µ–¥–µ–ª–µ–Ω –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏)')
    parser.add_argument('--drop-updates', action='store_true', help='–°–±—Ä–æ—Å–∏—Ç—å –Ω–∞–∫–æ–ø–∏–≤—à–∏–µ—Å—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è')
    parser.add_argument('--test-message', action='store_true', help='–û—Ç–ø—Ä–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ')
    parser.add_argument('--chat-id', type=str, help='ID —á–∞—Ç–∞ –¥–ª—è –æ—Ç–ø—Ä–∞–≤–∫–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è')
    parser.add_argument('--check-service', action='store_true', help='–ü—Ä–æ–≤–µ—Ä–∏—Ç—å –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Railway')
    args = parser.parse_args()
    
    logger.info("=== –ù–∞—á–∞–ª–æ –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏—è –±–æ—Ç–∞ ===")
    
    # –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ Bot API
    if not test_bot_api():
        logger.error("‚ùå Bot API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω. –ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ç–æ–∫–µ–Ω –±–æ—Ç–∞ –∏ –¥–æ—Å—Ç—É–ø –∫ Telegram API")
        return
    
    # –®–∞–≥ 2: –û—Ç–∫–ª—é—á–µ–Ω–∏–µ webhook (–µ—Å–ª–∏ –∑–∞–ø—Ä–æ—à–µ–Ω–æ)
    if args.disable_webhook:
        logger.info("üîÑ –û—Ç–∫–ª—é—á–µ–Ω–∏–µ webhook –ø–æ –∑–∞–ø—Ä–æ—Å—É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è")
        if disable_webhook(drop_pending_updates=args.drop_updates):
            logger.info("‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫–ª—é—á–µ–Ω. –¢–µ–ø–µ—Ä—å –≤—ã –º–æ–∂–µ—Ç–µ –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–æ—Ç–∞ –≤ —Ä–µ–∂–∏–º–µ polling")
            
            # –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
            if args.test_message or args.chat_id:
                send_test_message(args.chat_id)
            
            return
    
    # –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–µ–∫—É—â–µ–≥–æ webhook
    webhook_info = get_webhook_info()
    if webhook_info:
        webhook_url = webhook_info.get('url')
        last_error = webhook_info.get('last_error_message')
        
        if args.set_webhook or not args.disable_webhook:
            if webhook_url and "healthcheck.railway.app" in webhook_url:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π webhook URL: {webhook_url}")
                logger.info("üîÑ –ù–µ–æ–±—Ö–æ–¥–∏–º–æ –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–æ–≤–∏—Ç—å webhook")
                setup_webhook(args.webhook_url, drop_pending_updates=args.drop_updates)
            elif last_error:
                logger.warning(f"‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω–∞ –æ—à–∏–±–∫–∞ –≤ —Ä–∞–±–æ—Ç–µ webhook: {last_error}")
                logger.info("üîÑ –ü–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook –¥–ª—è —É—Å—Ç—Ä–∞–Ω–µ–Ω–∏—è –æ—à–∏–±–∫–∏")
                setup_webhook(args.webhook_url, drop_pending_updates=args.drop_updates)
            elif not webhook_url:
                logger.warning("‚ö†Ô∏è Webhook –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω")
                logger.info("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook")
                setup_webhook(args.webhook_url, drop_pending_updates=args.drop_updates)
            else:
                logger.info(f"‚úÖ Webhook —É–∂–µ –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ URL: {webhook_url}")
    else:
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook")
        if args.set_webhook or not args.disable_webhook:
            logger.info("üîÑ –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º webhook")
            setup_webhook(args.webhook_url, drop_pending_updates=args.drop_updates)
    
    # –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–∞ –Ω–∞ Railway
    if args.check_service:
        if not check_railway_service():
            logger.warning("‚ö†Ô∏è –°–µ—Ä–≤–∏—Å –Ω–∞ Railway –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω –∏–ª–∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –æ—à–∏–±–∫—É")
            logger.info("üîÑ –ü—Ä–æ–≤–µ—Ä—å—Ç–µ –¥–µ–ø–ª–æ–π –Ω–∞ Railway –∏ –ª–æ–≥–∏ —Å–µ—Ä–≤–∏—Å–∞")
    
    # –®–∞–≥ 5: –û—Ç–ø—Ä–∞–≤–∫–∞ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è
    if args.test_message or args.chat_id:
        send_test_message(args.chat_id)
    
    # –®–∞–≥ 6: –ê—Å–∏–Ω—Ö—Ä–æ–Ω–Ω–æ–µ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ webhook
    if args.set_webhook or not args.disable_webhook:
        asyncio.run(webhook_test_loop())
    
    logger.info("=== –ü—Ä–æ–≤–µ—Ä–∫–∞ –∏ –∏—Å–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –±–æ—Ç–∞ –∑–∞–≤–µ—Ä—à–µ–Ω—ã ===")

if __name__ == "__main__":
    main() 