#!/usr/bin/env python
"""
–í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–π –º–æ–¥—É–ª—å –¥–ª—è –æ–±–µ—Å–ø–µ—á–µ–Ω–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–π —Ä–∞–±–æ—Ç—ã –±–æ—Ç–∞ –≤ Railway.
–ü—Ä–µ–¥–æ—Å—Ç–∞–≤–ª—è–µ—Ç —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏, –ø—Ä–æ–≤–µ—Ä–∫–∏ –∏ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è –º–æ–¥—É–ª–µ–π.
"""

import os
import sys
import importlib
import logging
import pkgutil
import inspect
from pathlib import Path
from typing import List, Dict, Any, Optional, Tuple

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [RAILWAY_HELPER] - %(levelname)s - %(message)s",
    handlers=[
        logging.StreamHandler(sys.stdout)
    ]
)
logger = logging.getLogger("railway_helper")

class RailwayHelper:
    """
    –ö–ª–∞—Å—Å –¥–ª—è –ø–æ–º–æ—â–∏ –≤ —Ä–∞–±–æ—Ç–µ —Å Railway.
    –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω—É—é –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é –∏ —Ä–∞–±–æ—Ç—É –±–æ—Ç–∞ –≤ Railway.
    """
    
    def __init__(self):
        """
        –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è Railway Helper.
        """
        self.is_railway = os.environ.get('RAILWAY_ENVIRONMENT', '') != ''
        logger.info(f"Railway Environment: {'–î–∞' if self.is_railway else '–ù–µ—Ç'}")
        
        # –î–æ–±–∞–≤–ª—è–µ–º —Ç–µ–∫—É—â—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –≤ sys.path
        current_dir = os.path.dirname(os.path.abspath(__file__))
        if current_dir not in sys.path:
            sys.path.insert(0, current_dir)
            logger.info(f"–î–æ–±–∞–≤–ª–µ–Ω –ø—É—Ç—å {current_dir} –≤ sys.path")
    
    def check_environment(self) -> Dict[str, Any]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –æ–∫—Ä—É–∂–µ–Ω–∏–µ Railway –∏ –≤–æ–∑–≤—Ä–∞—â–∞–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –Ω–µ–º.
        
        Returns:
            Dict[str, Any]: –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ–∫—Ä—É–∂–µ–Ω–∏–∏
        """
        env_info = {
            "is_railway": self.is_railway,
            "python_version": sys.version,
            "working_directory": os.getcwd(),
            "sys_path": sys.path,
            "environment_variables": {k: v for k, v in os.environ.items() if not k.startswith('_')},
            "python_modules": [m for m, _ in pkgutil.iter_modules()]
        }
        
        logger.info(f"–¢–µ–∫—É—â–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {env_info['working_directory']}")
        logger.info(f"Python –≤–µ—Ä—Å–∏—è: {env_info['python_version']}")
        
        return env_info
    
    def check_modules(self, required_modules: List[str]) -> Dict[str, bool]:
        """
        –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π.
        
        Args:
            required_modules: –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
            
        Returns:
            Dict[str, bool]: –°–ª–æ–≤–∞—Ä—å —Å —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞–º–∏ –ø—Ä–æ–≤–µ—Ä–∫–∏
        """
        results = {}
        
        for module_name in required_modules:
            try:
                module = importlib.import_module(module_name)
                results[module_name] = True
                logger.info(f"–ú–æ–¥—É–ª—å {module_name} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω")
            except ImportError as e:
                results[module_name] = False
                logger.error(f"–û—à–∏–±–∫–∞ –∏–º–ø–æ—Ä—Ç–∞ –º–æ–¥—É–ª—è {module_name}: {e}")
        
        return results
    
    def create_placeholder_router(self, module_name: str) -> None:
        """
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫—É –¥–ª—è —Ä–æ—É—Ç–µ—Ä–∞ –º–æ–¥—É–ª—è.
        
        Args:
            module_name: –ò–º—è –º–æ–¥—É–ª—è
        """
        file_name = f"{module_name}.py"
        
        if os.path.exists(file_name):
            logger.info(f"–§–∞–π–ª {file_name} —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç, –ø—Ä–æ–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–≥–ª—É—à–∫–∏")
            return
        
        try:
            with open(file_name, "w") as f:
                f.write(f"""# Placeholder module for {file_name} created by railway_helper.py
import logging
from aiogram import Router

logger = logging.getLogger(__name__)
{module_name}_router = Router(name="{module_name}")

# Minimal functions required by main.py
def get_main_keyboard():
    from aiogram.types import ReplyKeyboardMarkup, KeyboardButton
    return ReplyKeyboardMarkup(
        keyboard=[
            [KeyboardButton(text="üìù –û–ø—Ä–æ—Å"), KeyboardButton(text="üë§ –ü—Ä–æ—Ñ–∏–ª—å")],
            [KeyboardButton(text="üßò –ú–µ–¥–∏—Ç–∞—Ü–∏–∏"), KeyboardButton(text="‚è∞ –ù–∞–ø–æ–º–∏–Ω–∞–Ω–∏—è")],
            [KeyboardButton(text="üí° –°–æ–≤–µ—Ç—ã"), KeyboardButton(text="üí¨ –ü–æ–º–æ—â—å")],
        ],
        resize_keyboard=True
    )

# Additional variables
scheduler = None
""")
            logger.info(f"–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è {file_name} —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–∞")
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è {file_name}: {e}")
    
    def ensure_modules_available(self, modules: List[str]) -> None:
        """
        –û–±–µ—Å–ø–µ—á–∏–≤–∞–µ—Ç –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –≤—Å–µ—Ö –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π.
        –°–æ–∑–¥–∞–µ—Ç –∑–∞–≥–ª—É—à–∫–∏ –¥–ª—è –æ—Ç—Å—É—Ç—Å—Ç–≤—É—é—â–∏—Ö –º–æ–¥—É–ª–µ–π.
        
        Args:
            modules: –°–ø–∏—Å–æ–∫ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
        """
        for module_name in modules:
            try:
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –º–æ–¥—É–ª—å
                importlib.import_module(module_name)
                logger.info(f"–ú–æ–¥—É–ª—å {module_name} —É–∂–µ –¥–æ—Å—Ç—É–ø–µ–Ω")
            except ImportError:
                # –ï—Å–ª–∏ –Ω–µ –ø–æ–ª—É—á–∞–µ—Ç—Å—è, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É
                logger.warning(f"–ú–æ–¥—É–ª—å {module_name} –Ω–µ –Ω–∞–π–¥–µ–Ω, —Å–æ–∑–¥–∞–µ–º –∑–∞–≥–ª—É—à–∫—É")
                self.create_placeholder_router(module_name)
                
                # –ü—ã—Ç–∞–µ–º—Å—è –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Å–æ–∑–¥–∞–Ω–Ω—É—é –∑–∞–≥–ª—É—à–∫—É
                try:
                    importlib.import_module(module_name)
                    logger.info(f"–ó–∞–≥–ª—É—à–∫–∞ –¥–ª—è –º–æ–¥—É–ª—è {module_name} —É—Å–ø–µ—à–Ω–æ –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞–Ω–∞")
                except ImportError as e:
                    logger.error(f"–ù–µ —É–¥–∞–ª–æ—Å—å –∏–º–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å –∑–∞–≥–ª—É—à–∫—É –¥–ª—è –º–æ–¥—É–ª—è {module_name}: {e}")
    
    @staticmethod
    def print_railway_info(message: str, level: str = "INFO") -> None:
        """
        –í—ã–≤–æ–¥–∏—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –≤ Railway-friendly —Ñ–æ—Ä–º–∞—Ç–µ.
        
        Args:
            message: –°–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –≤—ã–≤–æ–¥–∞
            level: –£—Ä–æ–≤–µ–Ω—å —Å–æ–æ–±—â–µ–Ω–∏—è (INFO, ERROR, WARNING, DEBUG)
        """
        prefix = "–ò–ù–§–û"
        if level.upper() == "ERROR":
            prefix = "–û–®–ò–ë–ö–ê"
        elif level.upper() == "WARNING":
            prefix = "–ü–†–ï–î–£–ü–†–ï–ñ–î–ï–ù–ò–ï"
        elif level.upper() == "DEBUG":
            prefix = "–û–¢–õ–ê–î–ö–ê"
        
        print(f"{prefix}: {message}")
        sys.stdout.flush()

# –°–æ–∑–¥–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Railway Helper
railway_helper = RailwayHelper()

# –≠–∫—Å–ø–æ—Ä—Ç–∏—Ä—É–µ–º —Ñ—É–Ω–∫—Ü–∏–∏ –¥–ª—è —É–¥–æ–±–Ω–æ–≥–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
check_environment = railway_helper.check_environment
check_modules = railway_helper.check_modules
ensure_modules_available = railway_helper.ensure_modules_available
print_railway_info = railway_helper.print_railway_info

if __name__ == "__main__":
    # –ï—Å–ª–∏ –∑–∞–ø—É—â–µ–Ω –Ω–∞–ø—Ä—è–º—É—é, –≤—ã–ø–æ–ª–Ω—è–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
    print("=" * 50)
    print("–ó–ê–ü–£–°–ö RAILWAY HELPER")
    print("=" * 50)
    
    env_info = railway_helper.check_environment()
    
    print_railway_info(f"Python –≤–µ—Ä—Å–∏—è: {env_info['python_version']}")
    print_railway_info(f"–†–∞–±–æ—á–∞—è –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—è: {env_info['working_directory']}")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –æ–±–µ—Å–ø–µ—á–∏–≤–∞–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã—Ö –º–æ–¥—É–ª–µ–π
    required_modules = [
        "survey_handler",
        "meditation_handler",
        "conversation_handler",
        "reminder_handler",
        "voice_handler"
    ]
    
    ensure_modules_available(required_modules)
    
    print("=" * 50)
    print("–ó–ê–í–ï–†–®–ï–ù–ò–ï RAILWAY HELPER")
    print("=" * 50) 