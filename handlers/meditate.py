import logging
from typing import Optional

from aiogram import Router, F
from aiogram.types import Message, FSInputFile
from aiogram.filters import Command

from services.tts import generate_voice, delete_voice_file, MEDITATION_TEXTS

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ª–æ–≥–≥–µ—Ä–∞
logger = logging.getLogger(__name__)

# –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è —Ä–æ—É—Ç–µ—Ä–∞
meditate_router = Router(name="meditation")

@meditate_router.message(Command("meditate"))
async def meditate_command(message: Message):
    """–û–±—Ä–∞–±–æ—Ç—á–∏–∫ –∫–æ–º–∞–Ω–¥—ã /meditate —Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é —É–∫–∞–∑–∞–Ω–∏—è —Ç–∏–ø–∞ –º–µ–¥–∏—Ç–∞—Ü–∏–∏."""
    # –ü–æ–ª—É—á–∞–µ–º –∞—Ä–≥—É–º–µ–Ω—Ç—ã –∫–æ–º–∞–Ω–¥—ã
    args = message.text.split()
    
    # –û–ø—Ä–µ–¥–µ–ª—è–µ–º —Ç–∏–ø –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    meditation_type = "default"
    if len(args) > 1 and args[1].lower() in MEDITATION_TEXTS:
        meditation_type = args[1].lower()
    
    # –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—Å—Ç –º–µ–¥–∏—Ç–∞—Ü–∏–∏
    meditation_text = MEDITATION_TEXTS[meditation_type]
    
    # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ –Ω–∞—á–∞–ª–µ –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏
    await message.answer(
        f"–ü–æ–¥–≥–æ—Ç–∞–≤–ª–∏–≤–∞—é –º–µ–¥–∏—Ç–∞—Ü–∏—é '{meditation_type}'. –≠—Ç–æ –∑–∞–π–º–µ—Ç –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–µ–∫—É–Ω–¥..."
    )
    
    # –ì–µ–Ω–µ—Ä–∏—Ä—É–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–π —Ñ–∞–π–ª
    voice_file_path = await generate_voice(
        text=meditation_text,
        tg_id=message.from_user.id
    )
    
    if voice_file_path:
        try:
            # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –≥–æ–ª–æ—Å–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
            await message.answer_voice(
                voice=FSInputFile(voice_file_path),
                caption="–ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ, –≥–¥–µ –≤–∞—Å –Ω–∏–∫—Ç–æ –Ω–µ –ø–æ–±–µ—Å–ø–æ–∫–æ–∏—Ç. –†–∞—Å—Å–ª–∞–±—å—Ç–µ—Å—å –∏ —Å–ª–µ–¥—É–π—Ç–µ –∏–Ω—Å—Ç—Ä—É–∫—Ü–∏—è–º."
            )
            logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ –º–µ–¥–∏—Ç–∞—Ü–∏—è —Ç–∏–ø–∞ '{meditation_type}' –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}")
            
            # –£–¥–∞–ª—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–π —Ñ–∞–π–ª
            await delete_voice_file(voice_file_path)
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –≥–æ–ª–æ—Å–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")
            await message.answer("–ü—Ä–æ–∏–∑–æ—à–ª–∞ –æ—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ –º–µ–¥–∏—Ç–∞—Ü–∏–∏. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ.")
            # –í —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏ —Ç–∞–∫–∂–µ –ø—ã—Ç–∞–µ–º—Å—è —É–¥–∞–ª–∏—Ç—å —Ñ–∞–π–ª
            await delete_voice_file(voice_file_path)
    else:
        await message.answer(
            "–ö —Å–æ–∂–∞–ª–µ–Ω–∏—é, –Ω–µ —É–¥–∞–ª–æ—Å—å —Å–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, –ø–æ–ø—Ä–æ–±—É–π—Ç–µ –ø–æ–∑–∂–µ."
        )

@meditate_router.message(Command("help_meditate"))
async def help_meditate(message: Message):
    """–°–ø—Ä–∞–≤–∫–∞ –ø–æ –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—é –∫–æ–º–∞–Ω–¥—ã /meditate –∏ –¥–æ—Å—Ç—É–ø–Ω—ã–º —Ç–∏–ø–∞–º –º–µ–¥–∏—Ç–∞—Ü–∏–π."""
    help_text = [
        "üßò‚Äç‚ôÄÔ∏è –ö–æ–º–∞–Ω–¥–∞ /meditate –ø–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –≥–æ–ª–æ—Å–æ–≤—É—é –º–µ–¥–∏—Ç–∞—Ü–∏—é.",
        "",
        "–í–∞—Ä–∏–∞–Ω—Ç—ã –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è:",
        "- /meditate - –º–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é",
        "- /meditate relax - –º–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Ä–∞—Å—Å–ª–∞–±–ª–µ–Ω–∏—è",
        "- /meditate focus - –º–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∞—Ü–∏–∏",
        "- /meditate sleep - –º–µ–¥–∏—Ç–∞—Ü–∏—è –¥–ª—è —Å–Ω–∞",
        "",
        "–ù–∞–π–¥–∏—Ç–µ —Ç–∏—Ö–æ–µ –º–µ—Å—Ç–æ, —É—Å—Ç—Ä–æ–π—Ç–µ—Å—å –ø–æ—É–¥–æ–±–Ω–µ–µ –∏ –ø–æ–∑–≤–æ–ª—å—Ç–µ —Å–µ–±–µ –ø–æ–ª–Ω–æ—Å—Ç—å—é —Ä–∞—Å—Å–ª–∞–±–∏—Ç—å—Å—è."
    ]
    
    await message.answer("\n".join(help_text))
    logger.info(f"–û—Ç–ø—Ä–∞–≤–ª–µ–Ω–∞ —Å–ø—Ä–∞–≤–∫–∞ –ø–æ –º–µ–¥–∏—Ç–∞—Ü–∏—è–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {message.from_user.id}") 