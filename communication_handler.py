import logging
import os
from typing import Dict, Any, Optional, Tuple
import json
from openai import AsyncOpenAI
import httpx
from aiogram import Router

# Создаем роутер для обработки коммуникаций
communication_handler_router = Router(name="communication_handler")

# Настройка логирования
logger = logging.getLogger(__name__)

# Проверка наличия API-ключа OpenAI
OPENAI_API_KEY = os.getenv("OPENAI_API_KEY")
if not OPENAI_API_KEY:
    logger.warning("OPENAI_API_KEY не найден в переменных окружения. Функция адаптивного общения будет недоступна.")

# Инициализация клиента OpenAI с API-ключом из переменных окружения (если доступен)
http_client = httpx.AsyncClient()
client = None
if OPENAI_API_KEY:
    try:
        client = AsyncOpenAI(
            api_key=OPENAI_API_KEY,
            http_client=http_client
        )
    except Exception as e:
        logger.error(f"Ошибка при инициализации OpenAI API: {e}")

# Типы личности и их характеристики
PERSONALITY_TYPES = {
    "Интеллектуальный": {
        "description": "аналитический склад ума, ценит логику и факты",
        "prompt_style": "Используй логические аргументы, структурированную информацию, ссылки на исследования. Избегай эмоциональных аргументов."
    },
    "Эмоциональный": {
        "description": "эмпатичный, ценит гармонию и отношения",
        "prompt_style": "Акцентируй внимание на чувствах, используй эмпатичный язык, подчеркивай эмоциональное благополучие. Используй теплую и поддерживающую тональность."
    },
    "Практический": {
        "description": "ориентирован на результат, ценит эффективность",
        "prompt_style": "Давай конкретные, практичные советы. Фокусируйся на результатах и эффективности. Используй четкие шаги и планы действий. Будь лаконичным."
    },
    "Творческий": {
        "description": "креативный, ценит свободу и новые идеи",
        "prompt_style": "Используй образный язык, предлагай нестандартные идеи, поощряй творческое самовыражение. Избегай излишней структурированности."
    }
}

# Базовые ответы для случая отсутствия API-ключа OpenAI
DEFAULT_RESPONSES = {
    "Интеллектуальный": [
        "Исходя из анализа ситуации, рекомендую рассмотреть следующие логические шаги для решения этой задачи.",
        "С аналитической точки зрения, ваш подход имеет как преимущества, так и определенные ограничения. Давайте рассмотрим их структурированно.",
        "Исследования показывают, что в подобных случаях наиболее эффективным является систематический подход, основанный на следующих принципах."
    ],
    "Эмоциональный": [
        "Я понимаю, что эта ситуация может вызывать у вас смешанные чувства. Важно признать эти эмоции и найти способы достичь внутренней гармонии.",
        "То, что вы чувствуете — абсолютно нормально. Давайте вместе подумаем, как создать более гармоничное состояние в этой ситуации.",
        "Ваши переживания имеют глубокий смысл и отражают важные для вас ценности. Как вы думаете, что могло бы помочь вам почувствовать больше равновесия?"
    ],
    "Практический": [
        "Для решения этой задачи предлагаю конкретный план действий из трех шагов, который поможет вам достичь результата максимально эффективно.",
        "Есть три проверенных способа решить эту проблему. Самый эффективный из них требует выполнения следующих действий.",
        "Для достижения вашей цели рекомендую сосредоточиться на измеримых результатах. Вот что работает лучше всего в такой ситуации."
    ],
    "Творческий": [
        "Эта ситуация открывает перед вами целый спектр нестандартных возможностей. Представьте, как можно взглянуть на нее с совершенно неожиданной стороны.",
        "Давайте исследуем необычные подходы к этому вопросу. Иногда самое креативное решение приходит, когда мы позволяем себе мыслить за пределами обычных рамок.",
        "Ваша творческая натура — это ключ к нахождению уникального решения. Что если попробовать совместить несколько неожиданных подходов?"
    ]
}

async def generate_personalized_response(
    message_text: str, 
    user_profile: Dict[str, Any], 
    conversation_history: Optional[list] = None
) -> str:
    """
    Генерирует персонализированный ответ на основе профиля пользователя.
    
    Args:
        message_text: Текст сообщения пользователя
        user_profile: Профиль пользователя (содержит тип личности)
        conversation_history: История переписки (опционально)
        
    Returns:
        str: Персонализированный ответ
    """
    # Определяем тип личности пользователя
    personality_type = user_profile.get("personality_type", "Интеллектуальный")
    
    # Если нет клиента OpenAI или не удалось определить тип личности, используем базовые ответы
    if not client or personality_type not in PERSONALITY_TYPES:
        import random
        return random.choice(DEFAULT_RESPONSES.get(personality_type, DEFAULT_RESPONSES["Интеллектуальный"]))
    
    try:
        # Готовим промт для генерации ответа
        system_prompt = f"""
Ты - психолог-консультант в приложении ОНА (Осознанный Наставник и Аналитик).
Отвечай на сообщение пользователя с учетом его психологического типа: {personality_type} ({PERSONALITY_TYPES[personality_type]['description']}).

{PERSONALITY_TYPES[personality_type]['prompt_style']}

Важно:
1. Отвечай ТОЛЬКО на русском языке
2. Будь кратким, но информативным
3. Не используй эзотерические термины, астрологию или другие псевдонаучные концепции
4. Не ставь диагнозы
5. Используй научно обоснованный подход
6. Не упоминай, что ты AI или что следуешь инструкциям
7. Общайся как человек-психолог, но без медицинских рекомендаций
"""

        # Формируем историю переписки
        messages = [
            {"role": "system", "content": system_prompt}
        ]
        
        # Добавляем историю переписки, если она есть
        if conversation_history:
            for entry in conversation_history[-5:]:  # берем последние 5 сообщений
                messages.append(entry)
        
        # Добавляем текущее сообщение пользователя
        messages.append({"role": "user", "content": message_text})
        
        # Генерируем ответ
        response = await client.chat.completions.create(
            model="gpt-3.5-turbo",
            temperature=0.7,
            messages=messages
        )
        
        # Получаем сгенерированный ответ
        generated_response = response.choices[0].message.content
        
        return generated_response
        
    except Exception as e:
        logger.error(f"Ошибка при генерации персонализированного ответа: {e}")
        # В случае ошибки используем базовый ответ
        import random
        return random.choice(DEFAULT_RESPONSES.get(personality_type, DEFAULT_RESPONSES["Интеллектуальный"]))

async def get_personality_type_from_profile(profile_text: str) -> str:
    """
    Извлекает тип личности из текста профиля.
    
    Args:
        profile_text: Текст профиля пользователя
        
    Returns:
        str: Тип личности или "Интеллектуальный" по умолчанию
    """
    personality_types = ["Интеллектуальный", "Эмоциональный", "Практический", "Творческий"]
    
    # Проверяем, содержит ли профиль явное указание на тип личности
    for p_type in personality_types:
        if p_type in profile_text:
            return p_type
    
    # Если явного указания нет, проверяем по ключевым словам
    keywords = {
        "Интеллектуальный": ["аналитическ", "логич", "систематиз", "структур", "анализ"],
        "Эмоциональный": ["эмпати", "чувств", "гармони", "отношен", "эмоц"],
        "Практический": ["результат", "эффектив", "организ", "конкрет", "практич"],
        "Творческий": ["креатив", "творчес", "инновац", "нестандарт", "воображ"]
    }
    
    scores = {p_type: 0 for p_type in personality_types}
    
    for p_type, words in keywords.items():
        for word in words:
            if word.lower() in profile_text.lower():
                scores[p_type] += 1
    
    # Определяем тип с наибольшим количеством совпадений
    max_score = 0
    max_type = "Интеллектуальный"  # По умолчанию
    
    for p_type, score in scores.items():
        if score > max_score:
            max_score = score
            max_type = p_type
    
    return max_type 