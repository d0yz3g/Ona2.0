#!/usr/bin/env python
"""
–ü—Ä–æ—Å—Ç–æ–π –µ–¥–∏–Ω—ã–π —Å–µ—Ä–≤–µ—Ä –¥–ª—è Railway
–û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ—Ç –∏ health check, –∏ webhook –∑–∞–ø—Ä–æ—Å—ã –æ—Ç Telegram
"""

import os
import sys
import json
import logging
import asyncio
import requests
from aiohttp import web
from dotenv import load_dotenv
import time

# –û—Ç—Å–ª–µ–∂–∏–≤–∞–µ–º –≤—Ä–µ–º—è –∑–∞–ø—É—Å–∫–∞
start_time = time.time()

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
logging.basicConfig(
    level=logging.INFO,
    format="%(asctime)s - [SERVER] - %(levelname)s - %(message)s",
    handlers=[logging.StreamHandler()]
)
logger = logging.getLogger("simple_server")

# –ó–∞–≥—Ä—É–∂–∞–µ–º –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–∫—Ä—É–∂–µ–Ω–∏—è
load_dotenv()

# –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ Railway –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
logger.info("=== –ò–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ Railway ===")
logger.info(f"RAILWAY_PUBLIC_DOMAIN: {os.environ.get('RAILWAY_PUBLIC_DOMAIN')}")
logger.info(f"RAILWAY_SERVICE_ID: {os.environ.get('RAILWAY_SERVICE_ID')}")
logger.info(f"RAILWAY_PROJECT_ID: {os.environ.get('RAILWAY_PROJECT_ID')}")
logger.info(f"RAILWAY_SERVICE_NAME: {os.environ.get('RAILWAY_SERVICE_NAME')}")
logger.info("==========================")

# –ü–æ–ª—É—á–∞–µ–º —Ç–æ–∫–µ–Ω –±–æ—Ç–∞
BOT_TOKEN = os.getenv("BOT_TOKEN")
if not BOT_TOKEN:
    logger.error("‚ùå –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è BOT_TOKEN –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –≤ .env –∏–ª–∏ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è")
    sys.exit(1)

def setup_webhook():
    """
    –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç webhook –¥–ª—è Telegram-–±–æ—Ç–∞
    
    Returns:
        bool: True –µ—Å–ª–∏ webhook —É—Å–ø–µ—à–Ω–æ –Ω–∞—Å—Ç—Ä–æ–µ–Ω, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    # –ü–æ–ª—É—á–∞–µ–º –Ω–µ–æ–±—Ö–æ–¥–∏–º—ã–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã–µ
    webhook_url = os.environ.get('WEBHOOK_URL')
    railway_public_domain = os.environ.get('RAILWAY_PUBLIC_DOMAIN')
    railway_service_id = os.environ.get('RAILWAY_SERVICE_ID')
    railway_project_id = os.environ.get('RAILWAY_PROJECT_ID')
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å–ª–∏ WEBHOOK_HOST —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –æ—Ç–¥–µ–ª—å–Ω–æ
    webhook_host = os.environ.get('WEBHOOK_HOST')
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è webhook
    if webhook_url:
        # –ï—Å–ª–∏ –Ω–∞–ø—Ä—è–º—É—é —É–∫–∞–∑–∞–Ω WEBHOOK_URL, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
        logger.info(f"–ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–Ω—ã–π WEBHOOK_URL: {webhook_url}")
    elif webhook_host:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ WEBHOOK_HOST
        webhook_url = f"https://{webhook_host}/webhook/{BOT_TOKEN}"
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω WEBHOOK_URL –Ω–∞ –æ—Å–Ω–æ–≤–µ WEBHOOK_HOST: {webhook_url}")
    elif railway_public_domain:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ RAILWAY_PUBLIC_DOMAIN
        webhook_url = f"https://{railway_public_domain}/webhook/{BOT_TOKEN}"
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω WEBHOOK_URL –Ω–∞ –æ—Å–Ω–æ–≤–µ Railway-–¥–æ–º–µ–Ω–∞: {webhook_url}")
    elif railway_service_id:
        # –§–æ—Ä–º–∏—Ä—É–µ–º –∏–∑ ID —Å–µ—Ä–≤–∏—Å–∞ Railway
        webhook_url = f"https://{railway_service_id}.up.railway.app/webhook/{BOT_TOKEN}"
        logger.info(f"–°—Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω WEBHOOK_URL –Ω–∞ –æ—Å–Ω–æ–≤–µ ID —Å–µ—Ä–≤–∏—Å–∞ Railway: {webhook_url}")
    else:
        # –ï—Å–ª–∏ –Ω–µ—Ç –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –¥–ª—è —Ñ–æ—Ä–º–∏—Ä–æ–≤–∞–Ω–∏—è URL, –ø—Ä–æ–ø—É—Å–∫–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å URL –¥–ª—è webhook, —Ä–∞–±–æ—Ç–∞–µ–º –±–µ–∑ –Ω–µ–≥–æ")
        logger.warning("‚ö†Ô∏è –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –ø–µ—Ä–µ–º–µ–Ω–Ω—É—é WEBHOOK_URL –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã webhook")
        return False
    
    # –°–Ω–∞—á–∞–ª–∞ —É–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π webhook, —á—Ç–æ–±—ã –∏–∑–±–µ–∂–∞—Ç—å –∫–æ–Ω—Ñ–ª–∏–∫—Ç–æ–≤
    logger.info("üîÑ –£–¥–∞–ª—è–µ–º —Ç–µ–∫—É—â–∏–π webhook...")
    delete_url = f"https://api.telegram.org/bot{BOT_TOKEN}/deleteWebhook?drop_pending_updates=true"
    try:
        delete_response = requests.get(delete_url, timeout=30)
        if delete_response.status_code == 200 and delete_response.json().get('ok'):
            logger.info("‚úÖ –¢–µ–∫—É—â–∏–π webhook —É—Å–ø–µ—à–Ω–æ —É–¥–∞–ª–µ–Ω")
        else:
            logger.warning(f"‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å —É–¥–∞–ª–∏—Ç—å —Ç–µ–∫—É—â–∏–π webhook: {delete_response.text}")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É–¥–∞–ª–µ–Ω–∏–∏ webhook: {e}")
    
    logger.info(f"–ù–∞—Å—Ç—Ä–æ–π–∫–∞ webhook –¥–ª—è –±–æ—Ç–∞ —Å —Ç–æ–∫–µ–Ω–æ–º: {BOT_TOKEN[:5]}...{BOT_TOKEN[-5:]}")
    logger.info(f"Webhook URL: {webhook_url}")
    
    # –§–æ—Ä–º–∏—Ä—É–µ–º URL –¥–ª—è API Telegram
    api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/setWebhook"
    
    try:
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å –Ω–∞ —É—Å—Ç–∞–Ω–æ–≤–∫—É webhook
        response = requests.post(
            api_url,
            json={
                'url': webhook_url,
                'allowed_updates': ['message', 'callback_query', 'inline_query'],
                'drop_pending_updates': True,
                'secret_token': os.environ.get('WEBHOOK_SECRET', 'telegram_webhook_secret')
            },
            timeout=30
        )
        
        # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if response.status_code == 200 and response.json().get('ok'):
            description = response.json().get('description', '–ù–µ—Ç –æ–ø–∏—Å–∞–Ω–∏—è')
            logger.info(f"‚úÖ Webhook —É—Å–ø–µ—à–Ω–æ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω: {description}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook –¥–ª—è –ø–æ–¥—Ç–≤–µ—Ä–∂–¥–µ–Ω–∏—è
            check_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
            try:
                check_response = requests.get(check_url, timeout=30)
                if check_response.status_code == 200:
                    webhook_info = check_response.json().get('result', {})
                    logger.info(f"‚ÑπÔ∏è –¢–µ–∫—É—â–∏–π webhook URL: {webhook_info.get('url')}")
                    logger.info(f"‚ÑπÔ∏è –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞: {webhook_info.get('last_error_message', '–Ω–µ—Ç')}")
                    logger.info(f"‚ÑπÔ∏è –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {webhook_info.get('pending_update_count', 0)}")
                else:
                    logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {check_response.text}")
            except Exception as e:
                logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {e}")
            
            return True
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —É—Å—Ç–∞–Ω–æ–≤–∫–µ webhook: {response.text}")
            return False
            
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –Ω–∞—Å—Ç—Ä–æ–π–∫–µ webhook: {e}")
        return False

def test_webhook():
    """
    –û—Ç–ø—Ä–∞–≤–ª—è–µ—Ç —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –≤ Telegram API –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Ä–∞–±–æ—Ç—ã webhook
    """
    logger.info("üß™ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ webhook...")
    api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/sendMessage"
    try:
        # –ü–æ–ª—É—á–∞–µ–º ID –∞–¥–º–∏–Ω–∞ –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
        admin_id = os.environ.get('ADMIN_CHAT_ID')
        if not admin_id:
            logger.warning("‚ö†Ô∏è ADMIN_CHAT_ID –Ω–µ —É–∫–∞–∑–∞–Ω, —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ –Ω–µ –±—É–¥–µ—Ç –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
            return
        
        # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        response = requests.post(
            api_url,
            json={
                'chat_id': admin_id,
                'text': f"ü§ñ –ë–æ—Ç –ø–µ—Ä–µ–∑–∞–ø—É—â–µ–Ω –∏ –≥–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ! Webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω –Ω–∞ {os.environ.get('WEBHOOK_URL', '–Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—ã–π URL')}."
            },
            timeout=10
        )
        
        if response.status_code == 200 and response.json().get('ok'):
            logger.info("‚úÖ –¢–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ –æ—Ç–ø—Ä–∞–≤–ª–µ–Ω–æ")
        else:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {response.text}")
    except Exception as e:
        logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –æ—Ç–ø—Ä–∞–≤–∫–µ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–æ–±—â–µ–Ω–∏—è: {e}")

async def forward_to_telegram(update_data):
    """
    –ü–µ—Ä–µ—Å—ã–ª–∞–µ—Ç –¥–∞–Ω–Ω—ã–µ –æ—Ç webhook –∫ API Telegram –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    
    Args:
        update_data (dict): –î–∞–Ω–Ω—ã–µ –æ—Ç Telegram webhook
        
    Returns:
        bool: True –µ—Å–ª–∏ —É—Å–ø–µ—à–Ω–æ, False –≤ –ø—Ä–æ—Ç–∏–≤–Ω–æ–º —Å–ª—É—á–∞–µ
    """
    try:
        # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å—ë —Å–æ–æ–±—â–µ–Ω–∏–µ —Ü–µ–ª–∏–∫–æ–º –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        logger.info(f"‚öôÔ∏è –û–±—Ä–∞–±–æ—Ç–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {json.dumps(update_data, ensure_ascii=False)}")
        
        # –ü–æ–ª—É—á–∞–µ–º –º–µ—Ç–æ–¥ –¥–ª—è –≤—ã–∑–æ–≤–∞ –Ω–∞ –æ—Å–Ω–æ–≤–µ —Ç–∏–ø–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è
        method = None
        
        if 'message' in update_data:
            chat_id = update_data['message']['chat']['id']
            text = update_data['message'].get('text', '')
            
            # –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            user_info = update_data['message']['from']
            username = user_info.get('username', '–Ω–µ—Ç')
            first_name = user_info.get('first_name', '')
            last_name = user_info.get('last_name', '')
            logger.info(f"üì© –ü–æ–ª—É—á–µ–Ω–æ —Å–æ–æ–±—â–µ–Ω–∏–µ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è @{username} ({first_name} {last_name}): {text}")
            
            if text and text.startswith('/'):
                # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –∫–æ–º–∞–Ω–¥—ã
                command = text.split()[0].lower()
                logger.info(f"üîÑ –û–±—Ä–∞–±–æ—Ç–∫–∞ –∫–æ–º–∞–Ω–¥—ã: {command}")
                
                if command == '/start':
                    method = "sendMessage"
                    params = {
                        'chat_id': chat_id,
                        'text': "üëã –ü—Ä–∏–≤–µ—Ç! –Ø –û–Ω–∞ - —Ç–≤–æ–π –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫.\n\n–Ø –º–æ–≥—É –ø–æ–º–æ—á—å —Ç–µ–±–µ —Ä–∞–∑–æ–±—Ä–∞—Ç—å—Å—è –≤ —Å–µ–±–µ –∏ —Å–≤–æ–∏—Ö —ç–º–æ—Ü–∏—è—Ö.\n\n–ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–∑–Ω–∞—Ç—å, —á—Ç–æ —è —É–º–µ—é."
                    }
                    logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /start –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                elif command == '/help':
                    method = "sendMessage"
                    params = {
                        'chat_id': chat_id,
                        'text': "üìã –î–æ—Å—Ç—É–ø–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:\n\n/start - –ù–∞—á–∞—Ç—å –¥–∏–∞–ª–æ–≥\n/help - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É\n/about - –û –±–æ—Ç–µ\n/meditate - –ü–æ–ª—É—á–∏—Ç—å –º–µ–¥–∏—Ç–∞—Ü–∏—é"
                    }
                    logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /help –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                elif command == '/about':
                    method = "sendMessage"
                    params = {
                        'chat_id': chat_id,
                        'text': "‚ÑπÔ∏è –Ø - –û–Ω–∞, –±–æ—Ç-–ø–æ–º–æ—â–Ω–∏–∫, —Å–æ–∑–¥–∞–Ω–Ω—ã–π —á—Ç–æ–±—ã –ø–æ–º–æ–≥–∞—Ç—å —Ç–µ–±–µ –≤ —Ç—Ä—É–¥–Ω—ã–µ –º–æ–º–µ–Ω—Ç—ã. –Ø –∏—Å–ø–æ–ª—å–∑—É—é —Å–æ–≤—Ä–µ–º–µ–Ω–Ω—ã–µ —Ç–µ—Ö–Ω–æ–ª–æ–≥–∏–∏ –∏—Å–∫—É—Å—Å—Ç–≤–µ–Ω–Ω–æ–≥–æ –∏–Ω—Ç–µ–ª–ª–µ–∫—Ç–∞ –¥–ª—è –∞–Ω–∞–ª–∏–∑–∞ —Ç–≤–æ–∏—Ö —Å–æ–æ–±—â–µ–Ω–∏–π –∏ –ø—Ä–µ–¥–æ—Å—Ç–∞–≤–ª–µ–Ω–∏—è –ø–æ–¥–¥–µ—Ä–∂–∫–∏."
                    }
                    logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /about –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                elif command == '/meditate':
                    method = "sendMessage"
                    params = {
                        'chat_id': chat_id,
                        'text': "üßò‚Äç‚ôÄÔ∏è –ú–µ–¥–∏—Ç–∞—Ü–∏—è –ø–æ–º–æ–∂–µ—Ç —Ç–µ–±–µ —É—Å–ø–æ–∫–æ–∏—Ç—å—Å—è –∏ —Å–æ—Å—Ä–µ–¥–æ—Ç–æ—á–∏—Ç—å—Å—è. –ì–ª—É–±–æ–∫–æ –≤–¥–æ—Ö–Ω–∏ –∏ –º–µ–¥–ª–µ–Ω–Ω–æ –≤—ã–¥–æ—Ö–Ω–∏. –ü–æ–≤—Ç–æ—Ä—è–π —ç—Ç–æ—Ç –ø—Ä–æ—Ü–µ—Å—Å, –∫–æ–Ω—Ü–µ–Ω—Ç—Ä–∏—Ä—É—è—Å—å –Ω–∞ —Å–≤–æ–µ–º –¥—ã—Ö–∞–Ω–∏–∏."
                    }
                    logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –∫–æ–º–∞–Ω–¥—É /meditate –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
                else:
                    method = "sendMessage"
                    params = {
                        'chat_id': chat_id,
                        'text': f"ü§î –ö–æ–º–∞–Ω–¥–∞ {command} –Ω–µ —Ä–∞—Å–ø–æ–∑–Ω–∞–Ω–∞. –ù–∞–ø–∏—à–∏ /help —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å —Å–ø–∏—Å–æ–∫ –∫–æ–º–∞–Ω–¥."
                    }
                    logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –æ—Ç–≤–µ—Ç –Ω–∞ –Ω–µ–∏–∑–≤–µ—Å—Ç–Ω—É—é –∫–æ–º–∞–Ω–¥—É {command} –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
            else:
                # –≠—Ö–æ-–æ—Ç–≤–µ—Ç –Ω–∞ —Ç–µ–∫—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ (–≤ –±—É–¥—É—â–µ–º –∑–¥–µ—Å—å –±—É–¥–µ—Ç –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏—è —Å OpenAI)
                method = "sendMessage"
                params = {
                    'chat_id': chat_id,
                    'text': f"ü§ñ –¢—ã –Ω–∞–ø–∏—Å–∞–ª: {text}\n\n–í –±—É–¥—É—â–∏—Ö –≤–µ—Ä—Å–∏—è—Ö —è —Å–º–æ–≥—É –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å –ø–æ–ª–Ω–æ—Ü–µ–Ω–Ω—ã–π –¥–∏–∞–ª–æ–≥."
                }
                logger.info(f"ü§ñ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —ç—Ö–æ-–æ—Ç–≤–µ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é {chat_id}")
        elif 'callback_query' in update_data:
            # –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º callback_query –æ—Ç inline-–∫–Ω–æ–ø–æ–∫
            logger.info("üì© –ü–æ–ª—É—á–µ–Ω callback_query")
            callback_id = update_data['callback_query']['id']
            chat_id = update_data['callback_query']['message']['chat']['id']
            data = update_data['callback_query'].get('data', '')
            
            # –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query
            method = "answerCallbackQuery"
            params = {
                'callback_query_id': callback_id,
                'text': f"–í—ã–±—Ä–∞–Ω–æ: {data}"
            }
            logger.info(f"ü§ñ –û—Ç–≤–µ—á–∞–µ–º –Ω–∞ callback_query —Å –¥–∞–Ω–Ω—ã–º–∏: {data}")
        
        # –ï—Å–ª–∏ –º–µ—Ç–æ–¥ –±—ã–ª –æ–ø—Ä–µ–¥–µ–ª–µ–Ω, –≤—ã–∑—ã–≤–∞–µ–º API
        if method:
            api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/{method}"
            logger.info(f"üì§ –í—ã–∑—ã–≤–∞–µ–º –º–µ—Ç–æ–¥ API: {method}")
            
            # –ü–æ–≤—Ç–æ—Ä—è–µ–º –∑–∞–ø—Ä–æ—Å –¥–æ —Ç—Ä–µ—Ö —Ä–∞–∑ –≤ —Å–ª—É—á–∞–µ –æ—à–∏–±–∫–∏
            max_retries = 3
            for attempt in range(max_retries):
                try:
                    response = requests.post(api_url, json=params, timeout=10)
                    if response.status_code == 200:
                        logger.info(f"‚úÖ API –≤—ã–∑–æ–≤ —É—Å–ø–µ—à–µ–Ω: {method}")
                        return True
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API {method} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {response.text}")
                        if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                            return False
                        # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                        await asyncio.sleep(1)
                except (requests.RequestException, asyncio.TimeoutError) as e:
                    logger.error(f"‚ùå –ò—Å–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –≤—ã–∑–æ–≤–µ API {method} (–ø–æ–ø—ã—Ç–∫–∞ {attempt+1}/{max_retries}): {e}")
                    if attempt == max_retries - 1:  # –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞
                        return False
                    # –ü–∞—É–∑–∞ –ø–µ—Ä–µ–¥ –ø–æ–≤—Ç–æ—Ä–Ω–æ–π –ø–æ–ø—ã—Ç–∫–æ–π
                    await asyncio.sleep(1)
        else:
            logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å –º–µ—Ç–æ–¥ API –¥–ª—è –æ—Ç–≤–µ—Ç–∞")
        
        return True
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–µ—Ä–µ—Å—ã–ª–∫–µ –¥–∞–Ω–Ω—ã—Ö –≤ Telegram: {e}")
        # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        import traceback
        logger.error(f"Traceback: {traceback.format_exc()}")
        return False

async def start_simple_server():
    """
    –ó–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ—Å—Ç–æ–π –≤–µ–±-—Å–µ—Ä–≤–µ—Ä –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –∑–∞–ø—Ä–æ—Å–æ–≤
    """
    # –°–æ–∑–¥–∞–µ–º –≤–µ–±-–ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ
    app = web.Application()
    
    # –î–ª—è —Ö—Ä–∞–Ω–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ö–æ—Å—Ç–µ –∏–∑ –∑–∞–ø—Ä–æ—Å–æ–≤ health check
    host_info = {'detected_host': None}
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è –∫–æ—Ä–Ω–µ–≤–æ–≥–æ –ø—É—Ç–∏ (–¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏)
    async def health_check(request):
        # –°–æ–±–∏—Ä–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Å–æ—Å—Ç–æ—è–Ω–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
        status = {
            "status": "ok",
            "timestamp": time.time(),
            "service": os.environ.get('RAILWAY_SERVICE_NAME', 'Ona Bot'),
            "bot_info": None,
            "webhook_info": None,
            "uptime": time.time() - start_time
        }
        
        # –°–æ—Ö—Ä–∞–Ω—è–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ —Ö–æ—Å—Ç–µ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è webhook URL
        if not host_info['detected_host'] and 'Host' in request.headers:
            host = request.headers.get('Host')
            host_info['detected_host'] = host
            logger.info(f"–û–±–Ω–∞—Ä—É–∂–µ–Ω —Ö–æ—Å—Ç –∏–∑ –∑–∞–≥–æ–ª–æ–≤–∫–∞ –∑–∞–ø—Ä–æ—Å–∞: {host}")
            
            # –ü—Ä–æ–±—É–µ–º –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º —Ö–æ—Å—Ç–æ–º
            if BOT_TOKEN and not os.environ.get('WEBHOOK_URL'):
                webhook_url = f"https://{host}/webhook/{BOT_TOKEN}"
                logger.info(f"–ü–æ–ø—ã—Ç–∫–∞ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ webhook —Å –æ–±–Ω–∞—Ä—É–∂–µ–Ω–Ω—ã–º —Ö–æ—Å—Ç–æ–º: {webhook_url}")
                
                # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º WEBHOOK_URL –¥–ª—è –ø–æ—Å–ª–µ–¥—É—é—â–∏—Ö –≤—ã–∑–æ–≤–æ–≤ setup_webhook
                os.environ['WEBHOOK_URL'] = webhook_url
                
                # –í—ã–∑—ã–≤–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É webhook
                setup_webhook()
                
                # –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
                test_webhook()
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
        try:
            api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
            response = requests.get(api_url, timeout=5)
            if response.status_code == 200:
                status["bot_info"] = response.json().get('result')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –±–æ—Ç–µ: {e}")
            status["bot_info_error"] = str(e)
        
        # –ü–æ–ª—É—á–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ webhook
        try:
            api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
            response = requests.get(api_url, timeout=5)
            if response.status_code == 200:
                status["webhook_info"] = response.json().get('result')
        except Exception as e:
            logger.error(f"–û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ webhook: {e}")
            status["webhook_info_error"] = str(e)
        
        # –õ–æ–≥–∏—Ä—É–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –∑–∞–ø—Ä–æ—Å–µ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
        client_ip = request.headers.get('X-Forwarded-For') or request.remote
        user_agent = request.headers.get('User-Agent', 'Unknown')
        logger.info(f"{client_ip} [{time.strftime('%d/%b/%Y:%H:%M:%S +0000')}] \"{request.method} {request.path} {request.version}\" 200 {len(str(status))} \"-\" \"{user_agent}\"")
        
        return web.json_response(status)
    
    # –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –¥–ª—è webhook
    async def webhook_handler(request):
        if request.match_info.get('token') != BOT_TOKEN:
            logger.warning(f"–ü–æ–ª—É—á–µ–Ω –∑–∞–ø—Ä–æ—Å —Å –Ω–µ–≤–µ—Ä–Ω—ã–º —Ç–æ–∫–µ–Ω–æ–º: {request.match_info.get('token')}")
            return web.Response(status=403, text="Forbidden")
        
        try:
            # –ü–æ–ª—É—á–∞–µ–º –¥–∞–Ω–Ω—ã–µ –∑–∞–ø—Ä–æ—Å–∞
            webhook_data = await request.text()
            logger.info(f"üì• –ü–û–õ–£–ß–ï–ù–´ –î–ê–ù–ù–´–ï WEBHOOK: {webhook_data}")
            
            # –ü–∞—Ä—Å–∏–º JSON
            try:
                update_data = json.loads(webhook_data)
            except json.JSONDecodeError as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON: {e}")
                logger.error(f"‚ùå –ù–µ–≤–µ—Ä–Ω—ã–π JSON: {webhook_data}")
                return web.Response(status=400, text="Bad Request - Invalid JSON")
            
            # –õ–æ–≥–∏—Ä—É–µ–º –≤—Å–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            headers_str = '\n'.join([f"{k}: {v}" for k, v in request.headers.items()])
            logger.info(f"üîç WEBHOOK HEADERS:\n{headers_str}")
            
            # –ë–æ–ª–µ–µ –ø–æ–¥—Ä–æ–±–Ω–æ–µ –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏–µ —Ç–µ–ª–∞ –∑–∞–ø—Ä–æ—Å–∞
            logger.info(f"üì¶ –ü–û–õ–£–ß–ï–ù WEBHOOK-–ó–ê–ü–†–û–°: {json.dumps(update_data, ensure_ascii=False)}")
            
            # –õ–æ–≥–∏—Ä—É–µ–º IP-–∞–¥—Ä–µ—Å –æ—Ç–ø—Ä–∞–≤–∏—Ç–µ–ª—è
            peer_name = request.transport.get_extra_info('peername')
            if peer_name:
                logger.info(f"üåê –ó–ê–ü–†–û–° –ü–û–õ–£–ß–ï–ù –° IP: {peer_name[0]}:{peer_name[1]}")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É –¥–∞–Ω–Ω—ã—Ö
            if not update_data:
                logger.error("‚ùå –ü–æ–ª—É—á–µ–Ω –ø—É—Å—Ç–æ–π JSON")
                return web.Response(status=400, text="Bad Request - Empty JSON")
            
            # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ –Ω—É–∂–Ω—ã—Ö –ø–æ–ª–µ–π
            if 'update_id' not in update_data:
                logger.error("‚ùå –í JSON –æ—Ç—Å—É—Ç—Å—Ç–≤—É–µ—Ç –ø–æ–ª–µ update_id")
                logger.error(f"‚ùå –°–æ–¥–µ—Ä–∂–∏–º–æ–µ JSON: {webhook_data}")
                return web.Response(status=400, text="Bad Request - Missing update_id")
            
            logger.info(f"‚ú® –ù–ê–ß–ò–ù–ê–ï–ú –û–ë–†–ê–ë–û–¢–ö–£ UPDATE_ID={update_data['update_id']}")
            
            # –ü–µ—Ä–µ—Å—ã–ª–∞–µ–º –¥–∞–Ω–Ω—ã–µ –≤ Telegram API –∏ –∂–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
            success = await forward_to_telegram(update_data)
            if success:
                logger.info(f"‚úÖ WEBHOOK –û–ë–†–ê–ë–û–¢–ê–ù –£–°–ü–ï–®–ù–û –î–õ–Ø UPDATE_ID={update_data['update_id']}")
            else:
                logger.error(f"‚ùå –û–®–ò–ë–ö–ê –ü–†–ò –û–ë–†–ê–ë–û–¢–ö–ï WEBHOOK –î–õ–Ø UPDATE_ID={update_data['update_id']}")
            
            # –í–æ–∑–≤—Ä–∞—â–∞–µ–º —É—Å–ø–µ—à–Ω—ã–π –æ—Ç–≤–µ—Ç
            return web.Response(status=200, text="OK")
        except json.JSONDecodeError as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –¥–µ–∫–æ–¥–∏—Ä–æ–≤–∞–Ω–∏—è JSON –≤ webhook-–∑–∞–ø—Ä–æ—Å–µ: {e}")
            logger.error(f"‚ùå –¢–µ–ª–æ –∑–∞–ø—Ä–æ—Å–∞: {await request.text()}")
            return web.Response(status=400, text="Bad Request - Invalid JSON")
        except Exception as e:
            logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ webhook-–∑–∞–ø—Ä–æ—Å–∞: {e}")
            # –ü–µ—á–∞—Ç–∞–µ–º –ø–æ–ª–Ω—ã–π traceback –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏
            import traceback
            logger.error(f"‚ùå Traceback: {traceback.format_exc()}")
            return web.Response(status=500, text="Internal Server Error")
    
    # –†–µ–≥–∏—Å—Ç—Ä–∏—Ä—É–µ–º –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏
    app.router.add_get("/", health_check)
    app.router.add_get("/health", health_check)
    app.router.add_post(f"/webhook/{BOT_TOKEN}", webhook_handler)
    
    # –ü–æ–ª—É—á–∞–µ–º –ø–æ—Ä—Ç –∏–∑ –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö –æ–∫—Ä—É–∂–µ–Ω–∏—è
    port = int(os.environ.get("PORT", 8080))
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
    runner = web.AppRunner(app)
    await runner.setup()
    site = web.TCPSite(runner, '0.0.0.0', port)
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
    if not setup_webhook():
        logger.warning("‚ö†Ô∏è –ù–µ —É–¥–∞–ª–æ—Å—å –Ω–∞—Å—Ç—Ä–æ–∏—Ç—å webhook, –Ω–æ —Å–µ—Ä–≤–µ—Ä –±—É–¥–µ—Ç –∑–∞–ø—É—â–µ–Ω")
    else:
        # –ï—Å–ª–∏ webhook –Ω–∞—Å—Ç—Ä–æ–µ–Ω —É—Å–ø–µ—à–Ω–æ, –æ—Ç–ø—Ä–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–æ–±—â–µ–Ω–∏–µ
        test_webhook()
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –≤–µ–±-—Å–µ—Ä–≤–µ—Ä
    logger.info(f"–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–∞ –ø–æ—Ä—Ç—É {port}...")
    await site.start()
    logger.info(f"‚úÖ –°–µ—Ä–≤–µ—Ä —É—Å–ø–µ—à–Ω–æ –∑–∞–ø—É—â–µ–Ω –Ω–∞ –ø–æ—Ä—Ç—É {port}")
    
    # –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–æ–≥–æ –ø–∏–Ω–≥–∞, —á—Ç–æ–±—ã –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —Å–µ—Ä–≤–µ—Ä –∞–∫—Ç–∏–≤–Ω—ã–º
    async def keep_alive():
        """–ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏ –æ—Ç–ø—Ä–∞–≤–ª—è–µ—Ç –∑–∞–ø—Ä–æ—Å –∫ API Telegram –¥–ª—è –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏"""
        last_webhook_check = 0
        while True:
            try:
                # –¢–µ–∫—É—â–µ–µ –≤—Ä–µ–º—è
                current_time = time.time()
                
                # –ó–∞–ø—Ä–∞—à–∏–≤–∞–µ–º –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±–æ—Ç–µ
                api_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getMe"
                response = requests.get(api_url, timeout=10)
                if response.status_code == 200:
                    bot_info = response.json().get('result', {})
                    bot_name = bot_info.get('first_name', 'Unknown')
                    bot_username = bot_info.get('username', 'Unknown')
                    logger.info(f"ü§ñ –ë–æ—Ç –∞–∫—Ç–∏–≤–µ–Ω: {bot_name} (@{bot_username})")
                else:
                    logger.warning(f"‚ö†Ô∏è –ü–∏–Ω–≥ API –≤–µ—Ä–Ω—É–ª —Å—Ç–∞—Ç—É—Å {response.status_code}: {response.text}")
                
                # –ü—Ä–æ–≤–µ—Ä—è–µ–º webhook –∫–∞–∂–¥—ã–µ 30 –º–∏–Ω—É—Ç
                if current_time - last_webhook_check > 1800:  # 30 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
                    check_url = f"https://api.telegram.org/bot{BOT_TOKEN}/getWebhookInfo"
                    check_response = requests.get(check_url, timeout=10)
                    if check_response.status_code == 200:
                        webhook_info = check_response.json().get('result', {})
                        webhook_url = webhook_info.get('url', '')
                        last_error = webhook_info.get('last_error_message')
                        pending_updates = webhook_info.get('pending_update_count', 0)
                        
                        logger.info(f"üîÑ –ü—Ä–æ–≤–µ—Ä–∫–∞ webhook: URL = {webhook_url}")
                        logger.info(f"üîÑ –ü–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ webhook: {last_error or '–Ω–µ—Ç'}")
                        logger.info(f"üîÑ –û–∂–∏–¥–∞—é—â–∏–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è: {pending_updates}")
                        
                        # –ï—Å–ª–∏ –ø–æ—Å–ª–µ–¥–Ω—è—è –æ—à–∏–±–∫–∞ —É–∫–∞–∑—ã–≤–∞–µ—Ç –Ω–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å webhook –∏–ª–∏ –Ω–µ—Ç URL,
                        # –ø–µ—Ä–µ–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º webhook
                        if last_error or not webhook_url:
                            logger.warning("‚ö†Ô∏è –û–±–Ω–∞—Ä—É–∂–µ–Ω—ã –ø—Ä–æ–±–ª–µ–º—ã —Å webhook, –ø–µ—Ä–µ—É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º...")
                            setup_webhook()
                    else:
                        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ webhook: {check_response.text}")
                    
                    # –û–±–Ω–æ–≤–ª—è–µ–º –≤—Ä–µ–º—è –ø–æ—Å–ª–µ–¥–Ω–µ–π –ø—Ä–æ–≤–µ—Ä–∫–∏
                    last_webhook_check = current_time
            except Exception as e:
                logger.error(f"‚ùå –û—à–∏–±–∫–∞ –≤ –∑–∞–¥–∞—á–µ keep_alive: {e}")
            
            # –ñ–¥–µ–º 5 –º–∏–Ω—É—Ç –ø–µ—Ä–µ–¥ —Å–ª–µ–¥—É—é—â–∏–º –ø–∏–Ω–≥–æ–º
            await asyncio.sleep(300)
    
    # –ó–∞–ø—É—Å–∫–∞–µ–º –∑–∞–¥–∞—á—É –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏—è –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
    asyncio.create_task(keep_alive())
    
    # –ñ–¥–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
    while True:
        await asyncio.sleep(3600)

if __name__ == "__main__":
    logger.info("–ó–∞–ø—É—Å–∫ –ø—Ä–æ—Å—Ç–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞ –¥–ª—è Railway...")
    
    # –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–∞–ª–∏—á–∏–µ ADMIN_CHAT_ID
    admin_id = os.environ.get('ADMIN_CHAT_ID')
    if not admin_id:
        logger.warning("‚ö†Ô∏è –ü–µ—Ä–µ–º–µ–Ω–Ω–∞—è ADMIN_CHAT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∞. –î–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ä–µ–∫–æ–º–µ–Ω–¥—É–µ—Ç—Å—è —É–∫–∞–∑–∞—Ç—å ID –∞–¥–º–∏–Ω–∏—Å—Ç—Ä–∞—Ç–æ—Ä–∞.")
        # –ò—Å–ø–æ–ª—å–∑—É–µ–º –∑–Ω–∞—á–µ–Ω–∏–µ –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é, –µ—Å–ª–∏ –æ–Ω–æ –Ω–µ —É–∫–∞–∑–∞–Ω–æ
        os.environ['ADMIN_CHAT_ID'] = "123456789"  # –ó–∞–º–µ–Ω–∏—Ç–µ –Ω–∞ –≤–∞—à ID
    
    try:
        # –ó–∞–ø—É—Å–∫–∞–µ–º —Å–µ—Ä–≤–µ—Ä
        asyncio.run(start_simple_server())
    except KeyboardInterrupt:
        logger.info("–ü–æ–ª—É—á–µ–Ω —Å–∏–≥–Ω–∞–ª –ø—Ä–µ—Ä—ã–≤–∞–Ω–∏—è, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ —Ä–∞–±–æ—Ç—ã...")
    except Exception as e:
        logger.error(f"‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–µ—Ä–∞: {e}")
        sys.exit(1) 